; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\MEDIA_USB_KEY\usb_hcd_int.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\MEDIA_USB_KEY\usb_hcd_int.d --cpu=Cortex-M4 --apcs=interwork -I.\Libraries -I.\Utilities -I.\Libraries\CMSIS\ST\STM32F4xx\Include -I.\inc -I.\src -I.\Libraries\STM32F4xx_StdPeriph_Driver -I.\Libraries\STM32_USB_HOST_Library -I.\Libraries\STM32_USB_OTG_Driver -I.\Utilities\STM32F4-Discovery -I.\Libraries\CMSIS -I.\Utilities\Third_Party\fat_fs -IC:\Keil4\ARM\RV31\INC -IC:\Keil4\ARM\CMSIS\Include -IC:\Keil4\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DUSE_USB_OTG_FS -DSTM32F4XX -DMEDIA_USB_KEY -D__FPU_PRESENT=0 --omf_browse=.\MEDIA_USB_KEY\usb_hcd_int.crf Libraries\STM32_USB_OTG_Driver\usb_hcd_int.c]
                          THUMB

                          AREA ||i.USBH_OTG_ISR_Handler||, CODE, READONLY, ALIGN=1

                  USBH_OTG_ISR_Handler PROC
;;;113    
;;;114    uint32_t USBH_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
000000  b538              PUSH     {r3-r5,lr}
;;;115    {
000002  4605              MOV      r5,r0
;;;116      USB_OTG_GINTSTS_TypeDef  gintsts;
;;;117      uint32_t retval = 0;
000004  2400              MOVS     r4,#0
;;;118      
;;;119      gintsts.d32 = 0;
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;120      
;;;121      /* Check if HOST Mode */
;;;122      if (USB_OTG_IsHostMode(pdev))
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       USB_OTG_IsHostMode
000010  2800              CMP      r0,#0
000012  d047              BEQ      |L1.164|
;;;123      {
;;;124        gintsts.d32 = USB_OTG_ReadCoreItr(pdev);
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       USB_OTG_ReadCoreItr
00001a  9000              STR      r0,[sp,#0]
;;;125        if (!gintsts.d32)
00001c  9800              LDR      r0,[sp,#0]
00001e  b908              CBNZ     r0,|L1.36|
;;;126        {
;;;127          return 0;
000020  2000              MOVS     r0,#0
                  |L1.34|
;;;128        }
;;;129        
;;;130        if (gintsts.b.sofintr)
;;;131        {
;;;132          retval |= USB_OTG_USBH_handle_sof_ISR (pdev);
;;;133        }
;;;134        
;;;135        if (gintsts.b.rxstsqlvl)
;;;136        {
;;;137          retval |= USB_OTG_USBH_handle_rx_qlvl_ISR (pdev);
;;;138        }
;;;139        
;;;140        if (gintsts.b.nptxfempty)
;;;141        {
;;;142          retval |= USB_OTG_USBH_handle_nptxfempty_ISR (pdev);
;;;143        }
;;;144        
;;;145        if (gintsts.b.ptxfempty)
;;;146        {
;;;147          retval |= USB_OTG_USBH_handle_ptxfempty_ISR (pdev);
;;;148        }    
;;;149        
;;;150        if (gintsts.b.hcintr)
;;;151        {
;;;152          retval |= USB_OTG_USBH_handle_hc_ISR (pdev);
;;;153        }
;;;154        
;;;155        if (gintsts.b.portintr)
;;;156        {
;;;157          retval |= USB_OTG_USBH_handle_port_ISR (pdev);
;;;158        }
;;;159        
;;;160        if (gintsts.b.disconnect)
;;;161        {
;;;162          retval |= USB_OTG_USBH_handle_Disconnect_ISR (pdev);  
;;;163          
;;;164        }
;;;165        
;;;166         if (gintsts.b.incomplisoout)
;;;167          {
;;;168             retval |= USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (pdev);
;;;169          }
;;;170          
;;;171        
;;;172      }
;;;173      return retval;
;;;174    }
000022  bd38              POP      {r3-r5,pc}
                  |L1.36|
000024  9800              LDR      r0,[sp,#0]            ;130
000026  f3c000c0          UBFX     r0,r0,#3,#1           ;130
00002a  b118              CBZ      r0,|L1.52|
00002c  4628              MOV      r0,r5                 ;132
00002e  f7fffffe          BL       USB_OTG_USBH_handle_sof_ISR
000032  4304              ORRS     r4,r4,r0              ;132
                  |L1.52|
000034  9800              LDR      r0,[sp,#0]            ;135
000036  f3c01000          UBFX     r0,r0,#4,#1           ;135
00003a  b118              CBZ      r0,|L1.68|
00003c  4628              MOV      r0,r5                 ;137
00003e  f7fffffe          BL       USB_OTG_USBH_handle_rx_qlvl_ISR
000042  4304              ORRS     r4,r4,r0              ;137
                  |L1.68|
000044  9800              LDR      r0,[sp,#0]            ;140
000046  f3c01040          UBFX     r0,r0,#5,#1           ;140
00004a  b118              CBZ      r0,|L1.84|
00004c  4628              MOV      r0,r5                 ;142
00004e  f7fffffe          BL       USB_OTG_USBH_handle_nptxfempty_ISR
000052  4304              ORRS     r4,r4,r0              ;142
                  |L1.84|
000054  9800              LDR      r0,[sp,#0]            ;145
000056  f3c06080          UBFX     r0,r0,#26,#1          ;145
00005a  b118              CBZ      r0,|L1.100|
00005c  4628              MOV      r0,r5                 ;147
00005e  f7fffffe          BL       USB_OTG_USBH_handle_ptxfempty_ISR
000062  4304              ORRS     r4,r4,r0              ;147
                  |L1.100|
000064  9800              LDR      r0,[sp,#0]            ;150
000066  f3c06040          UBFX     r0,r0,#25,#1          ;150
00006a  b118              CBZ      r0,|L1.116|
00006c  4628              MOV      r0,r5                 ;152
00006e  f7fffffe          BL       USB_OTG_USBH_handle_hc_ISR
000072  4304              ORRS     r4,r4,r0              ;152
                  |L1.116|
000074  9800              LDR      r0,[sp,#0]            ;155
000076  f3c06000          UBFX     r0,r0,#24,#1          ;155
00007a  b118              CBZ      r0,|L1.132|
00007c  4628              MOV      r0,r5                 ;157
00007e  f7fffffe          BL       USB_OTG_USBH_handle_port_ISR
000082  4304              ORRS     r4,r4,r0              ;157
                  |L1.132|
000084  9800              LDR      r0,[sp,#0]            ;160
000086  f3c07040          UBFX     r0,r0,#29,#1          ;160
00008a  b118              CBZ      r0,|L1.148|
00008c  4628              MOV      r0,r5                 ;162
00008e  f7fffffe          BL       USB_OTG_USBH_handle_Disconnect_ISR
000092  4304              ORRS     r4,r4,r0              ;162
                  |L1.148|
000094  9800              LDR      r0,[sp,#0]            ;166
000096  f3c05040          UBFX     r0,r0,#21,#1          ;166
00009a  b118              CBZ      r0,|L1.164|
00009c  4628              MOV      r0,r5                 ;168
00009e  f7fffffe          BL       USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
0000a2  4304              ORRS     r4,r4,r0              ;168
                  |L1.164|
0000a4  4620              MOV      r0,r4                 ;173
0000a6  e7bc              B        |L1.34|
;;;175    
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_Disconnect_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_Disconnect_ISR PROC
;;;238      */
;;;239    static uint32_t USB_OTG_USBH_handle_Disconnect_ISR (USB_OTG_CORE_HANDLE *pdev)
000000  b538              PUSH     {r3-r5,lr}
;;;240    {
000002  4604              MOV      r4,r0
;;;241      USB_OTG_GINTSTS_TypeDef      gintsts;
;;;242      
;;;243      pdev->host.ConnSts = 0;
000004  2100              MOVS     r1,#0
000006  f8c41210          STR      r1,[r4,#0x210]
;;;244      gintsts.d32 = 0;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;245      
;;;246      pdev->host.port_cb->Disconnect(pdev);
00000e  f8d404ac          LDR      r0,[r4,#0x4ac]
000012  6801              LDR      r1,[r0,#0]
000014  4620              MOV      r0,r4
000016  4788              BLX      r1
;;;247      
;;;248      /* Clear interrupt */
;;;249      gintsts.b.disconnect = 1;
000018  9800              LDR      r0,[sp,#0]
00001a  f0205000          BIC      r0,r0,#0x20000000
00001e  f1005000          ADD      r0,r0,#0x20000000
000022  9000              STR      r0,[sp,#0]
;;;250      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
000024  9800              LDR      r0,[sp,#0]
000026  68e1              LDR      r1,[r4,#0xc]
000028  6148              STR      r0,[r1,#0x14]
;;;251      
;;;252      return 1;
00002a  2001              MOVS     r0,#1
;;;253    }
00002c  bd38              POP      {r3-r5,pc}
;;;254    
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR PROC
;;;796      */
;;;797    static uint32_t USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR (USB_OTG_CORE_HANDLE *pdev)
000000  b50c              PUSH     {r2,r3,lr}
;;;798    {
000002  4601              MOV      r1,r0
;;;799      
;;;800        USB_OTG_GINTSTS_TypeDef       gintsts;
;;;801        USB_OTG_HCCHAR_TypeDef        hcchar; 
;;;802       
;;;803        
;;;804    
;;;805        
;;;806        hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[0]->HCCHAR);
000004  f8d10090          LDR      r0,[r1,#0x90]
000008  6800              LDR      r0,[r0,#0]
00000a  9000              STR      r0,[sp,#0]
;;;807        hcchar.b.chen = 1;
00000c  9800              LDR      r0,[sp,#0]
00000e  f0204000          BIC      r0,r0,#0x80000000
000012  f1004000          ADD      r0,r0,#0x80000000
000016  9000              STR      r0,[sp,#0]
;;;808        hcchar.b.chdis = 1;
000018  9800              LDR      r0,[sp,#0]
00001a  f0204080          BIC      r0,r0,#0x40000000
00001e  f1004080          ADD      r0,r0,#0x40000000
000022  9000              STR      r0,[sp,#0]
;;;809        USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[0]->HCCHAR, hcchar.d32);  
000024  9a00              LDR      r2,[sp,#0]
000026  f8d10090          LDR      r0,[r1,#0x90]
00002a  6002              STR      r2,[r0,#0]
;;;810        
;;;811        gintsts.d32 = 0;
00002c  2000              MOVS     r0,#0
00002e  9001              STR      r0,[sp,#4]
;;;812        /* Clear interrupt */
;;;813        gintsts.b.incomplisoout = 1;
000030  9801              LDR      r0,[sp,#4]
000032  f4201000          BIC      r0,r0,#0x200000
000036  f5001000          ADD      r0,r0,#0x200000
00003a  9001              STR      r0,[sp,#4]
;;;814        USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
00003c  9801              LDR      r0,[sp,#4]
00003e  68ca              LDR      r2,[r1,#0xc]
000040  6150              STR      r0,[r2,#0x14]
;;;815    
;;;816        return 1;
000042  2001              MOVS     r0,#1
;;;817    }
000044  bd0c              POP      {r2,r3,pc}
;;;818    
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_hc_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_hc_ISR PROC
;;;181      */
;;;182    static uint32_t USB_OTG_USBH_handle_hc_ISR (USB_OTG_CORE_HANDLE *pdev)
000000  b57c              PUSH     {r2-r6,lr}
;;;183    {
000002  4605              MOV      r5,r0
;;;184      USB_OTG_HAINT_TypeDef        haint;
;;;185      USB_OTG_HCCHAR_TypeDef       hcchar;
;;;186      uint32_t i = 0;
000004  2400              MOVS     r4,#0
;;;187      uint32_t retval = 0;
000006  2600              MOVS     r6,#0
;;;188      
;;;189      /* Clear appropriate bits in HCINTn to clear the interrupt bit in
;;;190      * GINTSTS */
;;;191      
;;;192      haint.d32 = USB_OTG_ReadHostAllChannels_intr(pdev);
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       USB_OTG_ReadHostAllChannels_intr
00000e  9001              STR      r0,[sp,#4]
;;;193      
;;;194      for (i = 0; i < pdev->cfg.host_channels ; i++)
000010  bf00              NOP      
000012  e01b              B        |L4.76|
                  |L4.20|
;;;195      {
;;;196        if (haint.b.chint & (1 << i))
000014  9801              LDR      r0,[sp,#4]
000016  b280              UXTH     r0,r0
000018  2101              MOVS     r1,#1
00001a  40a1              LSLS     r1,r1,r4
00001c  4208              TST      r0,r1
00001e  d014              BEQ      |L4.74|
;;;197        {
;;;198          hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[i]->HCCHAR);
000020  f1050090          ADD      r0,r5,#0x90
000024  f8500024          LDR      r0,[r0,r4,LSL #2]
000028  6800              LDR      r0,[r0,#0]
00002a  9000              STR      r0,[sp,#0]
;;;199          
;;;200          if (hcchar.b.epdir)
00002c  9800              LDR      r0,[sp,#0]
00002e  f3c030c0          UBFX     r0,r0,#15,#1
000032  b128              CBZ      r0,|L4.64|
;;;201          {
;;;202            retval |= USB_OTG_USBH_handle_hc_n_In_ISR (pdev, i);
000034  4621              MOV      r1,r4
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       USB_OTG_USBH_handle_hc_n_In_ISR
00003c  4306              ORRS     r6,r6,r0
00003e  e004              B        |L4.74|
                  |L4.64|
;;;203          }
;;;204          else
;;;205          {
;;;206            retval |=  USB_OTG_USBH_handle_hc_n_Out_ISR (pdev, i);
000040  4621              MOV      r1,r4
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       USB_OTG_USBH_handle_hc_n_Out_ISR
000048  4306              ORRS     r6,r6,r0
                  |L4.74|
00004a  1c64              ADDS     r4,r4,#1              ;194
                  |L4.76|
00004c  7828              LDRB     r0,[r5,#0]            ;194
00004e  42a0              CMP      r0,r4                 ;194
000050  d8e0              BHI      |L4.20|
;;;207          }
;;;208        }
;;;209      }
;;;210      
;;;211      return retval;
000052  4630              MOV      r0,r6
;;;212    }
000054  bd7c              POP      {r2-r6,pc}
;;;213    
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_hc_n_In_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_hc_n_In_ISR PROC
;;;577      */
;;;578    uint32_t USB_OTG_USBH_handle_hc_n_In_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
000000  b570              PUSH     {r4-r6,lr}
;;;579    {
000002  b086              SUB      sp,sp,#0x18
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;580      USB_OTG_HCINTn_TypeDef     hcint;
;;;581      USB_OTG_HCGINTMSK_TypeDef  hcintmsk;
;;;582      USB_OTG_HCCHAR_TypeDef     hcchar; 
;;;583      USB_OTG_HCTSIZn_TypeDef  hctsiz;
;;;584      USB_OTG_HC_REGS *hcreg;
;;;585    
;;;586      
;;;587      hcreg = pdev->regs.HC_REGS[num];
000008  f1050090          ADD      r0,r5,#0x90
00000c  f8506024          LDR      r6,[r0,r4,LSL #2]
;;;588      hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
000010  68b0              LDR      r0,[r6,#8]
000012  9005              STR      r0,[sp,#0x14]
;;;589      hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCGINTMSK);
000014  68f0              LDR      r0,[r6,#0xc]
000016  9004              STR      r0,[sp,#0x10]
;;;590      hcint.d32 = hcint.d32 & hcintmsk.d32;
000018  e9dd1004          LDRD     r1,r0,[sp,#0x10]
00001c  4008              ANDS     r0,r0,r1
00001e  9005              STR      r0,[sp,#0x14]
;;;591      hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
000020  f1050090          ADD      r0,r5,#0x90
000024  f8500024          LDR      r0,[r0,r4,LSL #2]
000028  6800              LDR      r0,[r0,#0]
00002a  9003              STR      r0,[sp,#0xc]
;;;592      hcintmsk.d32 = 0;
00002c  2000              MOVS     r0,#0
00002e  9004              STR      r0,[sp,#0x10]
;;;593      
;;;594      
;;;595      if (hcint.b.ahberr)
000030  9805              LDR      r0,[sp,#0x14]
000032  f3c00080          UBFX     r0,r0,#2,#1
000036  b1d0              CBZ      r0,|L5.110|
;;;596      {
;;;597        CLEAR_HC_INT(hcreg ,ahberr);
000038  2000              MOVS     r0,#0
00003a  9001              STR      r0,[sp,#4]
00003c  9801              LDR      r0,[sp,#4]
00003e  f0200004          BIC      r0,r0,#4
000042  1d00              ADDS     r0,r0,#4
000044  9001              STR      r0,[sp,#4]
000046  9801              LDR      r0,[sp,#4]
000048  60b0              STR      r0,[r6,#8]
;;;598        UNMASK_HOST_INT_CHH (num);
00004a  f1050090          ADD      r0,r5,#0x90
00004e  f8500024          LDR      r0,[r0,r4,LSL #2]
000052  68c0              LDR      r0,[r0,#0xc]
000054  9001              STR      r0,[sp,#4]
000056  9801              LDR      r0,[sp,#4]
000058  f0200002          BIC      r0,r0,#2
00005c  1c80              ADDS     r0,r0,#2
00005e  9001              STR      r0,[sp,#4]
000060  f1050090          ADD      r0,r5,#0x90
000064  f8500024          LDR      r0,[r0,r4,LSL #2]
000068  9901              LDR      r1,[sp,#4]
00006a  60c1              STR      r1,[r0,#0xc]
00006c  e073              B        |L5.342|
                  |L5.110|
;;;599      }  
;;;600      else if (hcint.b.ack)
00006e  9805              LDR      r0,[sp,#0x14]
000070  f3c01040          UBFX     r0,r0,#5,#1
000074  b148              CBZ      r0,|L5.138|
;;;601      {
;;;602        CLEAR_HC_INT(hcreg ,ack);
000076  2000              MOVS     r0,#0
000078  9001              STR      r0,[sp,#4]
00007a  9801              LDR      r0,[sp,#4]
00007c  f0200020          BIC      r0,r0,#0x20
000080  3020              ADDS     r0,r0,#0x20
000082  9001              STR      r0,[sp,#4]
000084  9801              LDR      r0,[sp,#4]
000086  60b0              STR      r0,[r6,#8]
000088  e065              B        |L5.342|
                  |L5.138|
;;;603      }
;;;604      
;;;605      else if (hcint.b.stall)  
00008a  9805              LDR      r0,[sp,#0x14]
00008c  f3c000c0          UBFX     r0,r0,#3,#1
000090  b378              CBZ      r0,|L5.242|
;;;606      {
;;;607        UNMASK_HOST_INT_CHH (num);
000092  f1050090          ADD      r0,r5,#0x90
000096  f8500024          LDR      r0,[r0,r4,LSL #2]
00009a  68c0              LDR      r0,[r0,#0xc]
00009c  9001              STR      r0,[sp,#4]
00009e  9801              LDR      r0,[sp,#4]
0000a0  f0200002          BIC      r0,r0,#2
0000a4  1c80              ADDS     r0,r0,#2
0000a6  9001              STR      r0,[sp,#4]
0000a8  f1050090          ADD      r0,r5,#0x90
0000ac  f8500024          LDR      r0,[r0,r4,LSL #2]
0000b0  9901              LDR      r1,[sp,#4]
0000b2  60c1              STR      r1,[r0,#0xc]
;;;608        pdev->host.HC_Status[num] = HC_STALL; 
0000b4  2105              MOVS     r1,#5
0000b6  f5057023          ADD      r0,r5,#0x28c
0000ba  5501              STRB     r1,[r0,r4]
;;;609        CLEAR_HC_INT(hcreg , nak);   /* Clear the NAK Condition */
0000bc  2000              MOVS     r0,#0
0000be  9001              STR      r0,[sp,#4]
0000c0  9801              LDR      r0,[sp,#4]
0000c2  f0200010          BIC      r0,r0,#0x10
0000c6  3010              ADDS     r0,r0,#0x10
0000c8  9001              STR      r0,[sp,#4]
0000ca  9801              LDR      r0,[sp,#4]
0000cc  60b0              STR      r0,[r6,#8]
;;;610        CLEAR_HC_INT(hcreg , stall); /* Clear the STALL Condition */
0000ce  2000              MOVS     r0,#0
0000d0  9001              STR      r0,[sp,#4]
0000d2  9801              LDR      r0,[sp,#4]
0000d4  f0200008          BIC      r0,r0,#8
0000d8  3008              ADDS     r0,r0,#8
0000da  9001              STR      r0,[sp,#4]
0000dc  9801              LDR      r0,[sp,#4]
0000de  60b0              STR      r0,[r6,#8]
;;;611        hcint.b.nak = 0;           /* NOTE: When there is a 'stall', reset also nak, 
0000e0  9805              LDR      r0,[sp,#0x14]
0000e2  f0200010          BIC      r0,r0,#0x10
0000e6  9005              STR      r0,[sp,#0x14]
;;;612                                      else, the pdev->host.HC_Status = HC_STALL
;;;613                                      will be overwritten by 'nak' in code below */
;;;614        USB_OTG_HC_Halt(pdev, num);    
0000e8  b2e1              UXTB     r1,r4
0000ea  4628              MOV      r0,r5
0000ec  f7fffffe          BL       USB_OTG_HC_Halt
0000f0  e031              B        |L5.342|
                  |L5.242|
0000f2  e7ff              B        |L5.244|
                  |L5.244|
;;;615      }
;;;616      else if (hcint.b.datatglerr)
0000f4  9805              LDR      r0,[sp,#0x14]
0000f6  f3c02080          UBFX     r0,r0,#10,#1
0000fa  b360              CBZ      r0,|L5.342|
;;;617      {
;;;618    
;;;619          UNMASK_HOST_INT_CHH (num);
0000fc  f1050090          ADD      r0,r5,#0x90
000100  f8500024          LDR      r0,[r0,r4,LSL #2]
000104  68c0              LDR      r0,[r0,#0xc]
000106  9001              STR      r0,[sp,#4]
000108  9801              LDR      r0,[sp,#4]
00010a  f0200002          BIC      r0,r0,#2
00010e  1c80              ADDS     r0,r0,#2
000110  9001              STR      r0,[sp,#4]
000112  f1050090          ADD      r0,r5,#0x90
000116  f8500024          LDR      r0,[r0,r4,LSL #2]
00011a  9901              LDR      r1,[sp,#4]
00011c  60c1              STR      r1,[r0,#0xc]
;;;620          USB_OTG_HC_Halt(pdev, num);
00011e  b2e1              UXTB     r1,r4
000120  4628              MOV      r0,r5
000122  f7fffffe          BL       USB_OTG_HC_Halt
;;;621          CLEAR_HC_INT(hcreg , nak);   
000126  2000              MOVS     r0,#0
000128  9001              STR      r0,[sp,#4]
00012a  9801              LDR      r0,[sp,#4]
00012c  f0200010          BIC      r0,r0,#0x10
000130  3010              ADDS     r0,r0,#0x10
000132  9001              STR      r0,[sp,#4]
000134  9801              LDR      r0,[sp,#4]
000136  60b0              STR      r0,[r6,#8]
;;;622          pdev->host.HC_Status[num] = HC_DATATGLERR; 
000138  2108              MOVS     r1,#8
00013a  f5057023          ADD      r0,r5,#0x28c
00013e  5501              STRB     r1,[r0,r4]
;;;623        CLEAR_HC_INT(hcreg , datatglerr);
000140  2000              MOVS     r0,#0
000142  9001              STR      r0,[sp,#4]
000144  9801              LDR      r0,[sp,#4]
000146  f4206080          BIC      r0,r0,#0x400
00014a  f5006080          ADD      r0,r0,#0x400
00014e  9001              STR      r0,[sp,#4]
000150  9801              LDR      r0,[sp,#4]
000152  60b0              STR      r0,[r6,#8]
000154  bf00              NOP      
                  |L5.342|
;;;624      }    
;;;625      
;;;626      if (hcint.b.frmovrun)
000156  9805              LDR      r0,[sp,#0x14]
000158  f3c02040          UBFX     r0,r0,#9,#1
00015c  b1f8              CBZ      r0,|L5.414|
;;;627      {
;;;628        UNMASK_HOST_INT_CHH (num);
00015e  f1050090          ADD      r0,r5,#0x90
000162  f8500024          LDR      r0,[r0,r4,LSL #2]
000166  68c0              LDR      r0,[r0,#0xc]
000168  9001              STR      r0,[sp,#4]
00016a  9801              LDR      r0,[sp,#4]
00016c  f0200002          BIC      r0,r0,#2
000170  1c80              ADDS     r0,r0,#2
000172  9001              STR      r0,[sp,#4]
000174  f1050090          ADD      r0,r5,#0x90
000178  f8500024          LDR      r0,[r0,r4,LSL #2]
00017c  9901              LDR      r1,[sp,#4]
00017e  60c1              STR      r1,[r0,#0xc]
;;;629        USB_OTG_HC_Halt(pdev, num);
000180  b2e1              UXTB     r1,r4
000182  4628              MOV      r0,r5
000184  f7fffffe          BL       USB_OTG_HC_Halt
;;;630        CLEAR_HC_INT(hcreg ,frmovrun);
000188  2000              MOVS     r0,#0
00018a  9001              STR      r0,[sp,#4]
00018c  9801              LDR      r0,[sp,#4]
00018e  f4207000          BIC      r0,r0,#0x200
000192  f5007000          ADD      r0,r0,#0x200
000196  9001              STR      r0,[sp,#4]
000198  9801              LDR      r0,[sp,#4]
00019a  60b0              STR      r0,[r6,#8]
                  |L5.412|
00019c  e140              B        |L5.1056|
                  |L5.414|
;;;631      }
;;;632      
;;;633      else if (hcint.b.xfercompl)
00019e  9805              LDR      r0,[sp,#0x14]
0001a0  f0100f01          TST      r0,#1
0001a4  d071              BEQ      |L5.650|
;;;634      {
;;;635        
;;;636        if (pdev->cfg.dma_enable == 1)
0001a6  78e8              LDRB     r0,[r5,#3]
0001a8  2801              CMP      r0,#1
0001aa  d112              BNE      |L5.466|
;;;637        {
;;;638          hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCTSIZ);
0001ac  f1050090          ADD      r0,r5,#0x90
0001b0  f8500024          LDR      r0,[r0,r4,LSL #2]
0001b4  6900              LDR      r0,[r0,#0x10]
0001b6  9002              STR      r0,[sp,#8]
;;;639          pdev->host.XferCnt[num] =  pdev->host.hc[num].xfer_len - hctsiz.b.xfersize;
0001b8  f505702b          ADD      r0,r5,#0x2ac
0001bc  eb001044          ADD      r0,r0,r4,LSL #5
0001c0  6900              LDR      r0,[r0,#0x10]
0001c2  9902              LDR      r1,[sp,#8]
0001c4  f3c10112          UBFX     r1,r1,#0,#19
0001c8  1a41              SUBS     r1,r0,r1
0001ca  f5057014          ADD      r0,r5,#0x250
0001ce  f8401024          STR      r1,[r0,r4,LSL #2]
                  |L5.466|
;;;640        }
;;;641     
;;;642        pdev->host.HC_Status[num] = HC_XFRC;     
0001d2  2101              MOVS     r1,#1
0001d4  f5057023          ADD      r0,r5,#0x28c
0001d8  5501              STRB     r1,[r0,r4]
;;;643        pdev->host.ErrCnt [num]= 0;
0001da  2100              MOVS     r1,#0
0001dc  3878              SUBS     r0,r0,#0x78
0001de  f8401024          STR      r1,[r0,r4,LSL #2]
;;;644        CLEAR_HC_INT(hcreg , xfercompl);
0001e2  2000              MOVS     r0,#0
0001e4  9001              STR      r0,[sp,#4]
0001e6  9801              LDR      r0,[sp,#4]
0001e8  f0200001          BIC      r0,r0,#1
0001ec  1c40              ADDS     r0,r0,#1
0001ee  9001              STR      r0,[sp,#4]
0001f0  9801              LDR      r0,[sp,#4]
0001f2  60b0              STR      r0,[r6,#8]
;;;645        
;;;646        if ((hcchar.b.eptype == EP_TYPE_CTRL)||
0001f4  9803              LDR      r0,[sp,#0xc]
0001f6  f3c04081          UBFX     r0,r0,#18,#2
0001fa  b120              CBZ      r0,|L5.518|
;;;647            (hcchar.b.eptype == EP_TYPE_BULK))
0001fc  9803              LDR      r0,[sp,#0xc]
0001fe  f3c04081          UBFX     r0,r0,#18,#2
000202  2802              CMP      r0,#2
000204  d12a              BNE      |L5.604|
                  |L5.518|
;;;648        {
;;;649          UNMASK_HOST_INT_CHH (num);
000206  f1050090          ADD      r0,r5,#0x90
00020a  f8500024          LDR      r0,[r0,r4,LSL #2]
00020e  68c0              LDR      r0,[r0,#0xc]
000210  9001              STR      r0,[sp,#4]
000212  9801              LDR      r0,[sp,#4]
000214  f0200002          BIC      r0,r0,#2
000218  1c80              ADDS     r0,r0,#2
00021a  9001              STR      r0,[sp,#4]
00021c  f1050090          ADD      r0,r5,#0x90
000220  f8500024          LDR      r0,[r0,r4,LSL #2]
000224  9901              LDR      r1,[sp,#4]
000226  60c1              STR      r1,[r0,#0xc]
;;;650          USB_OTG_HC_Halt(pdev, num);
000228  b2e1              UXTB     r1,r4
00022a  4628              MOV      r0,r5
00022c  f7fffffe          BL       USB_OTG_HC_Halt
;;;651          CLEAR_HC_INT(hcreg , nak); 
000230  2000              MOVS     r0,#0
000232  9001              STR      r0,[sp,#4]
000234  9801              LDR      r0,[sp,#4]
000236  f0200010          BIC      r0,r0,#0x10
00023a  3010              ADDS     r0,r0,#0x10
00023c  9001              STR      r0,[sp,#4]
00023e  9801              LDR      r0,[sp,#4]
000240  60b0              STR      r0,[r6,#8]
;;;652          pdev->host.hc[num].toggle_in ^= 1;
000242  f505702b          ADD      r0,r5,#0x2ac
000246  eb001044          ADD      r0,r0,r4,LSL #5
00024a  7e00              LDRB     r0,[r0,#0x18]
00024c  f0800101          EOR      r1,r0,#1
000250  f505702b          ADD      r0,r5,#0x2ac
000254  eb001044          ADD      r0,r0,r4,LSL #5
000258  7601              STRB     r1,[r0,#0x18]
00025a  e0e1              B        |L5.1056|
                  |L5.604|
;;;653    
;;;654        }
;;;655        else if(hcchar.b.eptype == EP_TYPE_INTR)
00025c  9803              LDR      r0,[sp,#0xc]
00025e  f3c04081          UBFX     r0,r0,#18,#2
000262  2803              CMP      r0,#3
000264  d19a              BNE      |L5.412|
;;;656        {
;;;657          hcchar.b.oddfrm  = 1;
000266  9803              LDR      r0,[sp,#0xc]
000268  f0205000          BIC      r0,r0,#0x20000000
00026c  f1005000          ADD      r0,r0,#0x20000000
000270  9003              STR      r0,[sp,#0xc]
;;;658          USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
000272  f1050090          ADD      r0,r5,#0x90
000276  f8500024          LDR      r0,[r0,r4,LSL #2]
00027a  9903              LDR      r1,[sp,#0xc]
00027c  6001              STR      r1,[r0,#0]
;;;659          pdev->host.URB_State[num] = URB_DONE;  
00027e  2101              MOVS     r1,#1
000280  f205209b          ADD      r0,r5,#0x29b
000284  5501              STRB     r1,[r0,r4]
000286  e0cb              B        |L5.1056|
000288  e7ff              B        |L5.650|
                  |L5.650|
;;;660        }
;;;661        
;;;662      }
;;;663      else if (hcint.b.chhltd)
00028a  9805              LDR      r0,[sp,#0x14]
00028c  f3c00040          UBFX     r0,r0,#1,#1
000290  2800              CMP      r0,#0
000292  d051              BEQ      |L5.824|
;;;664      {
;;;665        MASK_HOST_INT_CHH (num);
000294  f1050090          ADD      r0,r5,#0x90
000298  f8500024          LDR      r0,[r0,r4,LSL #2]
00029c  68c0              LDR      r0,[r0,#0xc]
00029e  9001              STR      r0,[sp,#4]
0002a0  9801              LDR      r0,[sp,#4]
0002a2  f0200002          BIC      r0,r0,#2
0002a6  9001              STR      r0,[sp,#4]
0002a8  f1050090          ADD      r0,r5,#0x90
0002ac  f8500024          LDR      r0,[r0,r4,LSL #2]
0002b0  9901              LDR      r1,[sp,#4]
0002b2  60c1              STR      r1,[r0,#0xc]
;;;666        
;;;667        if(pdev->host.HC_Status[num] == HC_XFRC)
0002b4  f5057023          ADD      r0,r5,#0x28c
0002b8  5d00              LDRB     r0,[r0,r4]
0002ba  2801              CMP      r0,#1
0002bc  d104              BNE      |L5.712|
;;;668        {
;;;669          pdev->host.URB_State[num] = URB_DONE;      
0002be  2101              MOVS     r1,#1
0002c0  f205209b          ADD      r0,r5,#0x29b
0002c4  5501              STRB     r1,[r0,r4]
0002c6  e02d              B        |L5.804|
                  |L5.712|
;;;670        }
;;;671        
;;;672        else if (pdev->host.HC_Status[num] == HC_STALL) 
0002c8  f5057023          ADD      r0,r5,#0x28c
0002cc  5d00              LDRB     r0,[r0,r4]
0002ce  2805              CMP      r0,#5
0002d0  d104              BNE      |L5.732|
;;;673        {
;;;674           pdev->host.URB_State[num] = URB_STALL;
0002d2  2104              MOVS     r1,#4
0002d4  f205209b          ADD      r0,r5,#0x29b
0002d8  5501              STRB     r1,[r0,r4]
0002da  e023              B        |L5.804|
                  |L5.732|
;;;675        }   
;;;676        
;;;677        else if((pdev->host.HC_Status[num] == HC_XACTERR) ||
0002dc  f5057023          ADD      r0,r5,#0x28c
0002e0  5d00              LDRB     r0,[r0,r4]
0002e2  2806              CMP      r0,#6
0002e4  d004              BEQ      |L5.752|
;;;678                (pdev->host.HC_Status[num] == HC_DATATGLERR))
0002e6  f5057023          ADD      r0,r5,#0x28c
0002ea  5d00              LDRB     r0,[r0,r4]
0002ec  2808              CMP      r0,#8
0002ee  d108              BNE      |L5.770|
                  |L5.752|
;;;679        {
;;;680            pdev->host.ErrCnt[num] = 0;
0002f0  2100              MOVS     r1,#0
0002f2  f5057005          ADD      r0,r5,#0x214
0002f6  f8401024          STR      r1,[r0,r4,LSL #2]
;;;681            pdev->host.URB_State[num] = URB_ERROR;  
0002fa  2103              MOVS     r1,#3
0002fc  3087              ADDS     r0,r0,#0x87
0002fe  5501              STRB     r1,[r0,r4]
000300  e010              B        |L5.804|
                  |L5.770|
;;;682    
;;;683        }
;;;684        else if(hcchar.b.eptype == EP_TYPE_INTR)
000302  9803              LDR      r0,[sp,#0xc]
000304  f3c04081          UBFX     r0,r0,#18,#2
000308  2803              CMP      r0,#3
00030a  d10b              BNE      |L5.804|
;;;685        {
;;;686          pdev->host.hc[num].toggle_in ^= 1;
00030c  f505702b          ADD      r0,r5,#0x2ac
000310  eb001044          ADD      r0,r0,r4,LSL #5
000314  7e00              LDRB     r0,[r0,#0x18]
000316  f0800101          EOR      r1,r0,#1
00031a  f505702b          ADD      r0,r5,#0x2ac
00031e  eb001044          ADD      r0,r0,r4,LSL #5
000322  7601              STRB     r1,[r0,#0x18]
                  |L5.804|
;;;687        }
;;;688        
;;;689        CLEAR_HC_INT(hcreg , chhltd);    
000324  2000              MOVS     r0,#0
000326  9001              STR      r0,[sp,#4]
000328  9801              LDR      r0,[sp,#4]
00032a  f0200002          BIC      r0,r0,#2
00032e  1c80              ADDS     r0,r0,#2
000330  9001              STR      r0,[sp,#4]
000332  9801              LDR      r0,[sp,#4]
000334  60b0              STR      r0,[r6,#8]
000336  e073              B        |L5.1056|
                  |L5.824|
;;;690        
;;;691      }    
;;;692      else if (hcint.b.xacterr)
000338  9805              LDR      r0,[sp,#0x14]
00033a  f3c010c0          UBFX     r0,r0,#7,#1
00033e  b340              CBZ      r0,|L5.914|
;;;693      {
;;;694        UNMASK_HOST_INT_CHH (num);
000340  f1050090          ADD      r0,r5,#0x90
000344  f8500024          LDR      r0,[r0,r4,LSL #2]
000348  68c0              LDR      r0,[r0,#0xc]
00034a  9001              STR      r0,[sp,#4]
00034c  9801              LDR      r0,[sp,#4]
00034e  f0200002          BIC      r0,r0,#2
000352  1c80              ADDS     r0,r0,#2
000354  9001              STR      r0,[sp,#4]
000356  f1050090          ADD      r0,r5,#0x90
00035a  f8500024          LDR      r0,[r0,r4,LSL #2]
00035e  9901              LDR      r1,[sp,#4]
000360  60c1              STR      r1,[r0,#0xc]
;;;695        pdev->host.ErrCnt[num] ++;
000362  f5057005          ADD      r0,r5,#0x214
000366  f8501024          LDR      r1,[r0,r4,LSL #2]
00036a  1c49              ADDS     r1,r1,#1
00036c  f8401024          STR      r1,[r0,r4,LSL #2]
;;;696        pdev->host.HC_Status[num] = HC_XACTERR;
000370  2106              MOVS     r1,#6
000372  3078              ADDS     r0,r0,#0x78
000374  5501              STRB     r1,[r0,r4]
;;;697        USB_OTG_HC_Halt(pdev, num);
000376  b2e1              UXTB     r1,r4
000378  4628              MOV      r0,r5
00037a  f7fffffe          BL       USB_OTG_HC_Halt
;;;698        CLEAR_HC_INT(hcreg , xacterr);    
00037e  2000              MOVS     r0,#0
000380  9001              STR      r0,[sp,#4]
000382  9801              LDR      r0,[sp,#4]
000384  f0200080          BIC      r0,r0,#0x80
000388  3080              ADDS     r0,r0,#0x80
00038a  9001              STR      r0,[sp,#4]
00038c  9801              LDR      r0,[sp,#4]
00038e  60b0              STR      r0,[r6,#8]
000390  e046              B        |L5.1056|
                  |L5.914|
;;;699        
;;;700      }
;;;701      else if (hcint.b.nak)  
000392  9805              LDR      r0,[sp,#0x14]
000394  f3c01000          UBFX     r0,r0,#4,#1
000398  b3f0              CBZ      r0,|L5.1048|
;;;702      {  
;;;703        if(hcchar.b.eptype == EP_TYPE_INTR)
00039a  9803              LDR      r0,[sp,#0xc]
00039c  f3c04081          UBFX     r0,r0,#18,#2
0003a0  2803              CMP      r0,#3
0003a2  d11e              BNE      |L5.994|
;;;704        {
;;;705          UNMASK_HOST_INT_CHH (num);
0003a4  f1050090          ADD      r0,r5,#0x90
0003a8  f8500024          LDR      r0,[r0,r4,LSL #2]
0003ac  68c0              LDR      r0,[r0,#0xc]
0003ae  9001              STR      r0,[sp,#4]
0003b0  9801              LDR      r0,[sp,#4]
0003b2  f0200002          BIC      r0,r0,#2
0003b6  1c80              ADDS     r0,r0,#2
0003b8  9001              STR      r0,[sp,#4]
0003ba  f1050090          ADD      r0,r5,#0x90
0003be  f8500024          LDR      r0,[r0,r4,LSL #2]
0003c2  9901              LDR      r1,[sp,#4]
0003c4  60c1              STR      r1,[r0,#0xc]
;;;706          USB_OTG_HC_Halt(pdev, num);
0003c6  b2e1              UXTB     r1,r4
0003c8  4628              MOV      r0,r5
0003ca  f7fffffe          BL       USB_OTG_HC_Halt
;;;707          CLEAR_HC_INT(hcreg , nak);   
0003ce  2000              MOVS     r0,#0
0003d0  9001              STR      r0,[sp,#4]
0003d2  9801              LDR      r0,[sp,#4]
0003d4  f0200010          BIC      r0,r0,#0x10
0003d8  3010              ADDS     r0,r0,#0x10
0003da  9001              STR      r0,[sp,#4]
0003dc  9801              LDR      r0,[sp,#4]
0003de  60b0              STR      r0,[r6,#8]
0003e0  e018              B        |L5.1044|
                  |L5.994|
;;;708        }
;;;709         else if  ((hcchar.b.eptype == EP_TYPE_CTRL)||
0003e2  9803              LDR      r0,[sp,#0xc]
0003e4  f3c04081          UBFX     r0,r0,#18,#2
0003e8  b120              CBZ      r0,|L5.1012|
;;;710                 (hcchar.b.eptype == EP_TYPE_BULK))
0003ea  9803              LDR      r0,[sp,#0xc]
0003ec  f3c04081          UBFX     r0,r0,#18,#2
0003f0  2802              CMP      r0,#2
0003f2  d10f              BNE      |L5.1044|
                  |L5.1012|
;;;711        {
;;;712          /* re-activate the channel  */
;;;713          hcchar.b.chen = 1;
0003f4  9803              LDR      r0,[sp,#0xc]
0003f6  f0204000          BIC      r0,r0,#0x80000000
0003fa  f1004000          ADD      r0,r0,#0x80000000
0003fe  9003              STR      r0,[sp,#0xc]
;;;714          hcchar.b.chdis = 0;
000400  9803              LDR      r0,[sp,#0xc]
000402  f0204080          BIC      r0,r0,#0x40000000
000406  9003              STR      r0,[sp,#0xc]
;;;715          USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[num]->HCCHAR, hcchar.d32); 
000408  f1050090          ADD      r0,r5,#0x90
00040c  f8500024          LDR      r0,[r0,r4,LSL #2]
000410  9903              LDR      r1,[sp,#0xc]
000412  6001              STR      r1,[r0,#0]
                  |L5.1044|
;;;716        }
;;;717        pdev->host.HC_Status[num] = HC_NAK;
000414  2103              MOVS     r1,#3
000416  e000              B        |L5.1050|
                  |L5.1048|
000418  e002              B        |L5.1056|
                  |L5.1050|
00041a  f5057023          ADD      r0,r5,#0x28c
00041e  5501              STRB     r1,[r0,r4]
                  |L5.1056|
;;;718      }
;;;719    
;;;720      
;;;721      return 1;
000420  2001              MOVS     r0,#1
;;;722      
;;;723    }
000422  b006              ADD      sp,sp,#0x18
000424  bd70              POP      {r4-r6,pc}
;;;724    
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_hc_n_Out_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_hc_n_Out_ISR PROC
;;;449      */
;;;450    uint32_t USB_OTG_USBH_handle_hc_n_Out_ISR (USB_OTG_CORE_HANDLE *pdev , uint32_t num)
000000  b57f              PUSH     {r0-r6,lr}
;;;451    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;452      
;;;453      USB_OTG_HCINTn_TypeDef     hcint;
;;;454      USB_OTG_HCGINTMSK_TypeDef  hcintmsk;
;;;455      USB_OTG_HC_REGS *hcreg;
;;;456      USB_OTG_HCCHAR_TypeDef     hcchar; 
;;;457      
;;;458      hcreg = pdev->regs.HC_REGS[num];
000006  f1050090          ADD      r0,r5,#0x90
00000a  f8506024          LDR      r6,[r0,r4,LSL #2]
;;;459      hcint.d32 = USB_OTG_READ_REG32(&hcreg->HCINT);
00000e  68b0              LDR      r0,[r6,#8]
000010  9003              STR      r0,[sp,#0xc]
;;;460      hcintmsk.d32 = USB_OTG_READ_REG32(&hcreg->HCGINTMSK);
000012  68f0              LDR      r0,[r6,#0xc]
000014  9002              STR      r0,[sp,#8]
;;;461      hcint.d32 = hcint.d32 & hcintmsk.d32;
000016  e9dd1002          LDRD     r1,r0,[sp,#8]
00001a  4008              ANDS     r0,r0,r1
00001c  9003              STR      r0,[sp,#0xc]
;;;462      
;;;463      hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[num]->HCCHAR);
00001e  f1050090          ADD      r0,r5,#0x90
000022  f8500024          LDR      r0,[r0,r4,LSL #2]
000026  6800              LDR      r0,[r0,#0]
000028  9001              STR      r0,[sp,#4]
;;;464      
;;;465      if (hcint.b.ahberr)
00002a  9803              LDR      r0,[sp,#0xc]
00002c  f3c00080          UBFX     r0,r0,#2,#1
000030  b1d0              CBZ      r0,|L6.104|
;;;466      {
;;;467        CLEAR_HC_INT(hcreg ,ahberr);
000032  2000              MOVS     r0,#0
000034  9000              STR      r0,[sp,#0]
000036  9800              LDR      r0,[sp,#0]
000038  f0200004          BIC      r0,r0,#4
00003c  1d00              ADDS     r0,r0,#4
00003e  9000              STR      r0,[sp,#0]
000040  9800              LDR      r0,[sp,#0]
000042  60b0              STR      r0,[r6,#8]
;;;468        UNMASK_HOST_INT_CHH (num);
000044  f1050090          ADD      r0,r5,#0x90
000048  f8500024          LDR      r0,[r0,r4,LSL #2]
00004c  68c0              LDR      r0,[r0,#0xc]
00004e  9000              STR      r0,[sp,#0]
000050  9800              LDR      r0,[sp,#0]
000052  f0200002          BIC      r0,r0,#2
000056  1c80              ADDS     r0,r0,#2
000058  9000              STR      r0,[sp,#0]
00005a  f1050090          ADD      r0,r5,#0x90
00005e  f8500024          LDR      r0,[r0,r4,LSL #2]
000062  9900              LDR      r1,[sp,#0]
000064  60c1              STR      r1,[r0,#0xc]
000066  e18c              B        |L6.898|
                  |L6.104|
;;;469      } 
;;;470      else if (hcint.b.ack)
000068  9803              LDR      r0,[sp,#0xc]
00006a  f3c01040          UBFX     r0,r0,#5,#1
00006e  b148              CBZ      r0,|L6.132|
;;;471      {
;;;472        CLEAR_HC_INT(hcreg , ack);
000070  2000              MOVS     r0,#0
000072  9000              STR      r0,[sp,#0]
000074  9800              LDR      r0,[sp,#0]
000076  f0200020          BIC      r0,r0,#0x20
00007a  3020              ADDS     r0,r0,#0x20
00007c  9000              STR      r0,[sp,#0]
00007e  9800              LDR      r0,[sp,#0]
000080  60b0              STR      r0,[r6,#8]
000082  e17e              B        |L6.898|
                  |L6.132|
;;;473      }
;;;474      
;;;475      else if (hcint.b.xfercompl)
000084  9803              LDR      r0,[sp,#0xc]
000086  f0100f01          TST      r0,#1
00008a  d027              BEQ      |L6.220|
;;;476      {
;;;477        pdev->host.ErrCnt[num] = 0;
00008c  2100              MOVS     r1,#0
00008e  f5057005          ADD      r0,r5,#0x214
000092  f8401024          STR      r1,[r0,r4,LSL #2]
;;;478        UNMASK_HOST_INT_CHH (num);
000096  f1050090          ADD      r0,r5,#0x90
00009a  f8500024          LDR      r0,[r0,r4,LSL #2]
00009e  68c0              LDR      r0,[r0,#0xc]
0000a0  9000              STR      r0,[sp,#0]
0000a2  9800              LDR      r0,[sp,#0]
0000a4  f0200002          BIC      r0,r0,#2
0000a8  1c80              ADDS     r0,r0,#2
0000aa  9000              STR      r0,[sp,#0]
0000ac  f1050090          ADD      r0,r5,#0x90
0000b0  f8500024          LDR      r0,[r0,r4,LSL #2]
0000b4  9900              LDR      r1,[sp,#0]
0000b6  60c1              STR      r1,[r0,#0xc]
;;;479        USB_OTG_HC_Halt(pdev, num);
0000b8  b2e1              UXTB     r1,r4
0000ba  4628              MOV      r0,r5
0000bc  f7fffffe          BL       USB_OTG_HC_Halt
;;;480        CLEAR_HC_INT(hcreg , xfercompl);
0000c0  2000              MOVS     r0,#0
0000c2  9000              STR      r0,[sp,#0]
0000c4  9800              LDR      r0,[sp,#0]
0000c6  f0200001          BIC      r0,r0,#1
0000ca  1c40              ADDS     r0,r0,#1
0000cc  9000              STR      r0,[sp,#0]
0000ce  9800              LDR      r0,[sp,#0]
0000d0  60b0              STR      r0,[r6,#8]
;;;481        pdev->host.HC_Status[num] = HC_XFRC;            
0000d2  2101              MOVS     r1,#1
0000d4  f5057023          ADD      r0,r5,#0x28c
0000d8  5501              STRB     r1,[r0,r4]
0000da  e152              B        |L6.898|
                  |L6.220|
;;;482      }
;;;483      
;;;484      else if (hcint.b.stall)
0000dc  9803              LDR      r0,[sp,#0xc]
0000de  f3c000c0          UBFX     r0,r0,#3,#1
0000e2  b310              CBZ      r0,|L6.298|
;;;485      {
;;;486        CLEAR_HC_INT(hcreg , stall);
0000e4  2000              MOVS     r0,#0
0000e6  9000              STR      r0,[sp,#0]
0000e8  9800              LDR      r0,[sp,#0]
0000ea  f0200008          BIC      r0,r0,#8
0000ee  3008              ADDS     r0,r0,#8
0000f0  9000              STR      r0,[sp,#0]
0000f2  9800              LDR      r0,[sp,#0]
0000f4  60b0              STR      r0,[r6,#8]
;;;487        UNMASK_HOST_INT_CHH (num);
0000f6  f1050090          ADD      r0,r5,#0x90
0000fa  f8500024          LDR      r0,[r0,r4,LSL #2]
0000fe  68c0              LDR      r0,[r0,#0xc]
000100  9000              STR      r0,[sp,#0]
000102  9800              LDR      r0,[sp,#0]
000104  f0200002          BIC      r0,r0,#2
000108  1c80              ADDS     r0,r0,#2
00010a  9000              STR      r0,[sp,#0]
00010c  f1050090          ADD      r0,r5,#0x90
000110  f8500024          LDR      r0,[r0,r4,LSL #2]
000114  9900              LDR      r1,[sp,#0]
000116  60c1              STR      r1,[r0,#0xc]
;;;488        USB_OTG_HC_Halt(pdev, num);
000118  b2e1              UXTB     r1,r4
00011a  4628              MOV      r0,r5
00011c  f7fffffe          BL       USB_OTG_HC_Halt
;;;489        pdev->host.HC_Status[num] = HC_STALL;      
000120  2105              MOVS     r1,#5
000122  f5057023          ADD      r0,r5,#0x28c
000126  5501              STRB     r1,[r0,r4]
000128  e12b              B        |L6.898|
                  |L6.298|
;;;490      }
;;;491      
;;;492      else if (hcint.b.nak)
00012a  9803              LDR      r0,[sp,#0xc]
00012c  f3c01000          UBFX     r0,r0,#4,#1
000130  b338              CBZ      r0,|L6.386|
;;;493      {
;;;494        pdev->host.ErrCnt[num] = 0;
000132  2100              MOVS     r1,#0
000134  f5057005          ADD      r0,r5,#0x214
000138  f8401024          STR      r1,[r0,r4,LSL #2]
;;;495        UNMASK_HOST_INT_CHH (num);
00013c  f1050090          ADD      r0,r5,#0x90
000140  f8500024          LDR      r0,[r0,r4,LSL #2]
000144  68c0              LDR      r0,[r0,#0xc]
000146  9000              STR      r0,[sp,#0]
000148  9800              LDR      r0,[sp,#0]
00014a  f0200002          BIC      r0,r0,#2
00014e  1c80              ADDS     r0,r0,#2
000150  9000              STR      r0,[sp,#0]
000152  f1050090          ADD      r0,r5,#0x90
000156  f8500024          LDR      r0,[r0,r4,LSL #2]
00015a  9900              LDR      r1,[sp,#0]
00015c  60c1              STR      r1,[r0,#0xc]
;;;496        USB_OTG_HC_Halt(pdev, num);
00015e  b2e1              UXTB     r1,r4
000160  4628              MOV      r0,r5
000162  f7fffffe          BL       USB_OTG_HC_Halt
;;;497        CLEAR_HC_INT(hcreg , nak);
000166  2000              MOVS     r0,#0
000168  9000              STR      r0,[sp,#0]
00016a  9800              LDR      r0,[sp,#0]
00016c  f0200010          BIC      r0,r0,#0x10
000170  3010              ADDS     r0,r0,#0x10
000172  9000              STR      r0,[sp,#0]
000174  9800              LDR      r0,[sp,#0]
000176  60b0              STR      r0,[r6,#8]
;;;498        pdev->host.HC_Status[num] = HC_NAK;      
000178  2103              MOVS     r1,#3
00017a  f5057023          ADD      r0,r5,#0x28c
00017e  5501              STRB     r1,[r0,r4]
000180  e0ff              B        |L6.898|
                  |L6.386|
;;;499      }
;;;500      
;;;501      else if (hcint.b.xacterr)
000182  9803              LDR      r0,[sp,#0xc]
000184  f3c010c0          UBFX     r0,r0,#7,#1
000188  b340              CBZ      r0,|L6.476|
;;;502      {
;;;503        UNMASK_HOST_INT_CHH (num);
00018a  f1050090          ADD      r0,r5,#0x90
00018e  f8500024          LDR      r0,[r0,r4,LSL #2]
000192  68c0              LDR      r0,[r0,#0xc]
000194  9000              STR      r0,[sp,#0]
000196  9800              LDR      r0,[sp,#0]
000198  f0200002          BIC      r0,r0,#2
00019c  1c80              ADDS     r0,r0,#2
00019e  9000              STR      r0,[sp,#0]
0001a0  f1050090          ADD      r0,r5,#0x90
0001a4  f8500024          LDR      r0,[r0,r4,LSL #2]
0001a8  9900              LDR      r1,[sp,#0]
0001aa  60c1              STR      r1,[r0,#0xc]
;;;504        USB_OTG_HC_Halt(pdev, num);
0001ac  b2e1              UXTB     r1,r4
0001ae  4628              MOV      r0,r5
0001b0  f7fffffe          BL       USB_OTG_HC_Halt
;;;505        pdev->host.ErrCnt[num] ++;
0001b4  f5057005          ADD      r0,r5,#0x214
0001b8  f8501024          LDR      r1,[r0,r4,LSL #2]
0001bc  1c49              ADDS     r1,r1,#1
0001be  f8401024          STR      r1,[r0,r4,LSL #2]
;;;506        pdev->host.HC_Status[num] = HC_XACTERR;
0001c2  2106              MOVS     r1,#6
0001c4  3078              ADDS     r0,r0,#0x78
0001c6  5501              STRB     r1,[r0,r4]
;;;507        CLEAR_HC_INT(hcreg , xacterr);
0001c8  2000              MOVS     r0,#0
0001ca  9000              STR      r0,[sp,#0]
0001cc  9800              LDR      r0,[sp,#0]
0001ce  f0200080          BIC      r0,r0,#0x80
0001d2  3080              ADDS     r0,r0,#0x80
0001d4  9000              STR      r0,[sp,#0]
0001d6  9800              LDR      r0,[sp,#0]
0001d8  60b0              STR      r0,[r6,#8]
0001da  e0d2              B        |L6.898|
                  |L6.476|
;;;508      }
;;;509      else if (hcint.b.nyet)
0001dc  9803              LDR      r0,[sp,#0xc]
0001de  f3c01080          UBFX     r0,r0,#6,#1
0001e2  b338              CBZ      r0,|L6.564|
;;;510      {
;;;511        pdev->host.ErrCnt[num] = 0;
0001e4  2100              MOVS     r1,#0
0001e6  f5057005          ADD      r0,r5,#0x214
0001ea  f8401024          STR      r1,[r0,r4,LSL #2]
;;;512        UNMASK_HOST_INT_CHH (num);
0001ee  f1050090          ADD      r0,r5,#0x90
0001f2  f8500024          LDR      r0,[r0,r4,LSL #2]
0001f6  68c0              LDR      r0,[r0,#0xc]
0001f8  9000              STR      r0,[sp,#0]
0001fa  9800              LDR      r0,[sp,#0]
0001fc  f0200002          BIC      r0,r0,#2
000200  1c80              ADDS     r0,r0,#2
000202  9000              STR      r0,[sp,#0]
000204  f1050090          ADD      r0,r5,#0x90
000208  f8500024          LDR      r0,[r0,r4,LSL #2]
00020c  9900              LDR      r1,[sp,#0]
00020e  60c1              STR      r1,[r0,#0xc]
;;;513        USB_OTG_HC_Halt(pdev, num);
000210  b2e1              UXTB     r1,r4
000212  4628              MOV      r0,r5
000214  f7fffffe          BL       USB_OTG_HC_Halt
;;;514        CLEAR_HC_INT(hcreg , nyet);
000218  2000              MOVS     r0,#0
00021a  9000              STR      r0,[sp,#0]
00021c  9800              LDR      r0,[sp,#0]
00021e  f0200040          BIC      r0,r0,#0x40
000222  3040              ADDS     r0,r0,#0x40
000224  9000              STR      r0,[sp,#0]
000226  9800              LDR      r0,[sp,#0]
000228  60b0              STR      r0,[r6,#8]
;;;515        pdev->host.HC_Status[num] = HC_NYET;    
00022a  2104              MOVS     r1,#4
00022c  f5057023          ADD      r0,r5,#0x28c
000230  5501              STRB     r1,[r0,r4]
000232  e0a6              B        |L6.898|
                  |L6.564|
;;;516      }
;;;517      else if (hcint.b.datatglerr)
000234  9803              LDR      r0,[sp,#0xc]
000236  f3c02080          UBFX     r0,r0,#10,#1
00023a  b360              CBZ      r0,|L6.662|
;;;518      {
;;;519       
;;;520        UNMASK_HOST_INT_CHH (num);
00023c  f1050090          ADD      r0,r5,#0x90
000240  f8500024          LDR      r0,[r0,r4,LSL #2]
000244  68c0              LDR      r0,[r0,#0xc]
000246  9000              STR      r0,[sp,#0]
000248  9800              LDR      r0,[sp,#0]
00024a  f0200002          BIC      r0,r0,#2
00024e  1c80              ADDS     r0,r0,#2
000250  9000              STR      r0,[sp,#0]
000252  f1050090          ADD      r0,r5,#0x90
000256  f8500024          LDR      r0,[r0,r4,LSL #2]
00025a  9900              LDR      r1,[sp,#0]
00025c  60c1              STR      r1,[r0,#0xc]
;;;521        USB_OTG_HC_Halt(pdev, num);
00025e  b2e1              UXTB     r1,r4
000260  4628              MOV      r0,r5
000262  f7fffffe          BL       USB_OTG_HC_Halt
;;;522        CLEAR_HC_INT(hcreg , nak);   
000266  2000              MOVS     r0,#0
000268  9000              STR      r0,[sp,#0]
00026a  9800              LDR      r0,[sp,#0]
00026c  f0200010          BIC      r0,r0,#0x10
000270  3010              ADDS     r0,r0,#0x10
000272  9000              STR      r0,[sp,#0]
000274  9800              LDR      r0,[sp,#0]
000276  60b0              STR      r0,[r6,#8]
;;;523        pdev->host.HC_Status[num] = HC_DATATGLERR;
000278  2108              MOVS     r1,#8
00027a  f5057023          ADD      r0,r5,#0x28c
00027e  5501              STRB     r1,[r0,r4]
;;;524        
;;;525        CLEAR_HC_INT(hcreg , datatglerr);
000280  2000              MOVS     r0,#0
000282  9000              STR      r0,[sp,#0]
000284  9800              LDR      r0,[sp,#0]
000286  f4206080          BIC      r0,r0,#0x400
00028a  f5006080          ADD      r0,r0,#0x400
00028e  9000              STR      r0,[sp,#0]
000290  9800              LDR      r0,[sp,#0]
000292  60b0              STR      r0,[r6,#8]
000294  e075              B        |L6.898|
                  |L6.662|
;;;526      }  
;;;527      else if (hcint.b.chhltd)
000296  9803              LDR      r0,[sp,#0xc]
000298  f3c00040          UBFX     r0,r0,#1,#1
00029c  2800              CMP      r0,#0
00029e  d070              BEQ      |L6.898|
;;;528      {
;;;529        MASK_HOST_INT_CHH (num);
0002a0  f1050090          ADD      r0,r5,#0x90
0002a4  f8500024          LDR      r0,[r0,r4,LSL #2]
0002a8  68c0              LDR      r0,[r0,#0xc]
0002aa  9000              STR      r0,[sp,#0]
0002ac  9800              LDR      r0,[sp,#0]
0002ae  f0200002          BIC      r0,r0,#2
0002b2  9000              STR      r0,[sp,#0]
0002b4  f1050090          ADD      r0,r5,#0x90
0002b8  f8500024          LDR      r0,[r0,r4,LSL #2]
0002bc  9900              LDR      r1,[sp,#0]
0002be  60c1              STR      r1,[r0,#0xc]
;;;530        
;;;531        if(pdev->host.HC_Status[num] == HC_XFRC)
0002c0  f5057023          ADD      r0,r5,#0x28c
0002c4  5d00              LDRB     r0,[r0,r4]
0002c6  2801              CMP      r0,#1
0002c8  d115              BNE      |L6.758|
;;;532        {
;;;533          pdev->host.URB_State[num] = URB_DONE;  
0002ca  2101              MOVS     r1,#1
0002cc  f205209b          ADD      r0,r5,#0x29b
0002d0  5501              STRB     r1,[r0,r4]
;;;534          
;;;535          if (hcchar.b.eptype == EP_TYPE_BULK)
0002d2  9801              LDR      r0,[sp,#4]
0002d4  f3c04081          UBFX     r0,r0,#18,#2
0002d8  2802              CMP      r0,#2
0002da  d148              BNE      |L6.878|
;;;536          {
;;;537            pdev->host.hc[num].toggle_out ^= 1; 
0002dc  f505702b          ADD      r0,r5,#0x2ac
0002e0  eb001044          ADD      r0,r0,r4,LSL #5
0002e4  7e40              LDRB     r0,[r0,#0x19]
0002e6  f0800101          EOR      r1,r0,#1
0002ea  f505702b          ADD      r0,r5,#0x2ac
0002ee  eb001044          ADD      r0,r0,r4,LSL #5
0002f2  7641              STRB     r1,[r0,#0x19]
0002f4  e03b              B        |L6.878|
                  |L6.758|
;;;538          }
;;;539        }
;;;540        else if(pdev->host.HC_Status[num] == HC_NAK)
0002f6  f5057023          ADD      r0,r5,#0x28c
0002fa  5d00              LDRB     r0,[r0,r4]
0002fc  2803              CMP      r0,#3
0002fe  d104              BNE      |L6.778|
;;;541        {
;;;542          pdev->host.URB_State[num] = URB_NOTREADY;      
000300  2102              MOVS     r1,#2
000302  f205209b          ADD      r0,r5,#0x29b
000306  5501              STRB     r1,[r0,r4]
000308  e031              B        |L6.878|
                  |L6.778|
;;;543        }    
;;;544        else if(pdev->host.HC_Status[num] == HC_NYET)
00030a  f5057023          ADD      r0,r5,#0x28c
00030e  5d00              LDRB     r0,[r0,r4]
000310  2804              CMP      r0,#4
000312  d10f              BNE      |L6.820|
;;;545        {
;;;546          if(pdev->host.hc[num].do_ping == 1)
000314  f505702b          ADD      r0,r5,#0x2ac
000318  eb001044          ADD      r0,r0,r4,LSL #5
00031c  7900              LDRB     r0,[r0,#4]
00031e  2801              CMP      r0,#1
000320  d103              BNE      |L6.810|
;;;547          {
;;;548            USB_OTG_HC_DoPing(pdev, num);
000322  b2e1              UXTB     r1,r4
000324  4628              MOV      r0,r5
000326  f7fffffe          BL       USB_OTG_HC_DoPing
                  |L6.810|
;;;549          }
;;;550          pdev->host.URB_State[num] = URB_NOTREADY;      
00032a  2102              MOVS     r1,#2
00032c  f205209b          ADD      r0,r5,#0x29b
000330  5501              STRB     r1,[r0,r4]
000332  e01c              B        |L6.878|
                  |L6.820|
;;;551        }      
;;;552        else if(pdev->host.HC_Status[num] == HC_STALL)
000334  f5057023          ADD      r0,r5,#0x28c
000338  5d00              LDRB     r0,[r0,r4]
00033a  2805              CMP      r0,#5
00033c  d104              BNE      |L6.840|
;;;553        {
;;;554          pdev->host.URB_State[num] = URB_STALL;      
00033e  2104              MOVS     r1,#4
000340  f205209b          ADD      r0,r5,#0x29b
000344  5501              STRB     r1,[r0,r4]
000346  e012              B        |L6.878|
                  |L6.840|
;;;555        }  
;;;556        else if(pdev->host.HC_Status[num] == HC_XACTERR)
000348  f5057023          ADD      r0,r5,#0x28c
00034c  5d00              LDRB     r0,[r0,r4]
00034e  2806              CMP      r0,#6
000350  d10d              BNE      |L6.878|
;;;557        {
;;;558          if (pdev->host.ErrCnt[num] == 3)
000352  f5057005          ADD      r0,r5,#0x214
000356  f8500024          LDR      r0,[r0,r4,LSL #2]
00035a  2803              CMP      r0,#3
00035c  d107              BNE      |L6.878|
;;;559          {
;;;560            pdev->host.URB_State[num] = URB_ERROR;  
00035e  2103              MOVS     r1,#3
000360  f205209b          ADD      r0,r5,#0x29b
000364  5501              STRB     r1,[r0,r4]
;;;561            pdev->host.ErrCnt[num] = 0;
000366  2100              MOVS     r1,#0
000368  3887              SUBS     r0,r0,#0x87
00036a  f8401024          STR      r1,[r0,r4,LSL #2]
                  |L6.878|
;;;562          }
;;;563        }
;;;564        CLEAR_HC_INT(hcreg , chhltd);    
00036e  2000              MOVS     r0,#0
000370  9000              STR      r0,[sp,#0]
000372  9800              LDR      r0,[sp,#0]
000374  f0200002          BIC      r0,r0,#2
000378  1c80              ADDS     r0,r0,#2
00037a  9000              STR      r0,[sp,#0]
00037c  9800              LDR      r0,[sp,#0]
00037e  60b0              STR      r0,[r6,#8]
000380  bf00              NOP      
                  |L6.898|
;;;565      }
;;;566      
;;;567    
;;;568      return 1;
000382  2001              MOVS     r0,#1
;;;569    }
000384  b004              ADD      sp,sp,#0x10
000386  bd70              POP      {r4-r6,pc}
;;;570    
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_nptxfempty_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_nptxfempty_ISR PROC
;;;260      */
;;;261    static uint32_t USB_OTG_USBH_handle_nptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
000000  b57c              PUSH     {r2-r6,lr}
;;;262    {
000002  4604              MOV      r4,r0
;;;263      USB_OTG_GINTMSK_TypeDef      intmsk;
;;;264      USB_OTG_HNPTXSTS_TypeDef     hnptxsts; 
;;;265      uint16_t                     len_words , len; 
;;;266      
;;;267      hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
000004  68e0              LDR      r0,[r4,#0xc]
000006  6ac0              LDR      r0,[r0,#0x2c]
000008  9000              STR      r0,[sp,#0]
;;;268      
;;;269      len_words = (pdev->host.hc[hnptxsts.b.chnum].xfer_len + 3) / 4;
00000a  9800              LDR      r0,[sp,#0]
00000c  f3c07141          UBFX     r1,r0,#29,#2
000010  f504702b          ADD      r0,r4,#0x2ac
000014  eb001041          ADD      r0,r0,r1,LSL #5
000018  6900              LDR      r0,[r0,#0x10]
00001a  1cc0              ADDS     r0,r0,#3
00001c  f3c0068f          UBFX     r6,r0,#2,#16
;;;270      
;;;271      while ((hnptxsts.b.nptxfspcavail > len_words)&&
000020  e073              B        |L7.266|
                  |L7.34|
;;;272          (pdev->host.hc[hnptxsts.b.chnum].xfer_len != 0))
;;;273      {
;;;274        
;;;275        len = hnptxsts.b.nptxfspcavail * 4;
000022  f64f71ff          MOV      r1,#0xffff
000026  9800              LDR      r0,[sp,#0]
000028  ea010580          AND      r5,r1,r0,LSL #2
;;;276        
;;;277        if (len > pdev->host.hc[hnptxsts.b.chnum].xfer_len)
00002c  9800              LDR      r0,[sp,#0]
00002e  f3c07141          UBFX     r1,r0,#29,#2
000032  f504702b          ADD      r0,r4,#0x2ac
000036  eb001041          ADD      r0,r0,r1,LSL #5
00003a  6900              LDR      r0,[r0,#0x10]
00003c  42a8              CMP      r0,r5
00003e  d215              BCS      |L7.108|
;;;278        {
;;;279          /* Last packet */
;;;280          len = pdev->host.hc[hnptxsts.b.chnum].xfer_len;
000040  9800              LDR      r0,[sp,#0]
000042  f3c07141          UBFX     r1,r0,#29,#2
000046  f504702b          ADD      r0,r4,#0x2ac
00004a  eb001041          ADD      r0,r0,r1,LSL #5
00004e  8a00              LDRH     r0,[r0,#0x10]
000050  b285              UXTH     r5,r0
;;;281          
;;;282          intmsk.d32 = 0;
000052  2000              MOVS     r0,#0
000054  9001              STR      r0,[sp,#4]
;;;283          intmsk.b.nptxfempty = 1;
000056  9801              LDR      r0,[sp,#4]
000058  f0200020          BIC      r0,r0,#0x20
00005c  3020              ADDS     r0,r0,#0x20
00005e  9001              STR      r0,[sp,#4]
;;;284          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);       
000060  68e0              LDR      r0,[r4,#0xc]
000062  6980              LDR      r0,[r0,#0x18]
000064  9901              LDR      r1,[sp,#4]
000066  4388              BICS     r0,r0,r1
000068  68e1              LDR      r1,[r4,#0xc]
00006a  6188              STR      r0,[r1,#0x18]
                  |L7.108|
;;;285        }
;;;286        
;;;287        len_words = (pdev->host.hc[hnptxsts.b.chnum].xfer_len + 3) / 4;
00006c  9800              LDR      r0,[sp,#0]
00006e  f3c07141          UBFX     r1,r0,#29,#2
000072  f504702b          ADD      r0,r4,#0x2ac
000076  eb001041          ADD      r0,r0,r1,LSL #5
00007a  6900              LDR      r0,[r0,#0x10]
00007c  1cc0              ADDS     r0,r0,#3
00007e  f3c0068f          UBFX     r6,r0,#2,#16
;;;288        
;;;289        USB_OTG_WritePacket (pdev , pdev->host.hc[hnptxsts.b.chnum].xfer_buff, hnptxsts.b.chnum, len);
000082  9800              LDR      r0,[sp,#0]
000084  f3c07241          UBFX     r2,r0,#29,#2
000088  f3c07341          UBFX     r3,r0,#29,#2
00008c  f504702b          ADD      r0,r4,#0x2ac
000090  eb001043          ADD      r0,r0,r3,LSL #5
000094  462b              MOV      r3,r5
000096  68c1              LDR      r1,[r0,#0xc]
000098  4620              MOV      r0,r4
00009a  f7fffffe          BL       USB_OTG_WritePacket
;;;290        
;;;291        pdev->host.hc[hnptxsts.b.chnum].xfer_buff  += len;
00009e  9800              LDR      r0,[sp,#0]
0000a0  f3c07141          UBFX     r1,r0,#29,#2
0000a4  f504702b          ADD      r0,r4,#0x2ac
0000a8  eb001041          ADD      r0,r0,r1,LSL #5
0000ac  68c0              LDR      r0,[r0,#0xc]
0000ae  1941              ADDS     r1,r0,r5
0000b0  9800              LDR      r0,[sp,#0]
0000b2  f3c07241          UBFX     r2,r0,#29,#2
0000b6  f504702b          ADD      r0,r4,#0x2ac
0000ba  eb001042          ADD      r0,r0,r2,LSL #5
0000be  60c1              STR      r1,[r0,#0xc]
;;;292        pdev->host.hc[hnptxsts.b.chnum].xfer_len   -= len;
0000c0  9800              LDR      r0,[sp,#0]
0000c2  f3c07141          UBFX     r1,r0,#29,#2
0000c6  f504702b          ADD      r0,r4,#0x2ac
0000ca  eb001041          ADD      r0,r0,r1,LSL #5
0000ce  6900              LDR      r0,[r0,#0x10]
0000d0  1b41              SUBS     r1,r0,r5
0000d2  9800              LDR      r0,[sp,#0]
0000d4  f3c07241          UBFX     r2,r0,#29,#2
0000d8  f504702b          ADD      r0,r4,#0x2ac
0000dc  eb001042          ADD      r0,r0,r2,LSL #5
0000e0  6101              STR      r1,[r0,#0x10]
;;;293        pdev->host.hc[hnptxsts.b.chnum].xfer_count  += len; 
0000e2  9800              LDR      r0,[sp,#0]
0000e4  f3c07141          UBFX     r1,r0,#29,#2
0000e8  f504702b          ADD      r0,r4,#0x2ac
0000ec  eb001041          ADD      r0,r0,r1,LSL #5
0000f0  6940              LDR      r0,[r0,#0x14]
0000f2  1941              ADDS     r1,r0,r5
0000f4  9800              LDR      r0,[sp,#0]
0000f6  f3c07241          UBFX     r2,r0,#29,#2
0000fa  f504702b          ADD      r0,r4,#0x2ac
0000fe  eb001042          ADD      r0,r0,r2,LSL #5
000102  6141              STR      r1,[r0,#0x14]
;;;294            
;;;295        hnptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->HNPTXSTS);
000104  68e0              LDR      r0,[r4,#0xc]
000106  6ac0              LDR      r0,[r0,#0x2c]
000108  9000              STR      r0,[sp,#0]
                  |L7.266|
00010a  9800              LDR      r0,[sp,#0]            ;271
00010c  b280              UXTH     r0,r0                 ;271
00010e  42b0              CMP      r0,r6                 ;271
000110  dd0a              BLE      |L7.296|
000112  9800              LDR      r0,[sp,#0]            ;272
000114  f3c07141          UBFX     r1,r0,#29,#2          ;272
000118  f504702b          ADD      r0,r4,#0x2ac          ;272
00011c  eb001041          ADD      r0,r0,r1,LSL #5       ;272
000120  6900              LDR      r0,[r0,#0x10]         ;272
000122  2800              CMP      r0,#0                 ;272
000124  f47faf7d          BNE      |L7.34|
                  |L7.296|
;;;296      }  
;;;297    
;;;298      return 1;
000128  2001              MOVS     r0,#1
;;;299    }
00012a  bd7c              POP      {r2-r6,pc}
;;;300    
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_port_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_port_ISR PROC
;;;351      */
;;;352    static uint32_t USB_OTG_USBH_handle_port_ISR (USB_OTG_CORE_HANDLE *pdev)
000000  b5fe              PUSH     {r1-r7,lr}
;;;353    {
000002  4604              MOV      r4,r0
;;;354      USB_OTG_HPRT0_TypeDef  hprt0;
;;;355      USB_OTG_HPRT0_TypeDef  hprt0_dup;
;;;356      USB_OTG_HCFG_TypeDef   hcfg;    
;;;357      uint32_t do_reset = 0;
000004  2600              MOVS     r6,#0
;;;358      uint32_t retval = 0;
000006  2500              MOVS     r5,#0
;;;359      
;;;360      hcfg.d32 = 0;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;361      hprt0.d32 = 0;
00000c  9002              STR      r0,[sp,#8]
;;;362      hprt0_dup.d32 = 0;
00000e  9001              STR      r0,[sp,#4]
;;;363      
;;;364      hprt0.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
000010  f8d400cc          LDR      r0,[r4,#0xcc]
000014  6800              LDR      r0,[r0,#0]
000016  9002              STR      r0,[sp,#8]
;;;365      hprt0_dup.d32 = USB_OTG_READ_REG32(pdev->regs.HPRT0);
000018  f8d400cc          LDR      r0,[r4,#0xcc]
00001c  6800              LDR      r0,[r0,#0]
00001e  9001              STR      r0,[sp,#4]
;;;366      
;;;367      /* Clear the interrupt bits in GINTSTS */
;;;368      
;;;369      hprt0_dup.b.prtena = 0;
000020  9801              LDR      r0,[sp,#4]
000022  f0200004          BIC      r0,r0,#4
000026  9001              STR      r0,[sp,#4]
;;;370      hprt0_dup.b.prtconndet = 0;
000028  9801              LDR      r0,[sp,#4]
00002a  f0200002          BIC      r0,r0,#2
00002e  9001              STR      r0,[sp,#4]
;;;371      hprt0_dup.b.prtenchng = 0;
000030  9801              LDR      r0,[sp,#4]
000032  f0200008          BIC      r0,r0,#8
000036  9001              STR      r0,[sp,#4]
;;;372      hprt0_dup.b.prtovrcurrchng = 0;
000038  9801              LDR      r0,[sp,#4]
00003a  f0200020          BIC      r0,r0,#0x20
00003e  9001              STR      r0,[sp,#4]
;;;373      
;;;374      /* Port Connect Detected */
;;;375      if (hprt0.b.prtconndet)
000040  9802              LDR      r0,[sp,#8]
000042  f3c00040          UBFX     r0,r0,#1,#1
000046  b160              CBZ      r0,|L8.98|
;;;376      {
;;;377        pdev->host.port_cb->Connect(pdev);
000048  f8d404ac          LDR      r0,[r4,#0x4ac]
00004c  6841              LDR      r1,[r0,#4]
00004e  4620              MOV      r0,r4
000050  4788              BLX      r1
;;;378        hprt0_dup.b.prtconndet = 1;
000052  9801              LDR      r0,[sp,#4]
000054  f0200002          BIC      r0,r0,#2
000058  1c80              ADDS     r0,r0,#2
00005a  9001              STR      r0,[sp,#4]
;;;379        do_reset = 1;
00005c  2601              MOVS     r6,#1
;;;380        retval |= 1;
00005e  f0450501          ORR      r5,r5,#1
                  |L8.98|
;;;381      }
;;;382      
;;;383      /* Port Enable Changed */
;;;384      if (hprt0.b.prtenchng)
000062  9802              LDR      r0,[sp,#8]
000064  f3c000c0          UBFX     r0,r0,#3,#1
000068  2800              CMP      r0,#0
00006a  d040              BEQ      |L8.238|
;;;385      {
;;;386        hprt0_dup.b.prtenchng = 1;
00006c  9801              LDR      r0,[sp,#4]
00006e  f0200008          BIC      r0,r0,#8
000072  3008              ADDS     r0,r0,#8
000074  9001              STR      r0,[sp,#4]
;;;387        if (hprt0.b.prtena == 1)
000076  9802              LDR      r0,[sp,#8]
000078  f3c00080          UBFX     r0,r0,#2,#1
00007c  2800              CMP      r0,#0
00007e  d036              BEQ      |L8.238|
;;;388        {
;;;389          pdev->host.ConnSts = 1;
000080  2101              MOVS     r1,#1
000082  f8c41210          STR      r1,[r4,#0x210]
;;;390          
;;;391          if ((hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED) ||
000086  9802              LDR      r0,[sp,#8]
000088  f3c04041          UBFX     r0,r0,#17,#2
00008c  2802              CMP      r0,#2
00008e  d004              BEQ      |L8.154|
;;;392              (hprt0.b.prtspd == HPRT0_PRTSPD_FULL_SPEED))
000090  9802              LDR      r0,[sp,#8]
000092  f3c04041          UBFX     r0,r0,#17,#2
000096  2801              CMP      r0,#1
000098  d128              BNE      |L8.236|
                  |L8.154|
;;;393          {
;;;394            
;;;395            hcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HCFG);
00009a  6960              LDR      r0,[r4,#0x14]
00009c  6800              LDR      r0,[r0,#0]
00009e  9000              STR      r0,[sp,#0]
;;;396            
;;;397            if (hprt0.b.prtspd == HPRT0_PRTSPD_LOW_SPEED)
0000a0  9802              LDR      r0,[sp,#8]
0000a2  f3c04041          UBFX     r0,r0,#17,#2
0000a6  2802              CMP      r0,#2
0000a8  d111              BNE      |L8.206|
;;;398            {
;;;399              USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 6000 );
0000aa  f2417170          MOV      r1,#0x1770
0000ae  6960              LDR      r0,[r4,#0x14]
0000b0  6041              STR      r1,[r0,#4]
;;;400              if (hcfg.b.fslspclksel != HCFG_6_MHZ)
0000b2  9800              LDR      r0,[sp,#0]
0000b4  f0000003          AND      r0,r0,#3
0000b8  2802              CMP      r0,#2
0000ba  d018              BEQ      |L8.238|
;;;401              {
;;;402                if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID)
0000bc  7ae0              LDRB     r0,[r4,#0xb]
0000be  2801              CMP      r0,#1
0000c0  d103              BNE      |L8.202|
;;;403                {          
;;;404                  USB_OTG_InitFSLSPClkSel(pdev ,HCFG_6_MHZ );
0000c2  2102              MOVS     r1,#2
0000c4  4620              MOV      r0,r4
0000c6  f7fffffe          BL       USB_OTG_InitFSLSPClkSel
                  |L8.202|
;;;405                }          
;;;406                do_reset = 1;
0000ca  2601              MOVS     r6,#1
0000cc  e00f              B        |L8.238|
                  |L8.206|
;;;407              }
;;;408            }
;;;409            else
;;;410            {
;;;411              
;;;412              USB_OTG_WRITE_REG32(&pdev->regs.HREGS->HFIR, 48000 );            
0000ce  f64b3180          MOV      r1,#0xbb80
0000d2  6960              LDR      r0,[r4,#0x14]
0000d4  6041              STR      r1,[r0,#4]
;;;413              if (hcfg.b.fslspclksel != HCFG_48_MHZ)
0000d6  9800              LDR      r0,[sp,#0]
0000d8  f0000003          AND      r0,r0,#3
0000dc  2801              CMP      r0,#1
0000de  d006              BEQ      |L8.238|
;;;414              {
;;;415                USB_OTG_InitFSLSPClkSel(pdev ,HCFG_48_MHZ );
0000e0  2101              MOVS     r1,#1
0000e2  4620              MOV      r0,r4
0000e4  f7fffffe          BL       USB_OTG_InitFSLSPClkSel
;;;416                do_reset = 1;
0000e8  2601              MOVS     r6,#1
0000ea  e000              B        |L8.238|
                  |L8.236|
;;;417              }
;;;418            }
;;;419          }
;;;420          else
;;;421          {
;;;422            do_reset = 1;
0000ec  2601              MOVS     r6,#1
                  |L8.238|
;;;423          }
;;;424        }
;;;425      }
;;;426      /* Overcurrent Change Interrupt */
;;;427      if (hprt0.b.prtovrcurrchng)
0000ee  9802              LDR      r0,[sp,#8]
0000f0  f3c01040          UBFX     r0,r0,#5,#1
0000f4  b130              CBZ      r0,|L8.260|
;;;428      {
;;;429        hprt0_dup.b.prtovrcurrchng = 1;
0000f6  9801              LDR      r0,[sp,#4]
0000f8  f0200020          BIC      r0,r0,#0x20
0000fc  3020              ADDS     r0,r0,#0x20
0000fe  9001              STR      r0,[sp,#4]
;;;430        retval |= 1;
000100  f0450501          ORR      r5,r5,#1
                  |L8.260|
;;;431      }
;;;432      if (do_reset)
000104  b116              CBZ      r6,|L8.268|
;;;433      {
;;;434        USB_OTG_ResetPort(pdev);
000106  4620              MOV      r0,r4
000108  f7fffffe          BL       USB_OTG_ResetPort
                  |L8.268|
;;;435        
;;;436      }
;;;437      /* Clear Port Interrupts */
;;;438      USB_OTG_WRITE_REG32(pdev->regs.HPRT0, hprt0_dup.d32);
00010c  9901              LDR      r1,[sp,#4]
00010e  f8d400cc          LDR      r0,[r4,#0xcc]
000112  6001              STR      r1,[r0,#0]
;;;439      
;;;440      return retval;
000114  4628              MOV      r0,r5
;;;441    }
000116  bdfe              POP      {r1-r7,pc}
;;;442    
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_ptxfempty_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_ptxfempty_ISR PROC
;;;306      */
;;;307    static uint32_t USB_OTG_USBH_handle_ptxfempty_ISR (USB_OTG_CORE_HANDLE *pdev)
000000  b57c              PUSH     {r2-r6,lr}
;;;308    {
000002  4604              MOV      r4,r0
;;;309      USB_OTG_GINTMSK_TypeDef      intmsk;
;;;310      USB_OTG_HPTXSTS_TypeDef      hptxsts; 
;;;311      uint16_t                     len_words , len; 
;;;312      
;;;313      hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
000004  6960              LDR      r0,[r4,#0x14]
000006  6900              LDR      r0,[r0,#0x10]
000008  9000              STR      r0,[sp,#0]
;;;314      
;;;315      len_words = (pdev->host.hc[hptxsts.b.chnum].xfer_len + 3) / 4;
00000a  9800              LDR      r0,[sp,#0]
00000c  f3c07141          UBFX     r1,r0,#29,#2
000010  f504702b          ADD      r0,r4,#0x2ac
000014  eb001041          ADD      r0,r0,r1,LSL #5
000018  6900              LDR      r0,[r0,#0x10]
00001a  1cc0              ADDS     r0,r0,#3
00001c  f3c0068f          UBFX     r6,r0,#2,#16
;;;316      
;;;317      while ((hptxsts.b.ptxfspcavail > len_words)&&
000020  e074              B        |L9.268|
                  |L9.34|
;;;318          (pdev->host.hc[hptxsts.b.chnum].xfer_len != 0))    
;;;319      {
;;;320        
;;;321        len = hptxsts.b.ptxfspcavail * 4;
000022  f64f71ff          MOV      r1,#0xffff
000026  9800              LDR      r0,[sp,#0]
000028  ea010580          AND      r5,r1,r0,LSL #2
;;;322        
;;;323        if (len > pdev->host.hc[hptxsts.b.chnum].xfer_len)
00002c  9800              LDR      r0,[sp,#0]
00002e  f3c07141          UBFX     r1,r0,#29,#2
000032  f504702b          ADD      r0,r4,#0x2ac
000036  eb001041          ADD      r0,r0,r1,LSL #5
00003a  6900              LDR      r0,[r0,#0x10]
00003c  42a8              CMP      r0,r5
00003e  d216              BCS      |L9.110|
;;;324        {
;;;325          len = pdev->host.hc[hptxsts.b.chnum].xfer_len;
000040  9800              LDR      r0,[sp,#0]
000042  f3c07141          UBFX     r1,r0,#29,#2
000046  f504702b          ADD      r0,r4,#0x2ac
00004a  eb001041          ADD      r0,r0,r1,LSL #5
00004e  8a00              LDRH     r0,[r0,#0x10]
000050  b285              UXTH     r5,r0
;;;326          /* Last packet */
;;;327          intmsk.d32 = 0;
000052  2000              MOVS     r0,#0
000054  9001              STR      r0,[sp,#4]
;;;328          intmsk.b.ptxfempty = 1;
000056  9801              LDR      r0,[sp,#4]
000058  f0206080          BIC      r0,r0,#0x4000000
00005c  f1006080          ADD      r0,r0,#0x4000000
000060  9001              STR      r0,[sp,#4]
;;;329          USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0); 
000062  68e0              LDR      r0,[r4,#0xc]
000064  6980              LDR      r0,[r0,#0x18]
000066  9901              LDR      r1,[sp,#4]
000068  4388              BICS     r0,r0,r1
00006a  68e1              LDR      r1,[r4,#0xc]
00006c  6188              STR      r0,[r1,#0x18]
                  |L9.110|
;;;330        }
;;;331        
;;;332        len_words = (pdev->host.hc[hptxsts.b.chnum].xfer_len + 3) / 4;
00006e  9800              LDR      r0,[sp,#0]
000070  f3c07141          UBFX     r1,r0,#29,#2
000074  f504702b          ADD      r0,r4,#0x2ac
000078  eb001041          ADD      r0,r0,r1,LSL #5
00007c  6900              LDR      r0,[r0,#0x10]
00007e  1cc0              ADDS     r0,r0,#3
000080  f3c0068f          UBFX     r6,r0,#2,#16
;;;333        
;;;334        USB_OTG_WritePacket (pdev , pdev->host.hc[hptxsts.b.chnum].xfer_buff, hptxsts.b.chnum, len);
000084  9800              LDR      r0,[sp,#0]
000086  f3c07241          UBFX     r2,r0,#29,#2
00008a  f3c07341          UBFX     r3,r0,#29,#2
00008e  f504702b          ADD      r0,r4,#0x2ac
000092  eb001043          ADD      r0,r0,r3,LSL #5
000096  462b              MOV      r3,r5
000098  68c1              LDR      r1,[r0,#0xc]
00009a  4620              MOV      r0,r4
00009c  f7fffffe          BL       USB_OTG_WritePacket
;;;335        
;;;336        pdev->host.hc[hptxsts.b.chnum].xfer_buff  += len;
0000a0  9800              LDR      r0,[sp,#0]
0000a2  f3c07141          UBFX     r1,r0,#29,#2
0000a6  f504702b          ADD      r0,r4,#0x2ac
0000aa  eb001041          ADD      r0,r0,r1,LSL #5
0000ae  68c0              LDR      r0,[r0,#0xc]
0000b0  1941              ADDS     r1,r0,r5
0000b2  9800              LDR      r0,[sp,#0]
0000b4  f3c07241          UBFX     r2,r0,#29,#2
0000b8  f504702b          ADD      r0,r4,#0x2ac
0000bc  eb001042          ADD      r0,r0,r2,LSL #5
0000c0  60c1              STR      r1,[r0,#0xc]
;;;337        pdev->host.hc[hptxsts.b.chnum].xfer_len   -= len;
0000c2  9800              LDR      r0,[sp,#0]
0000c4  f3c07141          UBFX     r1,r0,#29,#2
0000c8  f504702b          ADD      r0,r4,#0x2ac
0000cc  eb001041          ADD      r0,r0,r1,LSL #5
0000d0  6900              LDR      r0,[r0,#0x10]
0000d2  1b41              SUBS     r1,r0,r5
0000d4  9800              LDR      r0,[sp,#0]
0000d6  f3c07241          UBFX     r2,r0,#29,#2
0000da  f504702b          ADD      r0,r4,#0x2ac
0000de  eb001042          ADD      r0,r0,r2,LSL #5
0000e2  6101              STR      r1,[r0,#0x10]
;;;338        pdev->host.hc[hptxsts.b.chnum].xfer_count  += len; 
0000e4  9800              LDR      r0,[sp,#0]
0000e6  f3c07141          UBFX     r1,r0,#29,#2
0000ea  f504702b          ADD      r0,r4,#0x2ac
0000ee  eb001041          ADD      r0,r0,r1,LSL #5
0000f2  6940              LDR      r0,[r0,#0x14]
0000f4  1941              ADDS     r1,r0,r5
0000f6  9800              LDR      r0,[sp,#0]
0000f8  f3c07241          UBFX     r2,r0,#29,#2
0000fc  f504702b          ADD      r0,r4,#0x2ac
000100  eb001042          ADD      r0,r0,r2,LSL #5
000104  6141              STR      r1,[r0,#0x14]
;;;339         
;;;340        hptxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.HREGS->HPTXSTS);
000106  6960              LDR      r0,[r4,#0x14]
000108  6900              LDR      r0,[r0,#0x10]
00010a  9000              STR      r0,[sp,#0]
                  |L9.268|
00010c  9800              LDR      r0,[sp,#0]            ;317
00010e  b280              UXTH     r0,r0                 ;317
000110  42b0              CMP      r0,r6                 ;317
000112  dd0a              BLE      |L9.298|
000114  9800              LDR      r0,[sp,#0]            ;318
000116  f3c07141          UBFX     r1,r0,#29,#2          ;318
00011a  f504702b          ADD      r0,r4,#0x2ac          ;318
00011e  eb001041          ADD      r0,r0,r1,LSL #5       ;318
000122  6900              LDR      r0,[r0,#0x10]         ;318
000124  2800              CMP      r0,#0                 ;318
000126  f47faf7c          BNE      |L9.34|
                  |L9.298|
;;;341      }  
;;;342      
;;;343      return 1;
00012a  2001              MOVS     r0,#1
;;;344    }
00012c  bd7c              POP      {r2-r6,pc}
;;;345    
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_rx_qlvl_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_rx_qlvl_ISR PROC
;;;731    
;;;732    static uint32_t USB_OTG_USBH_handle_rx_qlvl_ISR (USB_OTG_CORE_HANDLE *pdev)
000000  b530              PUSH     {r4,r5,lr}
;;;733    {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
;;;734      USB_OTG_GRXFSTS_TypeDef       grxsts;
;;;735      USB_OTG_GINTMSK_TypeDef       intmsk;
;;;736      USB_OTG_HCTSIZn_TypeDef       hctsiz; 
;;;737      USB_OTG_HCCHAR_TypeDef        hcchar;
;;;738      __IO uint8_t                  channelnum =0;  
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;739      uint32_t                      count;    
;;;740      
;;;741      /* Disable the Rx Status Queue Level interrupt */
;;;742      intmsk.d32 = 0;
00000a  9003              STR      r0,[sp,#0xc]
;;;743      intmsk.b.rxstsqlvl = 1;
00000c  9803              LDR      r0,[sp,#0xc]
00000e  f0200010          BIC      r0,r0,#0x10
000012  3010              ADDS     r0,r0,#0x10
000014  9003              STR      r0,[sp,#0xc]
;;;744      USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, 0);
000016  68e0              LDR      r0,[r4,#0xc]
000018  6980              LDR      r0,[r0,#0x18]
00001a  9903              LDR      r1,[sp,#0xc]
00001c  4388              BICS     r0,r0,r1
00001e  68e1              LDR      r1,[r4,#0xc]
000020  6188              STR      r0,[r1,#0x18]
;;;745      
;;;746      grxsts.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRXSTSP);
000022  68e0              LDR      r0,[r4,#0xc]
000024  6a00              LDR      r0,[r0,#0x20]
000026  9004              STR      r0,[sp,#0x10]
;;;747      channelnum = grxsts.b.chnum;  
000028  9804              LDR      r0,[sp,#0x10]
00002a  f000000f          AND      r0,r0,#0xf
00002e  9000              STR      r0,[sp,#0]
;;;748      hcchar.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR);
000030  f1040090          ADD      r0,r4,#0x90
000034  f89d1000          LDRB     r1,[sp,#0]
000038  f8500021          LDR      r0,[r0,r1,LSL #2]
00003c  6800              LDR      r0,[r0,#0]
00003e  9001              STR      r0,[sp,#4]
;;;749      
;;;750      switch (grxsts.b.pktsts)
000040  9804              LDR      r0,[sp,#0x10]
000042  f3c04043          UBFX     r0,r0,#17,#4
000046  2802              CMP      r0,#2
000048  d006              BEQ      |L10.88|
00004a  2803              CMP      r0,#3
00004c  d078              BEQ      |L10.320|
00004e  2805              CMP      r0,#5
000050  d077              BEQ      |L10.322|
000052  2807              CMP      r0,#7
000054  d173              BNE      |L10.318|
000056  e075              B        |L10.324|
                  |L10.88|
;;;751      {
;;;752      case GRXSTS_PKTSTS_IN:
;;;753        /* Read the data into the host buffer. */
;;;754        if ((grxsts.b.bcnt > 0) && (pdev->host.hc[channelnum].xfer_buff != (void  *)0))
000058  9804              LDR      r0,[sp,#0x10]
00005a  f3c0100a          UBFX     r0,r0,#4,#11
00005e  2800              CMP      r0,#0
000060  dd69              BLE      |L10.310|
000062  f504702b          ADD      r0,r4,#0x2ac
000066  f89d1000          LDRB     r1,[sp,#0]
00006a  eb001041          ADD      r0,r0,r1,LSL #5
00006e  68c0              LDR      r0,[r0,#0xc]
000070  2800              CMP      r0,#0
000072  d060              BEQ      |L10.310|
;;;755        {  
;;;756          
;;;757          USB_OTG_ReadPacket(pdev, pdev->host.hc[channelnum].xfer_buff, grxsts.b.bcnt);
000074  9804              LDR      r0,[sp,#0x10]
000076  f3c0120a          UBFX     r2,r0,#4,#11
00007a  f504702b          ADD      r0,r4,#0x2ac
00007e  f89d3000          LDRB     r3,[sp,#0]
000082  eb001043          ADD      r0,r0,r3,LSL #5
000086  68c1              LDR      r1,[r0,#0xc]
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       USB_OTG_ReadPacket
;;;758          /*manage multiple Xfer */
;;;759          pdev->host.hc[grxsts.b.chnum].xfer_buff += grxsts.b.bcnt;           
00008e  9804              LDR      r0,[sp,#0x10]
000090  f000010f          AND      r1,r0,#0xf
000094  f504702b          ADD      r0,r4,#0x2ac
000098  eb001041          ADD      r0,r0,r1,LSL #5
00009c  68c0              LDR      r0,[r0,#0xc]
00009e  9904              LDR      r1,[sp,#0x10]
0000a0  f3c1110a          UBFX     r1,r1,#4,#11
0000a4  4401              ADD      r1,r1,r0
0000a6  9804              LDR      r0,[sp,#0x10]
0000a8  f000020f          AND      r2,r0,#0xf
0000ac  f504702b          ADD      r0,r4,#0x2ac
0000b0  eb001042          ADD      r0,r0,r2,LSL #5
0000b4  60c1              STR      r1,[r0,#0xc]
;;;760          pdev->host.hc[grxsts.b.chnum].xfer_count  += grxsts.b.bcnt;
0000b6  9804              LDR      r0,[sp,#0x10]
0000b8  f000010f          AND      r1,r0,#0xf
0000bc  f504702b          ADD      r0,r4,#0x2ac
0000c0  eb001041          ADD      r0,r0,r1,LSL #5
0000c4  6940              LDR      r0,[r0,#0x14]
0000c6  9904              LDR      r1,[sp,#0x10]
0000c8  f3c1110a          UBFX     r1,r1,#4,#11
0000cc  4401              ADD      r1,r1,r0
0000ce  9804              LDR      r0,[sp,#0x10]
0000d0  f000020f          AND      r2,r0,#0xf
0000d4  f504702b          ADD      r0,r4,#0x2ac
0000d8  eb001042          ADD      r0,r0,r2,LSL #5
0000dc  6141              STR      r1,[r0,#0x14]
;;;761          
;;;762         
;;;763          count = pdev->host.hc[channelnum].xfer_count;
0000de  f504702b          ADD      r0,r4,#0x2ac
0000e2  f89d1000          LDRB     r1,[sp,#0]
0000e6  eb001041          ADD      r0,r0,r1,LSL #5
0000ea  6945              LDR      r5,[r0,#0x14]
;;;764          pdev->host.XferCnt[channelnum]  = count;
0000ec  f5047014          ADD      r0,r4,#0x250
0000f0  f89d1000          LDRB     r1,[sp,#0]
0000f4  f8405021          STR      r5,[r0,r1,LSL #2]
;;;765          
;;;766          hctsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.HC_REGS[channelnum]->HCTSIZ);
0000f8  f1040090          ADD      r0,r4,#0x90
0000fc  f89d1000          LDRB     r1,[sp,#0]
000100  f8500021          LDR      r0,[r0,r1,LSL #2]
000104  6900              LDR      r0,[r0,#0x10]
000106  9002              STR      r0,[sp,#8]
;;;767          if(hctsiz.b.pktcnt > 0)
000108  9802              LDR      r0,[sp,#8]
00010a  f3c040c9          UBFX     r0,r0,#19,#10
00010e  2800              CMP      r0,#0
000110  dd11              BLE      |L10.310|
;;;768          {
;;;769            /* re-activate the channel when more packets are expected */
;;;770            hcchar.b.chen = 1;
000112  9801              LDR      r0,[sp,#4]
000114  f0204000          BIC      r0,r0,#0x80000000
000118  f1004000          ADD      r0,r0,#0x80000000
00011c  9001              STR      r0,[sp,#4]
;;;771            hcchar.b.chdis = 0;
00011e  9801              LDR      r0,[sp,#4]
000120  f0204080          BIC      r0,r0,#0x40000000
000124  9001              STR      r0,[sp,#4]
;;;772            USB_OTG_WRITE_REG32(&pdev->regs.HC_REGS[channelnum]->HCCHAR, hcchar.d32);
000126  f1040090          ADD      r0,r4,#0x90
00012a  f89d2000          LDRB     r2,[sp,#0]
00012e  9901              LDR      r1,[sp,#4]
000130  f8500022          LDR      r0,[r0,r2,LSL #2]
000134  6001              STR      r1,[r0,#0]
                  |L10.310|
;;;773          }
;;;774        }
;;;775        break;
000136  e006              B        |L10.326|
000138  e002              B        |L10.320|
00013a  e002              B        |L10.322|
00013c  e7ff              B        |L10.318|
                  |L10.318|
;;;776        
;;;777        case GRXSTS_PKTSTS_IN_XFER_COMP:
00013e  bf00              NOP      
                  |L10.320|
;;;778       
;;;779        case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
000140  bf00              NOP      
                  |L10.322|
;;;780      case GRXSTS_PKTSTS_CH_HALTED:
000142  bf00              NOP      
                  |L10.324|
;;;781      default:
;;;782        break;
000144  bf00              NOP      
                  |L10.326|
000146  bf00              NOP                            ;775
;;;783      }
;;;784      
;;;785      /* Enable the Rx Status Queue Level interrupt */
;;;786      intmsk.b.rxstsqlvl = 1;
000148  9803              LDR      r0,[sp,#0xc]
00014a  f0200010          BIC      r0,r0,#0x10
00014e  3010              ADDS     r0,r0,#0x10
000150  9003              STR      r0,[sp,#0xc]
;;;787      USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GINTMSK, 0, intmsk.d32);
000152  68e0              LDR      r0,[r4,#0xc]
000154  6980              LDR      r0,[r0,#0x18]
000156  9903              LDR      r1,[sp,#0xc]
000158  4308              ORRS     r0,r0,r1
00015a  68e1              LDR      r1,[r4,#0xc]
00015c  6188              STR      r0,[r1,#0x18]
;;;788      return 1;
00015e  2001              MOVS     r0,#1
;;;789    }
000160  b005              ADD      sp,sp,#0x14
000162  bd30              POP      {r4,r5,pc}
;;;790    
                          ENDP


                          AREA ||i.USB_OTG_USBH_handle_sof_ISR||, CODE, READONLY, ALIGN=1

                  USB_OTG_USBH_handle_sof_ISR PROC
;;;219      */
;;;220    static uint32_t USB_OTG_USBH_handle_sof_ISR (USB_OTG_CORE_HANDLE *pdev)
000000  b508              PUSH     {r3,lr}
;;;221    {
000002  4601              MOV      r1,r0
;;;222      USB_OTG_GINTSTS_TypeDef      gintsts;
;;;223      
;;;224      
;;;225      gintsts.d32 = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;226      /* Clear interrupt */
;;;227      gintsts.b.sofintr = 1;
000008  9800              LDR      r0,[sp,#0]
00000a  f0200008          BIC      r0,r0,#8
00000e  3008              ADDS     r0,r0,#8
000010  9000              STR      r0,[sp,#0]
;;;228      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
000012  9800              LDR      r0,[sp,#0]
000014  68ca              LDR      r2,[r1,#0xc]
000016  6150              STR      r0,[r2,#0x14]
;;;229      
;;;230      return 1;
000018  2001              MOVS     r0,#1
;;;231    }
00001a  bd08              POP      {r3,pc}
;;;232    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\STM32_USB_OTG_Driver\\usb_hcd_int.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_usb_hcd_int_c_8ec64081____REV16|
#line 114 ".\\Libraries\\CMSIS\\core_cmInstr.h"
|__asm___13_usb_hcd_int_c_8ec64081____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_usb_hcd_int_c_8ec64081____REVSH|
#line 128
|__asm___13_usb_hcd_int_c_8ec64081____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
