; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\media_usb_key\system_stm32f4xx.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\media_usb_key\system_stm32f4xx.d --cpu=Cortex-M4 --apcs=interwork -I.\Libraries -I.\Utilities -I.\Libraries\CMSIS\ST\STM32F4xx\Include -I.\inc -I.\src -I.\Libraries\STM32F4xx_StdPeriph_Driver -I.\Libraries\STM32_USB_HOST_Library -I.\Libraries\STM32_USB_OTG_Driver -I.\Utilities\STM32F4-Discovery -I.\Libraries\CMSIS -I.\Utilities\Third_Party\fat_fs -IC:\Keil4\ARM\RV31\INC -IC:\Keil4\ARM\CMSIS\Include -IC:\Keil4\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DUSE_USB_OTG_FS -DSTM32F4XX -DMEDIA_USB_KEY -D__FPU_PRESENT=0 --omf_browse=.\media_usb_key\system_stm32f4xx.crf src\system_stm32f4xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;353      */
;;;354    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;355    {
;;;356    /******************************************************************************/
;;;357    /*            PLL (clocked by HSE) used as System clock source                */
;;;358    /******************************************************************************/
;;;359      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2200              MOVS     r2,#0
;;;360      
;;;361      /* Enable HSE */
;;;362      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000004  492e              LDR      r1,|L1.192|
000006  9200              STR      r2,[sp,#0]            ;359
000008  9201              STR      r2,[sp,#4]
00000a  6808              LDR      r0,[r1,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  6008              STR      r0,[r1,#0]
;;;363     
;;;364      /* Wait till HSE is ready and if Time out is reached exit */
;;;365      do
;;;366      {
;;;367        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;368        StartUpCounter++;
;;;369      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000012  f44f63a0          MOV      r3,#0x500
                  |L1.22|
000016  6808              LDR      r0,[r1,#0]            ;367
000018  f4003000          AND      r0,r0,#0x20000        ;367
00001c  9001              STR      r0,[sp,#4]            ;368
00001e  9800              LDR      r0,[sp,#0]            ;368
000020  1c40              ADDS     r0,r0,#1              ;368
000022  9000              STR      r0,[sp,#0]
000024  9801              LDR      r0,[sp,#4]
000026  b910              CBNZ     r0,|L1.46|
000028  9800              LDR      r0,[sp,#0]
00002a  4298              CMP      r0,r3
00002c  d1f3              BNE      |L1.22|
                  |L1.46|
;;;370    
;;;371      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
00002e  6808              LDR      r0,[r1,#0]
000030  0383              LSLS     r3,r0,#14
;;;372      {
;;;373        HSEStatus = (uint32_t)0x01;
;;;374      }
;;;375      else
;;;376      {
;;;377        HSEStatus = (uint32_t)0x00;
;;;378      }
;;;379    
;;;380      if (HSEStatus == (uint32_t)0x01)
;;;381      {
;;;382        /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
;;;383        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;384        PWR->CR |= PWR_CR_VOS;
;;;385    
;;;386        /* HCLK = SYSCLK / 1*/
;;;387        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
000032  4824              LDR      r0,|L1.196|
000034  d541              BPL      |L1.186|
000036  2201              MOVS     r2,#1                 ;373
000038  9201              STR      r2,[sp,#4]            ;383
00003a  4a22              LDR      r2,|L1.196|
00003c  3238              ADDS     r2,r2,#0x38           ;383
00003e  6813              LDR      r3,[r2,#0]            ;383
000040  f0435380          ORR      r3,r3,#0x10000000     ;383
000044  6013              STR      r3,[r2,#0]            ;383
000046  4a20              LDR      r2,|L1.200|
000048  6813              LDR      r3,[r2,#0]            ;384
00004a  f4434380          ORR      r3,r3,#0x4000         ;384
00004e  6013              STR      r3,[r2,#0]            ;384
000050  6802              LDR      r2,[r0,#0]
000052  6002              STR      r2,[r0,#0]
;;;388          
;;;389        /* PCLK2 = HCLK / 2*/
;;;390        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000054  6802              LDR      r2,[r0,#0]
000056  f4424200          ORR      r2,r2,#0x8000
00005a  6002              STR      r2,[r0,#0]
;;;391        
;;;392        /* PCLK1 = HCLK / 4*/
;;;393        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
00005c  6802              LDR      r2,[r0,#0]
00005e  f44252a0          ORR      r2,r2,#0x1400
000062  6002              STR      r2,[r0,#0]
;;;394    
;;;395        /* Configure the main PLL */
;;;396        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
000064  1f03              SUBS     r3,r0,#4
000066  4a19              LDR      r2,|L1.204|
000068  601a              STR      r2,[r3,#0]
;;;397                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;398    
;;;399        /* Enable the main PLL */
;;;400        RCC->CR |= RCC_CR_PLLON;
00006a  680a              LDR      r2,[r1,#0]
00006c  f0427280          ORR      r2,r2,#0x1000000
000070  600a              STR      r2,[r1,#0]
                  |L1.114|
;;;401    
;;;402        /* Wait till the main PLL is ready */
;;;403        while((RCC->CR & RCC_CR_PLLRDY) == 0)
000072  680a              LDR      r2,[r1,#0]
000074  0192              LSLS     r2,r2,#6
000076  d5fc              BPL      |L1.114|
;;;404        {
;;;405        }
;;;406       
;;;407        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;408        FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
000078  4a15              LDR      r2,|L1.208|
00007a  f2406305          MOV      r3,#0x605
00007e  6013              STR      r3,[r2,#0]
;;;409    
;;;410        /* Select the main PLL as system clock source */
;;;411        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000080  6802              LDR      r2,[r0,#0]
000082  f0220203          BIC      r2,r2,#3
000086  6002              STR      r2,[r0,#0]
;;;412        RCC->CFGR |= RCC_CFGR_SW_PLL;
000088  6802              LDR      r2,[r0,#0]
00008a  f0420202          ORR      r2,r2,#2
00008e  6002              STR      r2,[r0,#0]
                  |L1.144|
;;;413    
;;;414        /* Wait till the main PLL is used as system clock source */
;;;415        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
000090  6802              LDR      r2,[r0,#0]
000092  f3c20281          UBFX     r2,r2,#2,#2
000096  2a02              CMP      r2,#2
000098  d1fa              BNE      |L1.144|
                  |L1.154|
;;;416        {
;;;417        }
;;;418      }
;;;419      else
;;;420      { /* If HSE fails to start-up, the application will have wrong clock
;;;421             configuration. User can add here some code to deal with this error */
;;;422      }
;;;423    
;;;424    
;;;425    /******************************************************************************/
;;;426    /*                          I2S clock configuration                           */
;;;427    /******************************************************************************/
;;;428      /* PLLI2S clock used as I2S clock source */
;;;429      RCC->CFGR &= ~RCC_CFGR_I2SSRC;
00009a  6802              LDR      r2,[r0,#0]
00009c  f4220200          BIC      r2,r2,#0x800000
0000a0  6002              STR      r2,[r0,#0]
;;;430    
;;;431      /* Configure PLLI2S */
;;;432      RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
0000a2  4a08              LDR      r2,|L1.196|
0000a4  480b              LDR      r0,|L1.212|
0000a6  327c              ADDS     r2,r2,#0x7c
0000a8  6010              STR      r0,[r2,#0]
;;;433    
;;;434      /* Enable PLLI2S */
;;;435      RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
0000aa  6808              LDR      r0,[r1,#0]
0000ac  f0406080          ORR      r0,r0,#0x4000000
0000b0  6008              STR      r0,[r1,#0]
                  |L1.178|
;;;436    
;;;437      /* Wait till PLLI2S is ready */
;;;438      while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
0000b2  6808              LDR      r0,[r1,#0]
0000b4  0100              LSLS     r0,r0,#4
0000b6  d5fc              BPL      |L1.178|
;;;439      {
;;;440      }
;;;441    }
0000b8  bd0c              POP      {r2,r3,pc}
                  |L1.186|
0000ba  9201              STR      r2,[sp,#4]            ;377
0000bc  e7ed              B        |L1.154|
;;;442    
                          ENDP

0000be  0000              DCW      0x0000
                  |L1.192|
                          DCD      0x40023800
                  |L1.196|
                          DCD      0x40023808
                  |L1.200|
                          DCD      0x40007000
                  |L1.204|
                          DCD      0x07405408
                  |L1.208|
                          DCD      0x40023c00
                  |L1.212|
                          DCD      0x30004080

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;297      */
;;;298    void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;299    {
;;;300      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
;;;301      
;;;302      /* Get SYSCLK source -------------------------------------------------------*/
;;;303      tmp = RCC->CFGR & RCC_CFGR_SWS;
000002  4d1a              LDR      r5,|L2.108|
000004  6828              LDR      r0,[r5,#0]
;;;304    
;;;305      switch (tmp)
;;;306      {
;;;307        case 0x00:  /* HSI used as system clock source */
;;;308          SystemCoreClock = HSI_VALUE;
000006  4b1a              LDR      r3,|L2.112|
000008  491a              LDR      r1,|L2.116|
00000a  f010000c          ANDS     r0,r0,#0xc            ;303
00000e  d004              BEQ      |L2.26|
;;;309          break;
;;;310        case 0x04:  /* HSE used as system clock source */
;;;311          SystemCoreClock = HSE_VALUE;
000010  105e              ASRS     r6,r3,#1
000012  2804              CMP      r0,#4                 ;305
000014  d003              BEQ      |L2.30|
000016  2808              CMP      r0,#8                 ;305
000018  d003              BEQ      |L2.34|
                  |L2.26|
00001a  600b              STR      r3,[r1,#0]            ;309  ; SystemCoreClock
00001c  e01b              B        |L2.86|
                  |L2.30|
;;;312          break;
00001e  600e              STR      r6,[r1,#0]  ; SystemCoreClock
000020  e019              B        |L2.86|
                  |L2.34|
;;;313        case 0x08:  /* PLL used as system clock source */
;;;314    
;;;315          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;316             SYSCLK = PLL_VCO / PLL_P
;;;317             */    
;;;318          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000022  4a12              LDR      r2,|L2.108|
000024  1f12              SUBS     r2,r2,#4
000026  6810              LDR      r0,[r2,#0]
000028  f3c05480          UBFX     r4,r0,#22,#1
;;;319          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00002c  6810              LDR      r0,[r2,#0]
00002e  f000003f          AND      r0,r0,#0x3f
;;;320          
;;;321          if (pllsource != 0)
000032  b114              CBZ      r4,|L2.58|
;;;322          {
;;;323            /* HSE used as PLL clock source */
;;;324            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000034  fbb6f0f0          UDIV     r0,r6,r0
000038  e001              B        |L2.62|
                  |L2.58|
;;;325          }
;;;326          else
;;;327          {
;;;328            /* HSI used as PLL clock source */
;;;329            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
00003a  fbb3f0f0          UDIV     r0,r3,r0
                  |L2.62|
00003e  6813              LDR      r3,[r2,#0]
;;;330          }
;;;331    
;;;332          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000040  6812              LDR      r2,[r2,#0]
000042  f3c31388          UBFX     r3,r3,#6,#9           ;329
000046  4358              MULS     r0,r3,r0              ;329
000048  f3c24201          UBFX     r2,r2,#16,#2
00004c  1c52              ADDS     r2,r2,#1
00004e  0052              LSLS     r2,r2,#1
;;;333          SystemCoreClock = pllvco/pllp;
000050  fbb0f0f2          UDIV     r0,r0,r2
000054  6008              STR      r0,[r1,#0]  ; SystemCoreClock
                  |L2.86|
;;;334          break;
;;;335        default:
;;;336          SystemCoreClock = HSI_VALUE;
;;;337          break;
;;;338      }
;;;339      /* Compute HCLK frequency --------------------------------------------------*/
;;;340      /* Get HCLK prescaler */
;;;341      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000056  6828              LDR      r0,[r5,#0]
000058  4a06              LDR      r2,|L2.116|
00005a  f3c01003          UBFX     r0,r0,#4,#4
00005e  1d12              ADDS     r2,r2,#4
000060  5c10              LDRB     r0,[r2,r0]
;;;342      /* HCLK frequency */
;;;343      SystemCoreClock >>= tmp;
000062  680a              LDR      r2,[r1,#0]  ; SystemCoreClock
000064  40c2              LSRS     r2,r2,r0
000066  600a              STR      r2,[r1,#0]  ; SystemCoreClock
;;;344    }
000068  bd70              POP      {r4-r6,pc}
;;;345    
                          ENDP

00006a  0000              DCW      0x0000
                  |L2.108|
                          DCD      0x40023808
                  |L2.112|
                          DCD      0x00f42400
                  |L2.116|
                          DCD      ||.data||

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;220      */
;;;221    void SystemInit(void)
000000  480f              LDR      r0,|L3.64|
;;;222    {
000002  b510              PUSH     {r4,lr}
;;;223      /* FPU settings ------------------------------------------------------------*/
;;;224      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;225        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
;;;226      #endif
;;;227      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;228      /* Set HSION bit */
;;;229      RCC->CR |= (uint32_t)0x00000001;
000004  6801              LDR      r1,[r0,#0]
000006  f0410101          ORR      r1,r1,#1
00000a  6001              STR      r1,[r0,#0]
;;;230    
;;;231      /* Reset CFGR register */
;;;232      RCC->CFGR = 0x00000000;
00000c  4a0c              LDR      r2,|L3.64|
00000e  2100              MOVS     r1,#0
000010  3208              ADDS     r2,r2,#8
000012  6011              STR      r1,[r2,#0]
;;;233    
;;;234      /* Reset HSEON, CSSON and PLLON bits */
;;;235      RCC->CR &= (uint32_t)0xFEF6FFFF;
000014  6802              LDR      r2,[r0,#0]
000016  4b0b              LDR      r3,|L3.68|
000018  401a              ANDS     r2,r2,r3
00001a  6002              STR      r2,[r0,#0]
;;;236    
;;;237      /* Reset PLLCFGR register */
;;;238      RCC->PLLCFGR = 0x24003010;
00001c  1d03              ADDS     r3,r0,#4
00001e  4a0a              LDR      r2,|L3.72|
000020  601a              STR      r2,[r3,#0]
;;;239    
;;;240      /* Reset HSEBYP bit */
;;;241      RCC->CR &= (uint32_t)0xFFFBFFFF;
000022  6802              LDR      r2,[r0,#0]
000024  f4222280          BIC      r2,r2,#0x40000
000028  6002              STR      r2,[r0,#0]
;;;242    
;;;243      /* Disable all interrupts */
;;;244      RCC->CIR = 0x00000000;
00002a  4805              LDR      r0,|L3.64|
00002c  300c              ADDS     r0,r0,#0xc
00002e  6001              STR      r1,[r0,#0]
;;;245    
;;;246    #ifdef DATA_IN_ExtSRAM
;;;247      SystemInit_ExtMemCtl(); 
;;;248    #endif /* DATA_IN_ExtSRAM */
;;;249             
;;;250      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;251         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;252      SetSysClock();
000030  f7fffffe          BL       SetSysClock
;;;253    
;;;254      /* Configure the Vector Table location add offset address ------------------*/
;;;255    #ifdef VECT_TAB_SRAM
;;;256      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;257    #else
;;;258      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
000034  4905              LDR      r1,|L3.76|
000036  f04f6000          MOV      r0,#0x8000000
00003a  6008              STR      r0,[r1,#0]
;;;259    #endif
;;;260    }
00003c  bd10              POP      {r4,pc}
;;;261    
                          ENDP

00003e  0000              DCW      0x0000
                  |L3.64|
                          DCD      0x40023800
                  |L3.68|
                          DCD      0xfef6ffff
                  |L3.72|
                          DCD      0x24003010
                  |L3.76|
                          DCD      0xe000ed08

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0a037a00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "src\\system_stm32f4xx.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 114 ".\\Libraries\\CMSIS\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 128
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
