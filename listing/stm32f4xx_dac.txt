; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\MEDIA_USB_KEY\stm32f4xx_dac.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\MEDIA_USB_KEY\stm32f4xx_dac.d --cpu=Cortex-M4 --apcs=interwork -I.\Libraries -I.\Utilities -I.\Libraries\CMSIS\ST\STM32F4xx\Include -I.\inc -I.\src -I.\Libraries\STM32F4xx_StdPeriph_Driver -I.\Libraries\STM32_USB_HOST_Library -I.\Libraries\STM32_USB_OTG_Driver -I.\Utilities\STM32F4-Discovery -I.\Libraries\CMSIS -I.\Utilities\Third_Party\fat_fs -IC:\Keil4\ARM\RV31\INC -IC:\Keil4\ARM\CMSIS\Include -IC:\Keil4\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DUSE_USB_OTG_FS -DSTM32F4XX -DMEDIA_USB_KEY -D__FPU_PRESENT=0 --omf_browse=.\MEDIA_USB_KEY\stm32f4xx_dac.crf Libraries\CMSIS\stm32f4xx_dac.c]
                          THUMB

                          AREA ||i.DAC_ClearFlag||, CODE, READONLY, ALIGN=2

                  DAC_ClearFlag PROC
;;;611      */
;;;612    void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
000000  4081              LSLS     r1,r1,r0
;;;613    {
;;;614      /* Check the parameters */
;;;615      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;616      assert_param(IS_DAC_FLAG(DAC_FLAG));
;;;617    
;;;618      /* Clear the selected DAC flags */
;;;619      DAC->SR = (DAC_FLAG << DAC_Channel);
000002  4801              LDR      r0,|L1.8|
000004  6001              STR      r1,[r0,#0]
;;;620    }
000006  4770              BX       lr
;;;621    
                          ENDP

                  |L1.8|
                          DCD      0x40007434

                          AREA ||i.DAC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DAC_ClearITPendingBit PROC
;;;674      */
;;;675    void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
000000  4081              LSLS     r1,r1,r0
;;;676    {
;;;677      /* Check the parameters */
;;;678      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;679      assert_param(IS_DAC_IT(DAC_IT)); 
;;;680    
;;;681      /* Clear the selected DAC interrupt pending bits */
;;;682      DAC->SR = (DAC_IT << DAC_Channel);
000002  4801              LDR      r0,|L2.8|
000004  6001              STR      r1,[r0,#0]
;;;683    }
000006  4770              BX       lr
;;;684    
                          ENDP

                  |L2.8|
                          DCD      0x40007434

                          AREA ||i.DAC_Cmd||, CODE, READONLY, ALIGN=2

                  DAC_Cmd PROC
;;;252      */
;;;253    void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
000000  4b04              LDR      r3,|L3.20|
;;;254    {
;;;255      /* Check the parameters */
;;;256      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;257      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;258    
;;;259      if (NewState != DISABLE)
;;;260      {
;;;261        /* Enable the selected DAC channel */
;;;262        DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
000002  2201              MOVS     r2,#1
000004  4082              LSLS     r2,r2,r0
;;;263      }
;;;264      else
;;;265      {
;;;266        /* Disable the selected DAC channel */
;;;267        DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
000006  6818              LDR      r0,[r3,#0]
000008  b109              CBZ      r1,|L3.14|
00000a  4310              ORRS     r0,r0,r2              ;262
00000c  e000              B        |L3.16|
                  |L3.14|
00000e  4390              BICS     r0,r0,r2
                  |L3.16|
000010  6018              STR      r0,[r3,#0]            ;262
;;;268      }
;;;269    }
000012  4770              BX       lr
;;;270    
                          ENDP

                  |L3.20|
                          DCD      0x40007400

                          AREA ||i.DAC_DMACmd||, CODE, READONLY, ALIGN=2

                  DAC_DMACmd PROC
;;;496      */
;;;497    void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
000000  4b04              LDR      r3,|L4.20|
;;;498    {
;;;499      /* Check the parameters */
;;;500      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;501      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;502    
;;;503      if (NewState != DISABLE)
;;;504      {
;;;505        /* Enable the selected DAC channel DMA request */
;;;506        DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
000002  149a              ASRS     r2,r3,#18
000004  4082              LSLS     r2,r2,r0
;;;507      }
;;;508      else
;;;509      {
;;;510        /* Disable the selected DAC channel DMA request */
;;;511        DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
000006  6818              LDR      r0,[r3,#0]
000008  b109              CBZ      r1,|L4.14|
00000a  4310              ORRS     r0,r0,r2              ;506
00000c  e000              B        |L4.16|
                  |L4.14|
00000e  4390              BICS     r0,r0,r2
                  |L4.16|
000010  6018              STR      r0,[r3,#0]            ;506
;;;512      }
;;;513    }
000012  4770              BX       lr
;;;514    /**
                          ENDP

                  |L4.20|
                          DCD      0x40007400

                          AREA ||i.DAC_DeInit||, CODE, READONLY, ALIGN=1

                  DAC_DeInit PROC
;;;173      */
;;;174    void DAC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;175    {
;;;176      /* Enable DAC reset state */
;;;177      RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
000002  2101              MOVS     r1,#1
000004  074c              LSLS     r4,r1,#29
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;178      /* Release DAC from reset state */
;;;179      RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;180    }
;;;181    
                          ENDP


                          AREA ||i.DAC_DualSoftwareTriggerCmd||, CODE, READONLY, ALIGN=2

                  DAC_DualSoftwareTriggerCmd PROC
;;;304      */
;;;305    void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
000000  4905              LDR      r1,|L6.24|
;;;306    {
;;;307      /* Check the parameters */
;;;308      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;309    
;;;310      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;311      {
;;;312        /* Enable software trigger for both DAC channels */
;;;313        DAC->SWTRIGR |= DUAL_SWTRIG_SET;
;;;314      }
;;;315      else
;;;316      {
;;;317        /* Disable software trigger for both DAC channels */
;;;318        DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L6.14|
000008  f0400003          ORR      r0,r0,#3              ;313
00000c  e001              B        |L6.18|
                  |L6.14|
00000e  f0200003          BIC      r0,r0,#3
                  |L6.18|
000012  6008              STR      r0,[r1,#0]            ;313
;;;319      }
;;;320    }
000014  4770              BX       lr
;;;321    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0x40007404

                          AREA ||i.DAC_GetDataOutputValue||, CODE, READONLY, ALIGN=2

                  DAC_GetDataOutputValue PROC
;;;451      */
;;;452    uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
000000  4904              LDR      r1,|L7.20|
;;;453    {
000002  b508              PUSH     {r3,lr}
;;;454      __IO uint32_t tmp = 0;
;;;455      
;;;456      /* Check the parameters */
;;;457      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;458      
;;;459      tmp = (uint32_t) DAC_BASE ;
;;;460      tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
000004  eb010090          ADD      r0,r1,r0,LSR #2
000008  302c              ADDS     r0,r0,#0x2c
;;;461      
;;;462      /* Returns the DAC channel data output register value */
;;;463      return (uint16_t) (*(__IO uint32_t*) tmp);
00000a  9000              STR      r0,[sp,#0]
00000c  6800              LDR      r0,[r0,#0]
00000e  b280              UXTH     r0,r0
;;;464    }
000010  bd08              POP      {r3,pc}
;;;465    /**
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40007400

                          AREA ||i.DAC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DAC_GetFlagStatus PROC
;;;576      */
;;;577    FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
000000  4b04              LDR      r3,|L8.20|
;;;578    {
000002  4602              MOV      r2,r0
;;;579      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;580      /* Check the parameters */
;;;581      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;582      assert_param(IS_DAC_FLAG(DAC_FLAG));
;;;583    
;;;584      /* Check the status of the specified DAC flag */
;;;585      if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
000006  681b              LDR      r3,[r3,#0]
000008  4091              LSLS     r1,r1,r2
00000a  420b              TST      r3,r1
00000c  d000              BEQ      |L8.16|
;;;586      {
;;;587        /* DAC_FLAG is set */
;;;588        bitstatus = SET;
00000e  2001              MOVS     r0,#1
                  |L8.16|
;;;589      }
;;;590      else
;;;591      {
;;;592        /* DAC_FLAG is reset */
;;;593        bitstatus = RESET;
;;;594      }
;;;595      /* Return the DAC_FLAG status */
;;;596      return  bitstatus;
;;;597    }
000010  4770              BX       lr
;;;598    
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x40007434

                          AREA ||i.DAC_GetITStatus||, CODE, READONLY, ALIGN=2

                  DAC_GetITStatus PROC
;;;634      */
;;;635    ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
000000  4a07              LDR      r2,|L9.32|
;;;636    {
000002  4603              MOV      r3,r0
;;;637      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;638      uint32_t enablestatus = 0;
;;;639      
;;;640      /* Check the parameters */
;;;641      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;642      assert_param(IS_DAC_IT(DAC_IT));
;;;643    
;;;644      /* Get the DAC_IT enable bit status */
;;;645      enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
000006  6812              LDR      r2,[r2,#0]
000008  4099              LSLS     r1,r1,r3
;;;646      
;;;647      /* Check the status of the specified DAC interrupt */
;;;648      if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
00000a  4b05              LDR      r3,|L9.32|
00000c  400a              ANDS     r2,r2,r1              ;645
00000e  3334              ADDS     r3,r3,#0x34
000010  681b              LDR      r3,[r3,#0]
000012  420b              TST      r3,r1
000014  d002              BEQ      |L9.28|
000016  2a00              CMP      r2,#0
000018  d000              BEQ      |L9.28|
;;;649      {
;;;650        /* DAC_IT is set */
;;;651        bitstatus = SET;
00001a  2001              MOVS     r0,#1
                  |L9.28|
;;;652      }
;;;653      else
;;;654      {
;;;655        /* DAC_IT is reset */
;;;656        bitstatus = RESET;
;;;657      }
;;;658      /* Return the DAC_IT status */
;;;659      return  bitstatus;
;;;660    }
00001c  4770              BX       lr
;;;661    
                          ENDP

00001e  0000              DCW      0x0000
                  |L9.32|
                          DCD      0x40007400

                          AREA ||i.DAC_ITConfig||, CODE, READONLY, ALIGN=2

                  DAC_ITConfig PROC
;;;544      */ 
;;;545    void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
000000  4b04              LDR      r3,|L10.20|
;;;546    {
;;;547      /* Check the parameters */
;;;548      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;549      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;550      assert_param(IS_DAC_IT(DAC_IT)); 
;;;551    
;;;552      if (NewState != DISABLE)
;;;553      {
;;;554        /* Enable the selected DAC interrupts */
;;;555        DAC->CR |=  (DAC_IT << DAC_Channel);
000002  4081              LSLS     r1,r1,r0
;;;556      }
;;;557      else
;;;558      {
;;;559        /* Disable the selected DAC interrupts */
;;;560        DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
000004  6818              LDR      r0,[r3,#0]
000006  b10a              CBZ      r2,|L10.12|
000008  4308              ORRS     r0,r0,r1              ;555
00000a  e000              B        |L10.14|
                  |L10.12|
00000c  4388              BICS     r0,r0,r1
                  |L10.14|
00000e  6018              STR      r0,[r3,#0]            ;555
;;;561      }
;;;562    }
000010  4770              BX       lr
;;;563    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      0x40007400

                          AREA ||i.DAC_Init||, CODE, READONLY, ALIGN=2

                  DAC_Init PROC
;;;192      */
;;;193    void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;194    {
;;;195      uint32_t tmpreg1 = 0, tmpreg2 = 0;
;;;196    
;;;197      /* Check the DAC parameters */
;;;198      assert_param(IS_DAC_TRIGGER(DAC_InitStruct->DAC_Trigger));
;;;199      assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
;;;200      assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
;;;201      assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
;;;202    
;;;203    /*---------------------------- DAC CR Configuration --------------------------*/
;;;204      /* Get the DAC CR value */
;;;205      tmpreg1 = DAC->CR;
000002  4c08              LDR      r4,|L11.36|
000004  6823              LDR      r3,[r4,#0]
;;;206      /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
;;;207      tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
000006  f64072fe          MOV      r2,#0xffe
00000a  4082              LSLS     r2,r2,r0
00000c  4393              BICS     r3,r3,r2
00000e  e9d12500          LDRD     r2,r5,[r1,#0]
;;;208      /* Configure for the selected DAC channel: buffer output, trigger, 
;;;209         wave generation, mask/amplitude for wave generation */
;;;210      /* Set TSELx and TENx bits according to DAC_Trigger value */
;;;211      /* Set WAVEx bits according to DAC_WaveGeneration value */
;;;212      /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
;;;213      /* Set BOFFx bit according to DAC_OutputBuffer value */   
;;;214      tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
000012  432a              ORRS     r2,r2,r5
000014  e9d15102          LDRD     r5,r1,[r1,#8]
000018  430d              ORRS     r5,r5,r1
00001a  432a              ORRS     r2,r2,r5
;;;215                 DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
;;;216                 DAC_InitStruct->DAC_OutputBuffer);
;;;217      /* Calculate CR register value depending on DAC_Channel */
;;;218      tmpreg1 |= tmpreg2 << DAC_Channel;
00001c  4082              LSLS     r2,r2,r0
00001e  431a              ORRS     r2,r2,r3
;;;219      /* Write to DAC CR */
;;;220      DAC->CR = tmpreg1;
000020  6022              STR      r2,[r4,#0]
;;;221    }
000022  bd30              POP      {r4,r5,pc}
;;;222    
                          ENDP

                  |L11.36|
                          DCD      0x40007400

                          AREA ||i.DAC_SetChannel1Data||, CODE, READONLY, ALIGN=2

                  DAC_SetChannel1Data PROC
;;;364      */
;;;365    void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
000000  4a03              LDR      r2,|L12.16|
;;;366    {  
000002  b508              PUSH     {r3,lr}
;;;367      __IO uint32_t tmp = 0;
;;;368      
;;;369      /* Check the parameters */
;;;370      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;371      assert_param(IS_DAC_DATA(Data));
;;;372      
;;;373      tmp = (uint32_t)DAC_BASE; 
;;;374      tmp += DHR12R1_OFFSET + DAC_Align;
000004  4410              ADD      r0,r0,r2
000006  3008              ADDS     r0,r0,#8
;;;375    
;;;376      /* Set the DAC channel1 selected data holding register */
;;;377      *(__IO uint32_t *) tmp = Data;
000008  9000              STR      r0,[sp,#0]
00000a  6001              STR      r1,[r0,#0]
;;;378    }
00000c  bd08              POP      {r3,pc}
;;;379    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      0x40007400

                          AREA ||i.DAC_SetChannel2Data||, CODE, READONLY, ALIGN=2

                  DAC_SetChannel2Data PROC
;;;389      */
;;;390    void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
000000  4a03              LDR      r2,|L13.16|
;;;391    {
000002  b508              PUSH     {r3,lr}
;;;392      __IO uint32_t tmp = 0;
;;;393    
;;;394      /* Check the parameters */
;;;395      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;396      assert_param(IS_DAC_DATA(Data));
;;;397      
;;;398      tmp = (uint32_t)DAC_BASE;
;;;399      tmp += DHR12R2_OFFSET + DAC_Align;
000004  4410              ADD      r0,r0,r2
000006  3014              ADDS     r0,r0,#0x14
;;;400    
;;;401      /* Set the DAC channel2 selected data holding register */
;;;402      *(__IO uint32_t *)tmp = Data;
000008  9000              STR      r0,[sp,#0]
00000a  6001              STR      r1,[r0,#0]
;;;403    }
00000c  bd08              POP      {r3,pc}
;;;404    
                          ENDP

00000e  0000              DCW      0x0000
                  |L13.16|
                          DCD      0x40007400

                          AREA ||i.DAC_SetDualChannelData||, CODE, READONLY, ALIGN=2

                  DAC_SetDualChannelData PROC
;;;417      */
;;;418    void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
000000  2808              CMP      r0,#8
;;;419    {
000002  d005              BEQ      |L14.16|
;;;420      uint32_t data = 0, tmp = 0;
;;;421      
;;;422      /* Check the parameters */
;;;423      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;424      assert_param(IS_DAC_DATA(Data1));
;;;425      assert_param(IS_DAC_DATA(Data2));
;;;426      
;;;427      /* Calculate and set dual DAC data holding register value */
;;;428      if (DAC_Align == DAC_Align_8b_R)
;;;429      {
;;;430        data = ((uint32_t)Data2 << 8) | Data1; 
;;;431      }
;;;432      else
;;;433      {
;;;434        data = ((uint32_t)Data2 << 16) | Data1;
000004  ea424101          ORR      r1,r2,r1,LSL #16
                  |L14.8|
;;;435      }
;;;436      
;;;437      tmp = (uint32_t)DAC_BASE;
000008  4a03              LDR      r2,|L14.24|
;;;438      tmp += DHR12RD_OFFSET + DAC_Align;
00000a  4410              ADD      r0,r0,r2
;;;439    
;;;440      /* Set the dual DAC selected data holding register */
;;;441      *(__IO uint32_t *)tmp = data;
00000c  6201              STR      r1,[r0,#0x20]
;;;442    }
00000e  4770              BX       lr
                  |L14.16|
000010  ea422101          ORR      r1,r2,r1,LSL #8       ;430
000014  e7f8              B        |L14.8|
;;;443    
                          ENDP

000016  0000              DCW      0x0000
                  |L14.24|
                          DCD      0x40007400

                          AREA ||i.DAC_SoftwareTriggerCmd||, CODE, READONLY, ALIGN=2

                  DAC_SoftwareTriggerCmd PROC
;;;280      */
;;;281    void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
000000  0902              LSRS     r2,r0,#4
;;;282    {
;;;283      /* Check the parameters */
;;;284      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;285      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;286    
;;;287      if (NewState != DISABLE)
;;;288      {
;;;289        /* Enable software trigger for the selected DAC channel */
;;;290        DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
000002  4b05              LDR      r3,|L15.24|
000004  2001              MOVS     r0,#1
000006  4090              LSLS     r0,r0,r2
000008  2900              CMP      r1,#0                 ;287
;;;291      }
;;;292      else
;;;293      {
;;;294        /* Disable software trigger for the selected DAC channel */
;;;295        DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
00000a  6819              LDR      r1,[r3,#0]
00000c  d001              BEQ      |L15.18|
00000e  4301              ORRS     r1,r1,r0              ;290
000010  e000              B        |L15.20|
                  |L15.18|
000012  4381              BICS     r1,r1,r0
                  |L15.20|
000014  6019              STR      r1,[r3,#0]            ;290
;;;296      }
;;;297    }
000016  4770              BX       lr
;;;298    
                          ENDP

                  |L15.24|
                          DCD      0x40007404

                          AREA ||i.DAC_StructInit||, CODE, READONLY, ALIGN=1

                  DAC_StructInit PROC
;;;228      */
;;;229    void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
000000  2100              MOVS     r1,#0
;;;230    {
;;;231    /*--------------- Reset DAC init structure parameters values -----------------*/
;;;232      /* Initialize the DAC_Trigger member */
;;;233      DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
;;;234      /* Initialize the DAC_WaveGeneration member */
;;;235      DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
000002  6001              STR      r1,[r0,#0]
;;;236      /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
;;;237      DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
000004  6041              STR      r1,[r0,#4]
;;;238      /* Initialize the DAC_OutputBuffer member */
;;;239      DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
000006  6081              STR      r1,[r0,#8]
000008  60c1              STR      r1,[r0,#0xc]
;;;240    }
00000a  4770              BX       lr
;;;241    
                          ENDP


                          AREA ||i.DAC_WaveGenerationCmd||, CODE, READONLY, ALIGN=2

                  DAC_WaveGenerationCmd PROC
;;;335      */
;;;336    void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
000000  4b04              LDR      r3,|L17.20|
;;;337    {
;;;338      /* Check the parameters */
;;;339      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;340      assert_param(IS_DAC_WAVE(DAC_Wave)); 
;;;341      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;342    
;;;343      if (NewState != DISABLE)
;;;344      {
;;;345        /* Enable the selected wave generation for the selected DAC channel */
;;;346        DAC->CR |= DAC_Wave << DAC_Channel;
000002  4081              LSLS     r1,r1,r0
;;;347      }
;;;348      else
;;;349      {
;;;350        /* Disable the selected wave generation for the selected DAC channel */
;;;351        DAC->CR &= ~(DAC_Wave << DAC_Channel);
000004  6818              LDR      r0,[r3,#0]
000006  b10a              CBZ      r2,|L17.12|
000008  4308              ORRS     r0,r0,r1              ;346
00000a  e000              B        |L17.14|
                  |L17.12|
00000c  4388              BICS     r0,r0,r1
                  |L17.14|
00000e  6018              STR      r0,[r3,#0]            ;346
;;;352      }
;;;353    }
000010  4770              BX       lr
;;;354    
                          ENDP

000012  0000              DCW      0x0000
                  |L17.20|
                          DCD      0x40007400

;*** Start embedded assembler ***

#line 1 "Libraries\\CMSIS\\stm32f4xx_dac.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f4xx_dac_c_4da4a0a9____REV16|
#line 114 ".\\Libraries\\CMSIS\\core_cmInstr.h"
|__asm___15_stm32f4xx_dac_c_4da4a0a9____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f4xx_dac_c_4da4a0a9____REVSH|
#line 128
|__asm___15_stm32f4xx_dac_c_4da4a0a9____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
