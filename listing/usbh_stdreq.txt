; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\media_usb_key\usbh_stdreq.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\media_usb_key\usbh_stdreq.d --cpu=Cortex-M4 --apcs=interwork -I.\Libraries -I.\Utilities -I.\Libraries\CMSIS\ST\STM32F4xx\Include -I.\inc -I.\src -I.\Libraries\STM32F4xx_StdPeriph_Driver -I.\Libraries\STM32_USB_HOST_Library -I.\Libraries\STM32_USB_OTG_Driver -I.\Utilities\STM32F4-Discovery -I.\Libraries\CMSIS -I.\Utilities\Third_Party\fat_fs -IC:\Keil4\ARM\RV31\INC -IC:\Keil4\ARM\CMSIS\Include -IC:\Keil4\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DUSE_USB_OTG_FS -DSTM32F4XX -DMEDIA_USB_KEY -D__FPU_PRESENT=0 --omf_browse=.\media_usb_key\usbh_stdreq.crf Libraries\STM32_USB_HOST_Library\usbh_stdreq.c]
                          THUMB

                          AREA ||i.USBH_ClrFeature||, CODE, READONLY, ALIGN=1

                  USBH_ClrFeature PROC
;;;286    */
;;;287    USBH_Status USBH_ClrFeature(USB_OTG_CORE_HANDLE *pdev,
000000  b430              PUSH     {r4,r5}
;;;288                                USBH_HOST *phost,
;;;289                                uint8_t ep_num, 
;;;290                                uint8_t hc_num) 
;;;291    {
;;;292      
;;;293      phost->Control.setup.b.bmRequestType = USB_H2D | 
000002  2402              MOVS     r4,#2
000004  750c              STRB     r4,[r1,#0x14]
;;;294                                             USB_REQ_RECIPIENT_ENDPOINT |
;;;295                                             USB_REQ_TYPE_STANDARD;
;;;296      
;;;297      phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
000006  2401              MOVS     r4,#1
000008  754c              STRB     r4,[r1,#0x15]
;;;298      phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
00000a  2400              MOVS     r4,#0
00000c  82cc              STRH     r4,[r1,#0x16]
;;;299      phost->Control.setup.b.wIndex.w = ep_num;
00000e  830a              STRH     r2,[r1,#0x18]
;;;300      phost->Control.setup.b.wLength.w = 0;           
;;;301      
;;;302      if ((ep_num & USB_REQ_DIR_MASK ) == USB_D2H)
000010  0615              LSLS     r5,r2,#24
000012  834c              STRH     r4,[r1,#0x1a]         ;300
;;;303      { /* EP Type is IN */
;;;304        pdev->host.hc[hc_num].toggle_in = 0; 
000014  eb001243          ADD      r2,r0,r3,LSL #5
000018  d502              BPL      |L1.32|
00001a  f88242c4          STRB     r4,[r2,#0x2c4]
00001e  e001              B        |L1.36|
                  |L1.32|
;;;305      }
;;;306      else
;;;307      {/* EP Type is OUT */
;;;308        pdev->host.hc[hc_num].toggle_out = 0; 
000020  f88242c5          STRB     r4,[r2,#0x2c5]
                  |L1.36|
;;;309      }
;;;310      
;;;311      return USBH_CtlReq(pdev, phost, 0 , 0 );   
000024  2300              MOVS     r3,#0
000026  bc30              POP      {r4,r5}
000028  461a              MOV      r2,r3
00002a  f7ffbffe          B.W      USBH_CtlReq
;;;312    }
;;;313    
                          ENDP


                          AREA ||i.USBH_GetDescriptor||, CODE, READONLY, ALIGN=1

                  USBH_GetDescriptor PROC
;;;209    */
;;;210    USBH_Status USBH_GetDescriptor(USB_OTG_CORE_HANDLE *pdev,
000000  b430              PUSH     {r4,r5}
;;;211                                   USBH_HOST           *phost,                                
;;;212                                   uint8_t  req_type,
;;;213                                   uint16_t value_idx, 
;;;214                                   uint8_t* buff, 
;;;215                                   uint16_t length )
;;;216    { 
;;;217      phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
000002  f0420280          ORR      r2,r2,#0x80
000006  e9dd5402          LDRD     r5,r4,[sp,#8]         ;216
00000a  750a              STRB     r2,[r1,#0x14]
;;;218      phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
00000c  2206              MOVS     r2,#6
00000e  754a              STRB     r2,[r1,#0x15]
;;;219      phost->Control.setup.b.wValue.w = value_idx;
;;;220      
;;;221      if ((value_idx & 0xff00) == USB_DESC_STRING)
000010  2203              MOVS     r2,#3
000012  82cb              STRH     r3,[r1,#0x16]         ;219
000014  ebb22f13          CMP      r2,r3,LSR #8
000018  d102              BNE      |L2.32|
;;;222      {
;;;223        phost->Control.setup.b.wIndex.w = 0x0409;
00001a  f2404209          MOV      r2,#0x409
00001e  e000              B        |L2.34|
                  |L2.32|
;;;224      }
;;;225      else
;;;226      {
;;;227        phost->Control.setup.b.wIndex.w = 0;
000020  2200              MOVS     r2,#0
                  |L2.34|
000022  830a              STRH     r2,[r1,#0x18]
;;;228      }
;;;229      phost->Control.setup.b.wLength.w = length;           
000024  834c              STRH     r4,[r1,#0x1a]
;;;230      return USBH_CtlReq(pdev, phost, buff , length );     
000026  4623              MOV      r3,r4
000028  462a              MOV      r2,r5
00002a  bc30              POP      {r4,r5}
00002c  f7ffbffe          B.W      USBH_CtlReq
;;;231    }
;;;232    
                          ENDP


                          AREA ||i.USBH_GetNextDesc||, CODE, READONLY, ALIGN=1

                  USBH_GetNextDesc PROC
;;;519    */
;;;520    static  USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
000000  880a              LDRH     r2,[r1,#0]
;;;521    {
;;;522      USBH_DescHeader_t  *pnext;
;;;523     
;;;524      *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
000002  7803              LDRB     r3,[r0,#0]
000004  441a              ADD      r2,r2,r3
000006  800a              STRH     r2,[r1,#0]
;;;525      pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
000008  7801              LDRB     r1,[r0,#0]
00000a  4408              ADD      r0,r0,r1
;;;526             ((USBH_DescHeader_t *)pbuf)->bLength);
;;;527     
;;;528      return(pnext);
;;;529    }
00000c  4770              BX       lr
;;;530    
                          ENDP


                          AREA ||i.USBH_Get_CfgDesc||, CODE, READONLY, ALIGN=1

                  USBH_Get_CfgDesc PROC
;;;141    */
;;;142    USBH_Status USBH_Get_CfgDesc(USB_OTG_CORE_HANDLE *pdev, 
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;143                                 USBH_HOST           *phost,                      
;;;144                                 uint16_t length)
;;;145    
;;;146    {
000004  4615              MOV      r5,r2
;;;147      USBH_Status status;
;;;148      
;;;149      if((status = USBH_GetDescriptor(pdev,
000006  f5007688          ADD      r6,r0,#0x110
00000a  e9cd6500          STRD     r6,r5,[sp,#0]
00000e  460c              MOV      r4,r1                 ;146
000010  f44f7300          MOV      r3,#0x200
000014  2200              MOVS     r2,#0
000016  f7fffffe          BL       USBH_GetDescriptor
00001a  0007              MOVS     r7,r0
00001c  d109              BNE      |L4.50|
;;;150                                      phost,
;;;151                                      USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
;;;152                                      USB_DESC_CONFIGURATION, 
;;;153                                      pdev->host.Rx_Buffer,
;;;154                                      length)) == USBH_OK)
;;;155      {
;;;156        /* Commands successfully sent and Response Received  */       
;;;157        USBH_ParseCfgDesc (&phost->device_prop.Cfg_Desc,
00001e  4633              MOV      r3,r6
000020  f1040250          ADD      r2,r4,#0x50
000024  f104013e          ADD      r1,r4,#0x3e
000028  f1040034          ADD      r0,r4,#0x34
00002c  9500              STR      r5,[sp,#0]
00002e  f7fffffe          BL       USBH_ParseCfgDesc
                  |L4.50|
;;;158                           phost->device_prop.Itf_Desc,
;;;159                           phost->device_prop.Ep_Desc[0], 
;;;160                           pdev->host.Rx_Buffer,
;;;161                           length); 
;;;162        
;;;163      }
;;;164      return status;
000032  4638              MOV      r0,r7
;;;165    }
000034  e8bd81fc          POP      {r2-r8,pc}
;;;166    
                          ENDP


                          AREA ||i.USBH_Get_DevDesc||, CODE, READONLY, ALIGN=1

                  USBH_Get_DevDesc PROC
;;;109    */
;;;110    USBH_Status USBH_Get_DevDesc(USB_OTG_CORE_HANDLE *pdev,
000000  b57c              PUSH     {r2-r6,lr}
;;;111                                 USBH_HOST *phost,
;;;112                                 uint8_t length)
;;;113    {
000002  4616              MOV      r6,r2
000004  4604              MOV      r4,r0
;;;114      
;;;115      USBH_Status status;
;;;116      
;;;117      if((status = USBH_GetDescriptor(pdev, 
000006  f5007088          ADD      r0,r0,#0x110
00000a  e9cd0600          STRD     r0,r6,[sp,#0]
00000e  460d              MOV      r5,r1                 ;113
000010  f44f7380          MOV      r3,#0x100
000014  2200              MOVS     r2,#0
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       USBH_GetDescriptor
00001c  2800              CMP      r0,#0
00001e  d130              BNE      |L5.130|
000020  f5047488          ADD      r4,r4,#0x110
000024  2e08              CMP      r6,#8
000026  7821              LDRB     r1,[r4,#0]
000028  f8051f22          STRB     r1,[r5,#0x22]!
00002c  7861              LDRB     r1,[r4,#1]
00002e  7069              STRB     r1,[r5,#1]
000030  78a1              LDRB     r1,[r4,#2]
000032  78e2              LDRB     r2,[r4,#3]
000034  eb012102          ADD      r1,r1,r2,LSL #8
000038  8069              STRH     r1,[r5,#2]
00003a  7921              LDRB     r1,[r4,#4]
00003c  7129              STRB     r1,[r5,#4]
00003e  7961              LDRB     r1,[r4,#5]
000040  7169              STRB     r1,[r5,#5]
000042  79a1              LDRB     r1,[r4,#6]
000044  71a9              STRB     r1,[r5,#6]
000046  79e1              LDRB     r1,[r4,#7]
000048  f5a47488          SUB      r4,r4,#0x110
00004c  71e9              STRB     r1,[r5,#7]
00004e  d918              BLS      |L5.130|
000050  f504748c          ADD      r4,r4,#0x118
000054  7821              LDRB     r1,[r4,#0]
000056  7862              LDRB     r2,[r4,#1]
000058  eb012102          ADD      r1,r1,r2,LSL #8
00005c  8129              STRH     r1,[r5,#8]
00005e  78a1              LDRB     r1,[r4,#2]
000060  78e2              LDRB     r2,[r4,#3]
000062  eb012102          ADD      r1,r1,r2,LSL #8
000066  8169              STRH     r1,[r5,#0xa]
000068  7921              LDRB     r1,[r4,#4]
00006a  7962              LDRB     r2,[r4,#5]
00006c  eb012102          ADD      r1,r1,r2,LSL #8
000070  81a9              STRH     r1,[r5,#0xc]
000072  79a1              LDRB     r1,[r4,#6]
000074  73a9              STRB     r1,[r5,#0xe]
000076  79e1              LDRB     r1,[r4,#7]
000078  73e9              STRB     r1,[r5,#0xf]
00007a  7a21              LDRB     r1,[r4,#8]
00007c  7429              STRB     r1,[r5,#0x10]
00007e  7a61              LDRB     r1,[r4,#9]
000080  7469              STRB     r1,[r5,#0x11]
                  |L5.130|
;;;118                                      phost,
;;;119                                      USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                          
;;;120                                      USB_DESC_DEVICE, 
;;;121                                      pdev->host.Rx_Buffer,
;;;122                                      length)) == USBH_OK)
;;;123      {
;;;124        /* Commands successfully sent and Response Received */       
;;;125        USBH_ParseDevDesc(&phost->device_prop.Dev_Desc, pdev->host.Rx_Buffer, length);
;;;126      }
;;;127      return status;      
;;;128    }
000082  bd7c              POP      {r2-r6,pc}
;;;129    
                          ENDP


                          AREA ||i.USBH_Get_StringDesc||, CODE, READONLY, ALIGN=1

                  USBH_Get_StringDesc PROC
;;;177    */
;;;178    USBH_Status USBH_Get_StringDesc(USB_OTG_CORE_HANDLE *pdev,
000000  b57c              PUSH     {r2-r6,lr}
;;;179                                    USBH_HOST *phost,
;;;180                                    uint8_t string_index, 
;;;181                                    uint8_t *buff, 
;;;182                                    uint16_t length)
;;;183    {
;;;184      USBH_Status status;
;;;185      
;;;186      if((status = USBH_GetDescriptor(pdev,
000002  f5007588          ADD      r5,r0,#0x110
000006  9e06              LDR      r6,[sp,#0x18]
000008  461c              MOV      r4,r3                 ;183
00000a  e9cd5600          STRD     r5,r6,[sp,#0]
00000e  f4427340          ORR      r3,r2,#0x300
000012  2200              MOVS     r2,#0
000014  f7fffffe          BL       USBH_GetDescriptor
000018  2800              CMP      r0,#0
00001a  d114              BNE      |L6.70|
00001c  7869              LDRB     r1,[r5,#1]
00001e  2903              CMP      r1,#3
000020  d111              BNE      |L6.70|
000022  7829              LDRB     r1,[r5,#0]
000024  1e8a              SUBS     r2,r1,#2
000026  42b2              CMP      r2,r6
000028  dc00              BGT      |L6.44|
00002a  4616              MOV      r6,r2
                  |L6.44|
00002c  1cad              ADDS     r5,r5,#2
00002e  b2b2              UXTH     r2,r6
000030  2100              MOVS     r1,#0
000032  e004              B        |L6.62|
                  |L6.52|
000034  5c6b              LDRB     r3,[r5,r1]
000036  1c89              ADDS     r1,r1,#2
000038  f8043b01          STRB     r3,[r4],#1
00003c  b289              UXTH     r1,r1
                  |L6.62|
00003e  4291              CMP      r1,r2
000040  d3f8              BCC      |L6.52|
000042  2100              MOVS     r1,#0
000044  7021              STRB     r1,[r4,#0]
                  |L6.70|
;;;187                                      phost,
;;;188                                      USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,                                    
;;;189                                      USB_DESC_STRING | string_index, 
;;;190                                      pdev->host.Rx_Buffer,
;;;191                                      length)) == USBH_OK)
;;;192      {
;;;193        /* Commands successfully sent and Response Received  */       
;;;194        USBH_ParseStringDesc(pdev->host.Rx_Buffer,buff, length);    
;;;195      }
;;;196      return status;
;;;197    }
000046  bd7c              POP      {r2-r6,pc}
;;;198    
                          ENDP


                          AREA ||i.USBH_ParseCfgDesc||, CODE, READONLY, ALIGN=1

                  USBH_ParseCfgDesc PROC
;;;356    */
;;;357    static void  USBH_ParseCfgDesc (USBH_CfgDesc_TypeDef* cfg_desc,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;358                                    USBH_InterfaceDesc_TypeDef* itf_desc,
;;;359                                    USBH_EpDesc_TypeDef*  ep_desc, 
;;;360                                    uint8_t *buf, 
;;;361                                    uint16_t length)
;;;362    {  
000004  4690              MOV      r8,r2
000006  4689              MOV      r9,r1
000008  4606              MOV      r6,r0
;;;363      USBH_InterfaceDesc_TypeDef    *pif ;
;;;364      USBH_EpDesc_TypeDef           *pep;  
;;;365      USBH_DescHeader_t             *pdesc = (USBH_DescHeader_t *)buf;
;;;366      uint16_t                      ptr;
;;;367      int8_t                        if_ix;
;;;368      int8_t                        ep_ix;  
;;;369      
;;;370      pdesc   = (USBH_DescHeader_t *)buf;
;;;371      
;;;372      /* Parse configuration descriptor */
;;;373      cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
00000a  7819              LDRB     r1,[r3,#0]
00000c  9a08              LDR      r2,[sp,#0x20]
00000e  7031              STRB     r1,[r6,#0]
;;;374      cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
000010  7859              LDRB     r1,[r3,#1]
000012  7071              STRB     r1,[r6,#1]
;;;375      cfg_desc->wTotalLength        = LE16 (buf + 2);
000014  7899              LDRB     r1,[r3,#2]
000016  78dc              LDRB     r4,[r3,#3]
000018  4618              MOV      r0,r3                 ;365
00001a  eb012104          ADD      r1,r1,r4,LSL #8
00001e  8071              STRH     r1,[r6,#2]
;;;376      cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
000020  7919              LDRB     r1,[r3,#4]
000022  7131              STRB     r1,[r6,#4]
;;;377      cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
000024  795c              LDRB     r4,[r3,#5]
000026  7174              STRB     r4,[r6,#5]
;;;378      cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
000028  799c              LDRB     r4,[r3,#6]
00002a  71b4              STRB     r4,[r6,#6]
;;;379      cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
00002c  79dc              LDRB     r4,[r3,#7]
00002e  71f4              STRB     r4,[r6,#7]
;;;380      cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
000030  7a03              LDRB     r3,[r0,#8]
000032  7233              STRB     r3,[r6,#8]
;;;381      
;;;382      
;;;383      if (length > USB_CONFIGURATION_DESC_SIZE)
000034  2a09              CMP      r2,#9
000036  d915              BLS      |L7.100|
;;;384      {
;;;385        ptr = USB_LEN_CFG_DESC;
000038  2209              MOVS     r2,#9
00003a  f8ad2000          STRH     r2,[sp,#0]
;;;386        
;;;387        if ( cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES) 
00003e  2902              CMP      r1,#2
000040  d810              BHI      |L7.100|
;;;388        {
;;;389          if_ix = 0;
000042  2700              MOVS     r7,#0
;;;390          pif = (USBH_InterfaceDesc_TypeDef *)0;
;;;391          
;;;392          /* Parse Interface descriptor relative to the current configuration */
;;;393          if(cfg_desc->bNumInterfaces <= USBH_MAX_NUM_INTERFACES)
000044  e00b              B        |L7.94|
                  |L7.70|
;;;394          {
;;;395            while (if_ix < cfg_desc->bNumInterfaces) 
;;;396            {
;;;397              pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
000046  4669              MOV      r1,sp
000048  f7fffffe          BL       USBH_GetNextDesc
;;;398              if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
00004c  7841              LDRB     r1,[r0,#1]
00004e  2904              CMP      r1,#4
000050  d00a              BEQ      |L7.104|
;;;399              {  
;;;400                pif               = &itf_desc[if_ix];
;;;401                USBH_ParseInterfaceDesc (pif, (uint8_t *)pdesc);
;;;402                ep_ix = 0;
;;;403                
;;;404                /* Parse Ep descriptors relative to the current interface */
;;;405                if(pif->bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS)
;;;406                {          
;;;407                  while (ep_ix < pif->bNumEndpoints) 
;;;408                  {
;;;409                    pdesc = USBH_GetNextDesc((void* )pdesc, &ptr);
;;;410                    if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
;;;411                    {  
;;;412                      pep               = &ep_desc[ep_ix];
;;;413                      USBH_ParseEPDesc (pep, (uint8_t *)pdesc);
;;;414                      ep_ix++;
;;;415                    }
;;;416                    else
;;;417                    {
;;;418                      ptr += pdesc->bLength;
;;;419                    }
;;;420                  }
;;;421                }
;;;422                if_ix++;
;;;423              }
;;;424              else
;;;425              {
;;;426                ptr += pdesc->bLength;
000052  7801              LDRB     r1,[r0,#0]
000054  f8bd2000          LDRH     r2,[sp,#0]
000058  4411              ADD      r1,r1,r2
00005a  f8ad1000          STRH     r1,[sp,#0]
                  |L7.94|
00005e  7931              LDRB     r1,[r6,#4]            ;395
000060  42b9              CMP      r1,r7                 ;395
000062  dcf0              BGT      |L7.70|
                  |L7.100|
;;;427              }
;;;428            }
;;;429          }
;;;430        }
;;;431      }  
;;;432    }
000064  e8bd83f8          POP      {r3-r9,pc}
                  |L7.104|
000068  eb0702c7          ADD      r2,r7,r7,LSL #3       ;400
00006c  eb020409          ADD      r4,r2,r9              ;400
000070  7801              LDRB     r1,[r0,#0]            ;400
000072  7021              STRB     r1,[r4,#0]            ;400
000074  7841              LDRB     r1,[r0,#1]            ;400
000076  7061              STRB     r1,[r4,#1]            ;400
000078  7881              LDRB     r1,[r0,#2]            ;400
00007a  70a1              STRB     r1,[r4,#2]            ;400
00007c  78c1              LDRB     r1,[r0,#3]            ;400
00007e  70e1              STRB     r1,[r4,#3]            ;400
000080  7901              LDRB     r1,[r0,#4]            ;400
000082  7121              STRB     r1,[r4,#4]            ;400
000084  7941              LDRB     r1,[r0,#5]            ;400
000086  7161              STRB     r1,[r4,#5]            ;400
000088  7981              LDRB     r1,[r0,#6]            ;400
00008a  71a1              STRB     r1,[r4,#6]            ;400
00008c  79c1              LDRB     r1,[r0,#7]            ;400
00008e  71e1              STRB     r1,[r4,#7]            ;400
000090  7a01              LDRB     r1,[r0,#8]            ;400
000092  7221              STRB     r1,[r4,#8]            ;400
000094  7921              LDRB     r1,[r4,#4]            ;405
000096  2500              MOVS     r5,#0                 ;402
000098  2902              CMP      r1,#2                 ;405
00009a  d90c              BLS      |L7.182|
00009c  e00e              B        |L7.188|
                  |L7.158|
00009e  4669              MOV      r1,sp                 ;409
0000a0  f7fffffe          BL       USBH_GetNextDesc
0000a4  7841              LDRB     r1,[r0,#1]            ;410
0000a6  2905              CMP      r1,#5                 ;410
0000a8  d00b              BEQ      |L7.194|
0000aa  7801              LDRB     r1,[r0,#0]            ;418
0000ac  f8bd2000          LDRH     r2,[sp,#0]            ;418
0000b0  4411              ADD      r1,r1,r2              ;418
0000b2  f8ad1000          STRH     r1,[sp,#0]            ;418
                  |L7.182|
0000b6  7921              LDRB     r1,[r4,#4]            ;407
0000b8  42a9              CMP      r1,r5                 ;407
0000ba  dcf0              BGT      |L7.158|
                  |L7.188|
0000bc  1c7f              ADDS     r7,r7,#1              ;422
0000be  b27f              SXTB     r7,r7                 ;422
0000c0  e7cd              B        |L7.94|
                  |L7.194|
0000c2  eb0801c5          ADD      r1,r8,r5,LSL #3       ;412
0000c6  7802              LDRB     r2,[r0,#0]            ;412
0000c8  700a              STRB     r2,[r1,#0]            ;412
0000ca  7842              LDRB     r2,[r0,#1]            ;412
0000cc  704a              STRB     r2,[r1,#1]            ;412
0000ce  7882              LDRB     r2,[r0,#2]            ;412
0000d0  708a              STRB     r2,[r1,#2]            ;412
0000d2  78c2              LDRB     r2,[r0,#3]            ;412
0000d4  70ca              STRB     r2,[r1,#3]            ;412
0000d6  7902              LDRB     r2,[r0,#4]            ;412
0000d8  7943              LDRB     r3,[r0,#5]            ;412
0000da  1c6d              ADDS     r5,r5,#1              ;414
0000dc  eb022203          ADD      r2,r2,r3,LSL #8       ;414
0000e0  808a              STRH     r2,[r1,#4]            ;414
0000e2  7982              LDRB     r2,[r0,#6]            ;414
0000e4  718a              STRB     r2,[r1,#6]            ;414
0000e6  b26d              SXTB     r5,r5                 ;414
0000e8  e7e5              B        |L7.182|
;;;433    
                          ENDP


                          AREA ||i.USBH_SetAddress||, CODE, READONLY, ALIGN=1

                  USBH_SetAddress PROC
;;;239    */
;;;240    USBH_Status USBH_SetAddress(USB_OTG_CORE_HANDLE *pdev, 
000000  b430              PUSH     {r4,r5}
;;;241                                USBH_HOST *phost,
;;;242                                uint8_t DeviceAddress)
;;;243    {
;;;244      phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
000002  2300              MOVS     r3,#0
000004  750b              STRB     r3,[r1,#0x14]
;;;245        USB_REQ_TYPE_STANDARD;
;;;246      
;;;247      phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
000006  2405              MOVS     r4,#5
000008  754c              STRB     r4,[r1,#0x15]
;;;248      
;;;249      phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
00000a  82ca              STRH     r2,[r1,#0x16]
;;;250      phost->Control.setup.b.wIndex.w = 0;
00000c  830b              STRH     r3,[r1,#0x18]
;;;251      phost->Control.setup.b.wLength.w = 0;
00000e  834b              STRH     r3,[r1,#0x1a]
;;;252      
;;;253      return USBH_CtlReq(pdev, phost, 0 , 0 );
000010  bc30              POP      {r4,r5}
000012  461a              MOV      r2,r3
000014  f7ffbffe          B.W      USBH_CtlReq
;;;254    }
;;;255    
                          ENDP


                          AREA ||i.USBH_SetCfg||, CODE, READONLY, ALIGN=1

                  USBH_SetCfg PROC
;;;262    */
;;;263    USBH_Status USBH_SetCfg(USB_OTG_CORE_HANDLE *pdev, 
000000  b430              PUSH     {r4,r5}
;;;264                            USBH_HOST *phost,
;;;265                            uint16_t cfg_idx)
;;;266    {
;;;267      
;;;268      phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
000002  2300              MOVS     r3,#0
000004  750b              STRB     r3,[r1,#0x14]
;;;269        USB_REQ_TYPE_STANDARD;
;;;270      phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
000006  2409              MOVS     r4,#9
000008  754c              STRB     r4,[r1,#0x15]
;;;271      phost->Control.setup.b.wValue.w = cfg_idx;
00000a  82ca              STRH     r2,[r1,#0x16]
;;;272      phost->Control.setup.b.wIndex.w = 0;
00000c  830b              STRH     r3,[r1,#0x18]
;;;273      phost->Control.setup.b.wLength.w = 0;           
00000e  834b              STRH     r3,[r1,#0x1a]
;;;274      
;;;275      return USBH_CtlReq(pdev, phost, 0 , 0 );      
000010  bc30              POP      {r4,r5}
000012  461a              MOV      r2,r3
000014  f7ffbffe          B.W      USBH_CtlReq
;;;276    }
;;;277    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\STM32_USB_HOST_Library\\usbh_stdreq.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_usbh_stdreq_c_3531d2fa____REV16|
#line 114 ".\\Libraries\\CMSIS\\core_cmInstr.h"
|__asm___13_usbh_stdreq_c_3531d2fa____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_usbh_stdreq_c_3531d2fa____REVSH|
#line 128
|__asm___13_usbh_stdreq_c_3531d2fa____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
