; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\media_usb_key\usbh_msc_fatfs.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\media_usb_key\usbh_msc_fatfs.d --cpu=Cortex-M4 --apcs=interwork -I.\Libraries -I.\Utilities -I.\Libraries\CMSIS\ST\STM32F4xx\Include -I.\inc -I.\src -I.\Libraries\STM32F4xx_StdPeriph_Driver -I.\Libraries\STM32_USB_HOST_Library -I.\Libraries\STM32_USB_OTG_Driver -I.\Utilities\STM32F4-Discovery -I.\Libraries\CMSIS -I.\Utilities\Third_Party\fat_fs -IC:\Keil4\ARM\RV31\INC -IC:\Keil4\ARM\CMSIS\Include -IC:\Keil4\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DUSE_USB_OTG_FS -DSTM32F4XX -DMEDIA_USB_KEY -D__FPU_PRESENT=0 --omf_browse=.\media_usb_key\usbh_msc_fatfs.crf Libraries\STM32_USB_HOST_Library\usbh_msc_fatfs.c]
                          THUMB

                          AREA ||i.disk_initialize||, CODE, READONLY, ALIGN=2

                  disk_initialize PROC
;;;19     
;;;20     DSTATUS disk_initialize (
000000  b510              PUSH     {r4,lr}
;;;21                              BYTE drv		/* Physical drive number (0) */
;;;22                                )
;;;23     {
;;;24       
;;;25       if(HCD_IsDeviceConnected(&USB_OTG_Core))
000002  4805              LDR      r0,|L1.24|
000004  f7fffffe          BL       HCD_IsDeviceConnected
;;;26       {  
;;;27         Stat &= ~STA_NOINIT;
000008  4904              LDR      r1,|L1.28|
00000a  b118              CBZ      r0,|L1.20|
00000c  7808              LDRB     r0,[r1,#0]  ; Stat
00000e  f0200001          BIC      r0,r0,#1
000012  7008              STRB     r0,[r1,#0]
                  |L1.20|
;;;28       }
;;;29       
;;;30       return Stat;
000014  7808              LDRB     r0,[r1,#0]  ; Stat
;;;31       
;;;32       
;;;33     }
000016  bd10              POP      {r4,pc}
;;;34     
                          ENDP

                  |L1.24|
                          DCD      USB_OTG_Core
                  |L1.28|
                          DCD      ||.data||

                          AREA ||i.disk_ioctl||, CODE, READONLY, ALIGN=2

                  disk_ioctl PROC
;;;139    #if _USE_IOCTL != 0
;;;140    DRESULT disk_ioctl (
000000  b978              CBNZ     r0,|L2.34|
;;;141                        BYTE drv,		/* Physical drive number (0) */
;;;142                        BYTE ctrl,		/* Control code */
;;;143                        void *buff		/* Buffer to send/receive control data */
;;;144                          )
;;;145    {
;;;146      DRESULT res = RES_OK;
;;;147      
;;;148      if (drv) return RES_PARERR;
;;;149      
;;;150      res = RES_ERROR;
;;;151      
;;;152      if (Stat & STA_NOINIT) return RES_NOTRDY;
000002  4b0d              LDR      r3,|L2.56|
000004  2001              MOVS     r0,#1                 ;150
000006  781b              LDRB     r3,[r3,#0]  ; Stat
000008  07db              LSLS     r3,r3,#31
00000a  d001              BEQ      |L2.16|
00000c  2003              MOVS     r0,#3
;;;153      
;;;154      switch (ctrl) {
;;;155      case CTRL_SYNC :		/* Make sure that no pending write process */
;;;156        
;;;157        res = RES_OK;
;;;158        break;
;;;159        
;;;160      case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
;;;161        
;;;162        *(DWORD*)buff = (DWORD) USBH_MSC_Param.MSCapacity;
;;;163        res = RES_OK;
;;;164        break;
;;;165        
;;;166      case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
;;;167        *(WORD*)buff = 512;
;;;168        res = RES_OK;
;;;169        break;
;;;170        
;;;171      case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
;;;172        
;;;173        *(DWORD*)buff = 512;
;;;174        
;;;175        break;
;;;176        
;;;177        
;;;178      default:
;;;179        res = RES_PARERR;
;;;180      }
;;;181      
;;;182      
;;;183      
;;;184      return res;
;;;185    }
00000e  4770              BX       lr
                  |L2.16|
000010  b171              CBZ      r1,|L2.48|
000012  2901              CMP      r1,#1                 ;154
000014  d007              BEQ      |L2.38|
000016  f44f7300          MOV      r3,#0x200             ;167
00001a  2902              CMP      r1,#2                 ;154
00001c  d007              BEQ      |L2.46|
00001e  2903              CMP      r1,#3                 ;154
000020  d008              BEQ      |L2.52|
                  |L2.34|
000022  2004              MOVS     r0,#4                 ;179
000024  4770              BX       lr
                  |L2.38|
000026  4805              LDR      r0,|L2.60|
000028  6800              LDR      r0,[r0,#0]            ;162  ; USBH_MSC_Param
00002a  6010              STR      r0,[r2,#0]            ;164
00002c  e000              B        |L2.48|
                  |L2.46|
00002e  8013              STRH     r3,[r2,#0]            ;167
                  |L2.48|
000030  2000              MOVS     r0,#0                 ;168
000032  4770              BX       lr
                  |L2.52|
000034  6013              STR      r3,[r2,#0]            ;173
000036  4770              BX       lr
;;;186    #endif /* _USE_IOCTL != 0 */
                          ENDP

                  |L2.56|
                          DCD      ||.data||
                  |L2.60|
                          DCD      USBH_MSC_Param

                          AREA ||i.disk_read||, CODE, READONLY, ALIGN=2

                  disk_read PROC
;;;54     
;;;55     DRESULT disk_read (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;56                        BYTE drv,			/* Physical drive number (0) */
;;;57                        BYTE *buff,			/* Pointer to the data buffer to store read data */
;;;58                        DWORD sector,		/* Start sector number (LBA) */
;;;59                        BYTE count			/* Sector count (1..255) */
;;;60                          )
;;;61     {
000004  461c              MOV      r4,r3
000006  4615              MOV      r5,r2
000008  460e              MOV      r6,r1
00000a  b938              CBNZ     r0,|L3.28|
;;;62       BYTE status = USBH_MSC_OK;
;;;63       
;;;64       if (drv || !count) return RES_PARERR;
00000c  b134              CBZ      r4,|L3.28|
;;;65       if (Stat & STA_NOINIT) return RES_NOTRDY;
00000e  4812              LDR      r0,|L3.88|
000010  7800              LDRB     r0,[r0,#0]  ; Stat
000012  07c0              LSLS     r0,r0,#31
000014  d004              BEQ      |L3.32|
000016  2003              MOVS     r0,#3
                  |L3.24|
;;;66       
;;;67       
;;;68       if(HCD_IsDeviceConnected(&USB_OTG_Core))
;;;69       {  
;;;70         
;;;71         do
;;;72         {
;;;73           status = USBH_MSC_Read10(&USB_OTG_Core, buff, sector, 512*count);
;;;74           USBH_MSC_HandleBOTXfer(&USB_OTG_Core ,&USB_Host);
;;;75           
;;;76           if(!HCD_IsDeviceConnected(&USB_OTG_Core))
;;;77           { 
;;;78             return RES_ERROR;
;;;79           }      
;;;80         }
;;;81         while(status == USBH_MSC_BUSY );
;;;82       }
;;;83       
;;;84       if(status == USBH_MSC_OK)
;;;85         return RES_OK;
;;;86       return RES_ERROR;
;;;87       
;;;88     }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L3.28|
00001c  2004              MOVS     r0,#4                 ;64
00001e  e7fb              B        |L3.24|
                  |L3.32|
000020  480e              LDR      r0,|L3.92|
000022  f7fffffe          BL       HCD_IsDeviceConnected
000026  b1a0              CBZ      r0,|L3.82|
000028  0264              LSLS     r4,r4,#9              ;73
                  |L3.42|
00002a  4623              MOV      r3,r4                 ;73
00002c  462a              MOV      r2,r5                 ;73
00002e  4631              MOV      r1,r6                 ;73
000030  480a              LDR      r0,|L3.92|
000032  f7fffffe          BL       USBH_MSC_Read10
000036  4607              MOV      r7,r0                 ;73
000038  4909              LDR      r1,|L3.96|
00003a  4808              LDR      r0,|L3.92|
00003c  f7fffffe          BL       USBH_MSC_HandleBOTXfer
000040  4806              LDR      r0,|L3.92|
000042  f7fffffe          BL       HCD_IsDeviceConnected
000046  b110              CBZ      r0,|L3.78|
000048  2f03              CMP      r7,#3                 ;81
00004a  d0ee              BEQ      |L3.42|
00004c  b10f              CBZ      r7,|L3.82|
                  |L3.78|
00004e  2001              MOVS     r0,#1                 ;86
000050  e7e2              B        |L3.24|
                  |L3.82|
000052  2000              MOVS     r0,#0                 ;85
000054  e7e0              B        |L3.24|
;;;89     
                          ENDP

000056  0000              DCW      0x0000
                  |L3.88|
                          DCD      ||.data||
                  |L3.92|
                          DCD      USB_OTG_Core
                  |L3.96|
                          DCD      USB_Host

                          AREA ||i.disk_status||, CODE, READONLY, ALIGN=2

                  disk_status PROC
;;;40     
;;;41     DSTATUS disk_status (
000000  b108              CBZ      r0,|L4.6|
;;;42                          BYTE drv		/* Physical drive number (0) */
;;;43                            )
;;;44     {
;;;45       if (drv) return STA_NOINIT;		/* Supports only single drive */
000002  2001              MOVS     r0,#1
;;;46       return Stat;
;;;47     }
000004  4770              BX       lr
                  |L4.6|
000006  4801              LDR      r0,|L4.12|
000008  7800              LDRB     r0,[r0,#0]            ;46  ; Stat
00000a  4770              BX       lr
;;;48     
                          ENDP

                  |L4.12|
                          DCD      ||.data||

                          AREA ||i.disk_write||, CODE, READONLY, ALIGN=2

                  disk_write PROC
;;;96     #if _READONLY == 0
;;;97     DRESULT disk_write (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;98                         BYTE drv,			/* Physical drive number (0) */
;;;99                         const BYTE *buff,	/* Pointer to the data to be written */
;;;100                        DWORD sector,		/* Start sector number (LBA) */
;;;101                        BYTE count			/* Sector count (1..255) */
;;;102                          )
;;;103    {
000004  461c              MOV      r4,r3
000006  4615              MOV      r5,r2
000008  460e              MOV      r6,r1
00000a  b938              CBNZ     r0,|L5.28|
;;;104      BYTE status = USBH_MSC_OK;
;;;105      if (drv || !count) return RES_PARERR;
00000c  b134              CBZ      r4,|L5.28|
;;;106      if (Stat & STA_NOINIT) return RES_NOTRDY;
00000e  4814              LDR      r0,|L5.96|
000010  7801              LDRB     r1,[r0,#0]  ; Stat
000012  07c9              LSLS     r1,r1,#31
000014  d004              BEQ      |L5.32|
000016  2003              MOVS     r0,#3
                  |L5.24|
;;;107      if (Stat & STA_PROTECT) return RES_WRPRT;
;;;108      
;;;109      
;;;110      if(HCD_IsDeviceConnected(&USB_OTG_Core))
;;;111      {  
;;;112        do
;;;113        {
;;;114          status = USBH_MSC_Write10(&USB_OTG_Core,(BYTE*)buff, sector, 512*count);
;;;115          USBH_MSC_HandleBOTXfer(&USB_OTG_Core, &USB_Host);
;;;116          
;;;117          if(!HCD_IsDeviceConnected(&USB_OTG_Core))
;;;118          { 
;;;119            return RES_ERROR;
;;;120          }
;;;121        }
;;;122        
;;;123        while(status == USBH_MSC_BUSY );
;;;124        
;;;125      }
;;;126      
;;;127      if(status == USBH_MSC_OK)
;;;128        return RES_OK;
;;;129      return RES_ERROR;
;;;130    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L5.28|
00001c  2004              MOVS     r0,#4                 ;105
00001e  e7fb              B        |L5.24|
                  |L5.32|
000020  7800              LDRB     r0,[r0,#0]            ;107  ; Stat
000022  0740              LSLS     r0,r0,#29             ;107
000024  d501              BPL      |L5.42|
000026  2002              MOVS     r0,#2                 ;107
000028  e7f6              B        |L5.24|
                  |L5.42|
00002a  480e              LDR      r0,|L5.100|
00002c  f7fffffe          BL       HCD_IsDeviceConnected
000030  b1a0              CBZ      r0,|L5.92|
000032  0264              LSLS     r4,r4,#9              ;114
                  |L5.52|
000034  4623              MOV      r3,r4                 ;114
000036  462a              MOV      r2,r5                 ;114
000038  4631              MOV      r1,r6                 ;114
00003a  480a              LDR      r0,|L5.100|
00003c  f7fffffe          BL       USBH_MSC_Write10
000040  4607              MOV      r7,r0                 ;114
000042  4909              LDR      r1,|L5.104|
000044  4807              LDR      r0,|L5.100|
000046  f7fffffe          BL       USBH_MSC_HandleBOTXfer
00004a  4806              LDR      r0,|L5.100|
00004c  f7fffffe          BL       HCD_IsDeviceConnected
000050  b110              CBZ      r0,|L5.88|
000052  2f03              CMP      r7,#3                 ;123
000054  d0ee              BEQ      |L5.52|
000056  b10f              CBZ      r7,|L5.92|
                  |L5.88|
000058  2001              MOVS     r0,#1                 ;129
00005a  e7dd              B        |L5.24|
                  |L5.92|
00005c  2000              MOVS     r0,#0                 ;128
00005e  e7db              B        |L5.24|
;;;131    #endif /* _READONLY == 0 */
                          ENDP

                  |L5.96|
                          DCD      ||.data||
                  |L5.100|
                          DCD      USB_OTG_Core
                  |L5.104|
                          DCD      USB_Host

                          AREA ||.data||, DATA, ALIGN=0

                  Stat
000000  01                DCB      0x01

;*** Start embedded assembler ***

#line 1 "Libraries\\STM32_USB_HOST_Library\\usbh_msc_fatfs.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_usbh_msc_fatfs_c_b3252454____REV16|
#line 114 ".\\Libraries\\CMSIS\\core_cmInstr.h"
|__asm___16_usbh_msc_fatfs_c_b3252454____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_usbh_msc_fatfs_c_b3252454____REVSH|
#line 128
|__asm___16_usbh_msc_fatfs_c_b3252454____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
