; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\MEDIA_USB_KEY\stm32f4xx_gpio.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\MEDIA_USB_KEY\stm32f4xx_gpio.d --cpu=Cortex-M4 --apcs=interwork -I.\Libraries -I.\Utilities -I.\Libraries\CMSIS\ST\STM32F4xx\Include -I.\inc -I.\src -I.\Libraries\STM32F4xx_StdPeriph_Driver -I.\Libraries\STM32_USB_HOST_Library -I.\Libraries\STM32_USB_OTG_Driver -I.\Utilities\STM32F4-Discovery -I.\Libraries\CMSIS -I.\Utilities\Third_Party\fat_fs -IC:\Keil4\ARM\RV31\INC -IC:\Keil4\ARM\CMSIS\Include -IC:\Keil4\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DUSE_USB_OTG_FS -DSTM32F4XX -DMEDIA_USB_KEY -D__FPU_PRESENT=0 --omf_browse=.\MEDIA_USB_KEY\stm32f4xx_gpio.crf Libraries\CMSIS\stm32f4xx_gpio.c]
                          THUMB

                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;119      */
;;;120    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  492f              LDR      r1,|L1.192|
;;;121    {
000002  b510              PUSH     {r4,lr}
;;;122      /* Check the parameters */
;;;123      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;124    
;;;125      if (GPIOx == GPIOA)
000004  4288              CMP      r0,r1
000006  d106              BNE      |L1.22|
;;;126      {
;;;127        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
000008  2101              MOVS     r1,#1
00000a  4608              MOV      r0,r1
00000c  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;128        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
000010  2100              MOVS     r1,#0
000012  2001              MOVS     r0,#1
000014  e04f              B        |L1.182|
                  |L1.22|
;;;129      }
;;;130      else if (GPIOx == GPIOB)
000016  492b              LDR      r1,|L1.196|
000018  4288              CMP      r0,r1
00001a  d106              BNE      |L1.42|
;;;131      {
;;;132        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
00001c  2101              MOVS     r1,#1
00001e  2002              MOVS     r0,#2
000020  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;133        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
000024  2100              MOVS     r1,#0
000026  2002              MOVS     r0,#2
000028  e045              B        |L1.182|
                  |L1.42|
;;;134      }
;;;135      else if (GPIOx == GPIOC)
00002a  4927              LDR      r1,|L1.200|
00002c  4288              CMP      r0,r1
00002e  d106              BNE      |L1.62|
;;;136      {
;;;137        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
000030  2101              MOVS     r1,#1
000032  2004              MOVS     r0,#4
000034  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;138        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
000038  2100              MOVS     r1,#0
00003a  2004              MOVS     r0,#4
00003c  e03b              B        |L1.182|
                  |L1.62|
;;;139      }
;;;140      else if (GPIOx == GPIOD)
00003e  4923              LDR      r1,|L1.204|
000040  4288              CMP      r0,r1
000042  d106              BNE      |L1.82|
;;;141      {
;;;142        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
000044  2101              MOVS     r1,#1
000046  2008              MOVS     r0,#8
000048  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;143        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
00004c  2100              MOVS     r1,#0
00004e  2008              MOVS     r0,#8
000050  e031              B        |L1.182|
                  |L1.82|
;;;144      }
;;;145      else if (GPIOx == GPIOE)
000052  491f              LDR      r1,|L1.208|
000054  4288              CMP      r0,r1
000056  d106              BNE      |L1.102|
;;;146      {
;;;147        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
000058  2101              MOVS     r1,#1
00005a  2010              MOVS     r0,#0x10
00005c  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;148        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
000060  2100              MOVS     r1,#0
000062  2010              MOVS     r0,#0x10
000064  e027              B        |L1.182|
                  |L1.102|
;;;149      }
;;;150      else if (GPIOx == GPIOF)
000066  491b              LDR      r1,|L1.212|
000068  4288              CMP      r0,r1
00006a  d106              BNE      |L1.122|
;;;151      {
;;;152        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
00006c  2101              MOVS     r1,#1
00006e  2020              MOVS     r0,#0x20
000070  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;153        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
000074  2100              MOVS     r1,#0
000076  2020              MOVS     r0,#0x20
000078  e01d              B        |L1.182|
                  |L1.122|
;;;154      }
;;;155      else if (GPIOx == GPIOG)
00007a  4917              LDR      r1,|L1.216|
00007c  4288              CMP      r0,r1
00007e  d106              BNE      |L1.142|
;;;156      {
;;;157        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
000080  2101              MOVS     r1,#1
000082  2040              MOVS     r0,#0x40
000084  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;158        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
000088  2100              MOVS     r1,#0
00008a  2040              MOVS     r0,#0x40
00008c  e013              B        |L1.182|
                  |L1.142|
;;;159      }
;;;160      else if (GPIOx == GPIOH)
00008e  4913              LDR      r1,|L1.220|
000090  4288              CMP      r0,r1
000092  d106              BNE      |L1.162|
;;;161      {
;;;162        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
000094  2101              MOVS     r1,#1
000096  2080              MOVS     r0,#0x80
000098  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;163        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
00009c  2100              MOVS     r1,#0
00009e  2080              MOVS     r0,#0x80
0000a0  e009              B        |L1.182|
                  |L1.162|
;;;164      }
;;;165      else
;;;166      {
;;;167        if (GPIOx == GPIOI)
0000a2  490f              LDR      r1,|L1.224|
0000a4  4288              CMP      r0,r1
0000a6  d10a              BNE      |L1.190|
;;;168        {
;;;169          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
0000a8  1584              ASRS     r4,r0,#22
0000aa  2101              MOVS     r1,#1
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;170          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
0000b2  2100              MOVS     r1,#0
0000b4  4620              MOV      r0,r4
                  |L1.182|
0000b6  e8bd4010          POP      {r4,lr}
0000ba  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.190|
;;;171        }
;;;172      }
;;;173    }
0000be  bd10              POP      {r4,pc}
;;;174    
                          ENDP

                  |L1.192|
                          DCD      0x40020000
                  |L1.196|
                          DCD      0x40020400
                  |L1.200|
                          DCD      0x40020800
                  |L1.204|
                          DCD      0x40020c00
                  |L1.208|
                          DCD      0x40021000
                  |L1.212|
                          DCD      0x40021400
                  |L1.216|
                          DCD      0x40021800
                  |L1.220|
                          DCD      0x40021c00
                  |L1.224|
                          DCD      0x40022000

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=1

                  GPIO_Init PROC
;;;181      */
;;;182    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;183    {
;;;184      uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
000002  2200              MOVS     r2,#0
;;;185    
;;;186      /* Check the parameters */
;;;187      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;188      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;189      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;190      assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
;;;191    
;;;192      /* -------------------------Configure the port pins---------------- */
;;;193      /*-- GPIO Mode Configuration --*/
;;;194      for (pinpos = 0x00; pinpos < 0x10; pinpos++)
;;;195      {
;;;196        pos = ((uint32_t)0x01) << pinpos;
000004  2701              MOVS     r7,#1
;;;197        /* Get the port pins position */
;;;198        currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;199    
;;;200        if (currentpin == pos)
;;;201        {
;;;202          GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
000006  f04f0c03          MOV      r12,#3
                  |L2.10|
00000a  680b              LDR      r3,[r1,#0]            ;198
00000c  fa07f502          LSL      r5,r7,r2              ;196
000010  402b              ANDS     r3,r3,r5              ;198
000012  42ab              CMP      r3,r5                 ;200
000014  d12c              BNE      |L2.112|
000016  6806              LDR      r6,[r0,#0]
000018  0053              LSLS     r3,r2,#1
00001a  fa0cf403          LSL      r4,r12,r3
00001e  43a6              BICS     r6,r6,r4
000020  6006              STR      r6,[r0,#0]
;;;203          GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
000022  790e              LDRB     r6,[r1,#4]
000024  f8d0e000          LDR      lr,[r0,#0]
000028  409e              LSLS     r6,r6,r3
00002a  ea46060e          ORR      r6,r6,lr
00002e  6006              STR      r6,[r0,#0]
;;;204    
;;;205          if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
000030  790e              LDRB     r6,[r1,#4]
000032  2e01              CMP      r6,#1
000034  d001              BEQ      |L2.58|
000036  2e02              CMP      r6,#2
000038  d112              BNE      |L2.96|
                  |L2.58|
;;;206          {
;;;207            /* Check Speed mode parameters */
;;;208            assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;209    
;;;210            /* Speed mode configuration */
;;;211            GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
00003a  6886              LDR      r6,[r0,#8]
00003c  43a6              BICS     r6,r6,r4
00003e  6086              STR      r6,[r0,#8]
;;;212            GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
000040  794e              LDRB     r6,[r1,#5]
000042  f8d0e008          LDR      lr,[r0,#8]
000046  409e              LSLS     r6,r6,r3
000048  ea46060e          ORR      r6,r6,lr
00004c  6086              STR      r6,[r0,#8]
;;;213    
;;;214            /* Check Output mode parameters */
;;;215            assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
;;;216    
;;;217            /* Output mode configuration*/
;;;218            GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
00004e  6846              LDR      r6,[r0,#4]
000050  43ae              BICS     r6,r6,r5
000052  6046              STR      r6,[r0,#4]
;;;219            GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
000054  6845              LDR      r5,[r0,#4]
000056  798e              LDRB     r6,[r1,#6]
000058  4096              LSLS     r6,r6,r2
00005a  b2b6              UXTH     r6,r6
00005c  4335              ORRS     r5,r5,r6
00005e  6045              STR      r5,[r0,#4]
                  |L2.96|
;;;220          }
;;;221    
;;;222          /* Pull-up Pull down resistor configuration*/
;;;223          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
000060  68c5              LDR      r5,[r0,#0xc]
000062  43a5              BICS     r5,r5,r4
000064  60c5              STR      r5,[r0,#0xc]
;;;224          GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
000066  79cc              LDRB     r4,[r1,#7]
000068  409c              LSLS     r4,r4,r3
00006a  68c3              LDR      r3,[r0,#0xc]
00006c  431c              ORRS     r4,r4,r3
00006e  60c4              STR      r4,[r0,#0xc]
                  |L2.112|
000070  1c52              ADDS     r2,r2,#1              ;194
000072  2a10              CMP      r2,#0x10              ;194
000074  d3c9              BCC      |L2.10|
;;;225        }
;;;226      }
;;;227    }
000076  bdf0              POP      {r4-r7,pc}
;;;228    
                          ENDP


                          AREA ||i.GPIO_PinAFConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinAFConfig PROC
;;;528      */
;;;529    void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
000000  074b              LSLS     r3,r1,#29
;;;530    {
;;;531      uint32_t temp = 0x00;
;;;532      uint32_t temp_2 = 0x00;
;;;533      
;;;534      /* Check the parameters */
;;;535      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;536      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;537      assert_param(IS_GPIO_AF(GPIO_AF));
;;;538      
;;;539      temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
000002  0edb              LSRS     r3,r3,#27
000004  409a              LSLS     r2,r2,r3
;;;540      GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
000006  08c9              LSRS     r1,r1,#3
000008  b510              PUSH     {r4,lr}               ;530
00000a  eb000081          ADD      r0,r0,r1,LSL #2
00000e  6a01              LDR      r1,[r0,#0x20]
000010  240f              MOVS     r4,#0xf
000012  409c              LSLS     r4,r4,r3
000014  43a1              BICS     r1,r1,r4
000016  6201              STR      r1,[r0,#0x20]
;;;541      temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
000018  6a01              LDR      r1,[r0,#0x20]
00001a  4311              ORRS     r1,r1,r2
;;;542      GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
00001c  6201              STR      r1,[r0,#0x20]
;;;543    }
00001e  bd10              POP      {r4,pc}
;;;544    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;254      */
;;;255    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b508              PUSH     {r3,lr}
;;;256    {
;;;257      __IO uint32_t tmp = 0x00010000;
;;;258    
;;;259      /* Check the parameters */
;;;260      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;261      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;262    
;;;263      tmp |= GPIO_Pin;
000002  f4413280          ORR      r2,r1,#0x10000
;;;264      /* Set LCKK bit */
;;;265      GPIOx->LCKR = tmp;
000006  9200              STR      r2,[sp,#0]
000008  61c2              STR      r2,[r0,#0x1c]
;;;266      /* Reset LCKK bit */
;;;267      GPIOx->LCKR =  GPIO_Pin;
00000a  61c1              STR      r1,[r0,#0x1c]
;;;268      /* Set LCKK bit */
;;;269      GPIOx->LCKR = tmp;
00000c  9900              LDR      r1,[sp,#0]
00000e  61c1              STR      r1,[r0,#0x1c]
;;;270      /* Read LCKK bit*/
;;;271      tmp = GPIOx->LCKR;
000010  69c1              LDR      r1,[r0,#0x1c]
;;;272      /* Read LCKK bit*/
;;;273      tmp = GPIOx->LCKR;
000012  69c0              LDR      r0,[r0,#0x1c]
000014  9000              STR      r0,[sp,#0]
;;;274    }
000016  bd08              POP      {r3,pc}
;;;275    
                          ENDP


                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;322      */
;;;323    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  6900              LDR      r0,[r0,#0x10]
;;;324    {
;;;325      /* Check the parameters */
;;;326      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;327    
;;;328      return ((uint16_t)GPIOx->IDR);
000002  b280              UXTH     r0,r0
;;;329    }
000004  4770              BX       lr
;;;330    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;298      */
;;;299    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;300    {
;;;301      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;302    
;;;303      /* Check the parameters */
;;;304      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;305      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;306    
;;;307      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6912              LDR      r2,[r2,#0x10]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L6.12|
;;;308      {
;;;309        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
                  |L6.12|
;;;310      }
;;;311      else
;;;312      {
;;;313        bitstatus = (uint8_t)Bit_RESET;
;;;314      }
;;;315      return bitstatus;
;;;316    }
00000c  4770              BX       lr
;;;317    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;361      */
;;;362    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  6940              LDR      r0,[r0,#0x14]
;;;363    {
;;;364      /* Check the parameters */
;;;365      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;366    
;;;367      return ((uint16_t)GPIOx->ODR);
000002  b280              UXTH     r0,r0
;;;368    }
000004  4770              BX       lr
;;;369    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;337      */
;;;338    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;339    {
;;;340      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;341    
;;;342      /* Check the parameters */
;;;343      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;344      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;345    
;;;346      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6952              LDR      r2,[r2,#0x14]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L8.12|
;;;347      {
;;;348        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
                  |L8.12|
;;;349      }
;;;350      else
;;;351      {
;;;352        bitstatus = (uint8_t)Bit_RESET;
;;;353      }
;;;354      return bitstatus;
;;;355    }
00000c  4770              BX       lr
;;;356    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;398      */
;;;399    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  8341              STRH     r1,[r0,#0x1a]
;;;400    {
;;;401      /* Check the parameters */
;;;402      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;403      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;404    
;;;405      GPIOx->BSRRH = GPIO_Pin;
;;;406    }
000002  4770              BX       lr
;;;407    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;379      */
;;;380    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  8301              STRH     r1,[r0,#0x18]
;;;381    {
;;;382      /* Check the parameters */
;;;383      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;384      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;385    
;;;386      GPIOx->BSRRL = GPIO_Pin;
;;;387    }
000002  4770              BX       lr
;;;388    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;233      */
;;;234    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;235    {
;;;236      /* Reset GPIO init structure parameters values */
;;;237      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
;;;238      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
000004  6001              STR      r1,[r0,#0]
000006  2100              MOVS     r1,#0
000008  7101              STRB     r1,[r0,#4]
;;;239      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
00000a  7141              STRB     r1,[r0,#5]
;;;240      GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
00000c  7181              STRB     r1,[r0,#6]
;;;241      GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
00000e  71c1              STRB     r1,[r0,#7]
;;;242    }
000010  4770              BX       lr
;;;243    
                          ENDP


                          AREA ||i.GPIO_ToggleBits||, CODE, READONLY, ALIGN=1

                  GPIO_ToggleBits PROC
;;;455      */
;;;456    void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6942              LDR      r2,[r0,#0x14]
;;;457    {
;;;458      /* Check the parameters */
;;;459      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;460    
;;;461      GPIOx->ODR ^= GPIO_Pin;
000002  404a              EORS     r2,r2,r1
000004  6142              STR      r2,[r0,#0x14]
;;;462    }
000006  4770              BX       lr
;;;463    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;441      */
;;;442    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  6141              STR      r1,[r0,#0x14]
;;;443    {
;;;444      /* Check the parameters */
;;;445      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;446    
;;;447      GPIOx->ODR = PortVal;
;;;448    }
000002  4770              BX       lr
;;;449    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;418      */
;;;419    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  b10a              CBZ      r2,|L14.6|
;;;420    {
;;;421      /* Check the parameters */
;;;422      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;423      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;424      assert_param(IS_GPIO_BIT_ACTION(BitVal));
;;;425    
;;;426      if (BitVal != Bit_RESET)
;;;427      {
;;;428        GPIOx->BSRRL = GPIO_Pin;
000002  8301              STRH     r1,[r0,#0x18]
;;;429      }
;;;430      else
;;;431      {
;;;432        GPIOx->BSRRH = GPIO_Pin ;
;;;433      }
;;;434    }
000004  4770              BX       lr
                  |L14.6|
000006  8341              STRH     r1,[r0,#0x1a]         ;432
000008  4770              BX       lr
;;;435    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\CMSIS\\stm32f4xx_gpio.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f4xx_gpio_c_f8e8e39a____REV16|
#line 114 ".\\Libraries\\CMSIS\\core_cmInstr.h"
|__asm___16_stm32f4xx_gpio_c_f8e8e39a____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f4xx_gpio_c_f8e8e39a____REVSH|
#line 128
|__asm___16_stm32f4xx_gpio_c_f8e8e39a____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
