; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\media_usb_key\stm32f4xx_adc.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\media_usb_key\stm32f4xx_adc.d --cpu=Cortex-M4 --apcs=interwork -I.\Libraries -I.\Utilities -I.\Libraries\CMSIS\ST\STM32F4xx\Include -I.\inc -I.\src -I.\Libraries\STM32F4xx_StdPeriph_Driver -I.\Libraries\STM32_USB_HOST_Library -I.\Libraries\STM32_USB_OTG_Driver -I.\Utilities\STM32F4-Discovery -I.\Libraries\CMSIS -I.\Utilities\Third_Party\fat_fs -IC:\Keil4\ARM\RV31\INC -IC:\Keil4\ARM\CMSIS\Include -IC:\Keil4\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DUSE_USB_OTG_FS -DSTM32F4XX -DMEDIA_USB_KEY -D__FPU_PRESENT=0 --omf_browse=.\media_usb_key\stm32f4xx_adc.crf Libraries\CMSIS\stm32f4xx_adc.c]
                          THUMB

                          AREA ||i.ADC_AnalogWatchdogCmd||, CODE, READONLY, ALIGN=2

                  ADC_AnalogWatchdogCmd PROC
;;;449      */
;;;450    void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
000000  6842              LDR      r2,[r0,#4]
;;;451    {
;;;452      uint32_t tmpreg = 0;
;;;453      /* Check the parameters */
;;;454      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;455      assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
;;;456      
;;;457      /* Get the old register value */
;;;458      tmpreg = ADCx->CR1;
;;;459      
;;;460      /* Clear AWDEN, JAWDEN and AWDSGL bits */
;;;461      tmpreg &= CR1_AWDMode_RESET;
000002  4b02              LDR      r3,|L1.12|
000004  401a              ANDS     r2,r2,r3
;;;462      
;;;463      /* Set the analog watchdog enable mode */
;;;464      tmpreg |= ADC_AnalogWatchdog;
000006  430a              ORRS     r2,r2,r1
;;;465      
;;;466      /* Store the new register value */
;;;467      ADCx->CR1 = tmpreg;
000008  6042              STR      r2,[r0,#4]
;;;468    }
00000a  4770              BX       lr
;;;469    
                          ENDP

                  |L1.12|
                          DCD      0xff3ffdff

                          AREA ||i.ADC_AnalogWatchdogSingleChannelConfig||, CODE, READONLY, ALIGN=1

                  ADC_AnalogWatchdogSingleChannelConfig PROC
;;;519      */
;;;520    void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
000000  6842              LDR      r2,[r0,#4]
;;;521    {
;;;522      uint32_t tmpreg = 0;
;;;523      /* Check the parameters */
;;;524      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;525      assert_param(IS_ADC_CHANNEL(ADC_Channel));
;;;526      
;;;527      /* Get the old register value */
;;;528      tmpreg = ADCx->CR1;
;;;529      
;;;530      /* Clear the Analog watchdog channel select bits */
;;;531      tmpreg &= CR1_AWDCH_RESET;
000002  f022021f          BIC      r2,r2,#0x1f
;;;532      
;;;533      /* Set the Analog watchdog channel */
;;;534      tmpreg |= ADC_Channel;
000006  430a              ORRS     r2,r2,r1
;;;535      
;;;536      /* Store the new register value */
;;;537      ADCx->CR1 = tmpreg;
000008  6042              STR      r2,[r0,#4]
;;;538    }
00000a  4770              BX       lr
;;;539    /**
                          ENDP


                          AREA ||i.ADC_AnalogWatchdogThresholdsConfig||, CODE, READONLY, ALIGN=1

                  ADC_AnalogWatchdogThresholdsConfig PROC
;;;478      */
;;;479    void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
000000  6241              STR      r1,[r0,#0x24]
;;;480                                            uint16_t LowThreshold)
;;;481    {
;;;482      /* Check the parameters */
;;;483      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;484      assert_param(IS_ADC_THRESHOLD(HighThreshold));
;;;485      assert_param(IS_ADC_THRESHOLD(LowThreshold));
;;;486      
;;;487      /* Set the ADCx high threshold */
;;;488      ADCx->HTR = HighThreshold;
;;;489      
;;;490      /* Set the ADCx low threshold */
;;;491      ADCx->LTR = LowThreshold;
000002  6282              STR      r2,[r0,#0x28]
;;;492    }
000004  4770              BX       lr
;;;493    
                          ENDP


                          AREA ||i.ADC_AutoInjectedConvCmd||, CODE, READONLY, ALIGN=1

                  ADC_AutoInjectedConvCmd PROC
;;;1418     */
;;;1419   void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;1420   {
;;;1421     /* Check the parameters */
;;;1422     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1423     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1424     if (NewState != DISABLE)
;;;1425     {
;;;1426       /* Enable the selected ADC automatic injected group conversion */
;;;1427       ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
;;;1428     }
;;;1429     else
;;;1430     {
;;;1431       /* Disable the selected ADC automatic injected group conversion */
;;;1432       ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
000002  6841              LDR      r1,[r0,#4]
000004  d002              BEQ      |L4.12|
000006  f4416180          ORR      r1,r1,#0x400          ;1427
00000a  e001              B        |L4.16|
                  |L4.12|
00000c  f4216180          BIC      r1,r1,#0x400
                  |L4.16|
000010  6041              STR      r1,[r0,#4]            ;1427
;;;1433     }
;;;1434   }
000012  4770              BX       lr
;;;1435   
                          ENDP


                          AREA ||i.ADC_ClearFlag||, CODE, READONLY, ALIGN=1

                  ADC_ClearFlag PROC
;;;1652     */
;;;1653   void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
000000  43c9              MVNS     r1,r1
;;;1654   {
;;;1655     /* Check the parameters */
;;;1656     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1657     assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
;;;1658   
;;;1659     /* Clear the selected ADC flags */
;;;1660     ADCx->SR = ~(uint32_t)ADC_FLAG;
000002  6001              STR      r1,[r0,#0]
;;;1661   }
000004  4770              BX       lr
;;;1662   
                          ENDP


                          AREA ||i.ADC_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  ADC_ClearITPendingBit PROC
;;;1714     */
;;;1715   void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
000000  ea6f2111          MVN      r1,r1,LSR #8
;;;1716   {
;;;1717     uint8_t itmask = 0;
;;;1718     /* Check the parameters */
;;;1719     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1720     assert_param(IS_ADC_IT(ADC_IT)); 
;;;1721     /* Get the ADC IT index */
;;;1722     itmask = (uint8_t)(ADC_IT >> 8);
;;;1723     /* Clear the selected ADC interrupt pending bits */
;;;1724     ADCx->SR = ~(uint32_t)itmask;
000004  6001              STR      r1,[r0,#0]
;;;1725   }                    
000006  4770              BX       lr
;;;1726   /**
                          ENDP


                          AREA ||i.ADC_Cmd||, CODE, READONLY, ALIGN=1

                  ADC_Cmd PROC
;;;391      */
;;;392    void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;393    {
;;;394      /* Check the parameters */
;;;395      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;396      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;397      if (NewState != DISABLE)
;;;398      {
;;;399        /* Set the ADON bit to wake up the ADC from power down mode */
;;;400        ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
;;;401      }
;;;402      else
;;;403      {
;;;404        /* Disable the selected ADC peripheral */
;;;405        ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
000002  6881              LDR      r1,[r0,#8]
000004  d002              BEQ      |L7.12|
000006  f0410101          ORR      r1,r1,#1              ;400
00000a  e001              B        |L7.16|
                  |L7.12|
00000c  f0210101          BIC      r1,r1,#1
                  |L7.16|
000010  6081              STR      r1,[r0,#8]            ;400
;;;406      }
;;;407    }
000012  4770              BX       lr
;;;408    /**
                          ENDP


                          AREA ||i.ADC_CommonInit||, CODE, READONLY, ALIGN=2

                  ADC_CommonInit PROC
;;;333      */
;;;334    void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
000000  4b07              LDR      r3,|L8.32|
;;;335    {
000002  b510              PUSH     {r4,lr}
;;;336      uint32_t tmpreg1 = 0;
;;;337      /* Check the parameters */
;;;338      assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
;;;339      assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
;;;340      assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
;;;341      assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
;;;342      /*---------------------------- ADC CCR Configuration -----------------*/
;;;343      /* Get the ADC CCR value */
;;;344      tmpreg1 = ADC->CCR;
000004  681a              LDR      r2,[r3,#0]
;;;345      
;;;346      /* Clear MULTI, DELAY, DMA and ADCPRE bits */
;;;347      tmpreg1 &= CR_CLEAR_MASK;
000006  4907              LDR      r1,|L8.36|
000008  400a              ANDS     r2,r2,r1
00000a  e9d01400          LDRD     r1,r4,[r0,#0]
;;;348      
;;;349      /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
;;;350         and DMA access mode for multimode */
;;;351      /* Set MULTI bits according to ADC_Mode value */
;;;352      /* Set ADCPRE bits according to ADC_Prescaler value */
;;;353      /* Set DMA bits according to ADC_DMAAccessMode value */
;;;354      /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
;;;355      tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
00000e  4321              ORRS     r1,r1,r4
000010  e9d04002          LDRD     r4,r0,[r0,#8]
000014  4304              ORRS     r4,r4,r0
000016  4321              ORRS     r1,r1,r4
000018  4311              ORRS     r1,r1,r2
;;;356                            ADC_CommonInitStruct->ADC_Prescaler | 
;;;357                            ADC_CommonInitStruct->ADC_DMAAccessMode | 
;;;358                            ADC_CommonInitStruct->ADC_TwoSamplingDelay);
;;;359                            
;;;360      /* Write to ADC CCR */
;;;361      ADC->CCR = tmpreg1;
00001a  6019              STR      r1,[r3,#0]
;;;362    }
00001c  bd10              POP      {r4,pc}
;;;363    
                          ENDP

00001e  0000              DCW      0x0000
                  |L8.32|
                          DCD      0x40012304
                  |L8.36|
                          DCD      0xfffc30e0

                          AREA ||i.ADC_CommonStructInit||, CODE, READONLY, ALIGN=1

                  ADC_CommonStructInit PROC
;;;369      */
;;;370    void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
000000  2100              MOVS     r1,#0
;;;371    {
;;;372      /* Initialize the ADC_Mode member */
;;;373      ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
;;;374    
;;;375      /* initialize the ADC_Prescaler member */
;;;376      ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
000002  6001              STR      r1,[r0,#0]
;;;377    
;;;378      /* Initialize the ADC_DMAAccessMode member */
;;;379      ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
000004  6041              STR      r1,[r0,#4]
;;;380    
;;;381      /* Initialize the ADC_TwoSamplingDelay member */
;;;382      ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
000006  6081              STR      r1,[r0,#8]
000008  60c1              STR      r1,[r0,#0xc]
;;;383    }
00000a  4770              BX       lr
;;;384    
                          ENDP


                          AREA ||i.ADC_ContinuousModeCmd||, CODE, READONLY, ALIGN=1

                  ADC_ContinuousModeCmd PROC
;;;896      */
;;;897    void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;898    {
;;;899      /* Check the parameters */
;;;900      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;901      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;902      
;;;903      if (NewState != DISABLE)
;;;904      {
;;;905        /* Enable the selected ADC continuous conversion mode */
;;;906        ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
;;;907      }
;;;908      else
;;;909      {
;;;910        /* Disable the selected ADC continuous conversion mode */
;;;911        ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
000002  6881              LDR      r1,[r0,#8]
000004  d002              BEQ      |L10.12|
000006  f0410102          ORR      r1,r1,#2              ;906
00000a  e001              B        |L10.16|
                  |L10.12|
00000c  f0210102          BIC      r1,r1,#2
                  |L10.16|
000010  6081              STR      r1,[r0,#8]            ;906
;;;912      }
;;;913    }
000012  4770              BX       lr
;;;914    
                          ENDP


                          AREA ||i.ADC_DMACmd||, CODE, READONLY, ALIGN=1

                  ADC_DMACmd PROC
;;;1047     */
;;;1048   void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;1049   {
;;;1050     /* Check the parameters */
;;;1051     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1052     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1053     if (NewState != DISABLE)
;;;1054     {
;;;1055       /* Enable the selected ADC DMA request */
;;;1056       ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
;;;1057     }
;;;1058     else
;;;1059     {
;;;1060       /* Disable the selected ADC DMA request */
;;;1061       ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
000002  6881              LDR      r1,[r0,#8]
000004  d002              BEQ      |L11.12|
000006  f4417180          ORR      r1,r1,#0x100          ;1056
00000a  e001              B        |L11.16|
                  |L11.12|
00000c  f4217180          BIC      r1,r1,#0x100
                  |L11.16|
000010  6081              STR      r1,[r0,#8]            ;1056
;;;1062     }
;;;1063   }
000012  4770              BX       lr
;;;1064   
                          ENDP


                          AREA ||i.ADC_DMARequestAfterLastTransferCmd||, CODE, READONLY, ALIGN=1

                  ADC_DMARequestAfterLastTransferCmd PROC
;;;1071     */
;;;1072   void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;1073   {
;;;1074     /* Check the parameters */
;;;1075     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1076     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1077     if (NewState != DISABLE)
;;;1078     {
;;;1079       /* Enable the selected ADC DMA request after last transfer */
;;;1080       ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
;;;1081     }
;;;1082     else
;;;1083     {
;;;1084       /* Disable the selected ADC DMA request after last transfer */
;;;1085       ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
000002  6881              LDR      r1,[r0,#8]
000004  d002              BEQ      |L12.12|
000006  f4417100          ORR      r1,r1,#0x200          ;1080
00000a  e001              B        |L12.16|
                  |L12.12|
00000c  f4217100          BIC      r1,r1,#0x200
                  |L12.16|
000010  6081              STR      r1,[r0,#8]            ;1080
;;;1086     }
;;;1087   }
000012  4770              BX       lr
;;;1088   
                          ENDP


                          AREA ||i.ADC_DeInit||, CODE, READONLY, ALIGN=1

                  ADC_DeInit PROC
;;;205      */
;;;206    void ADC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;207    {
;;;208      /* Enable all ADCs reset state */
;;;209      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
000002  2101              MOVS     r1,#1
000004  020c              LSLS     r4,r1,#8
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;210      
;;;211      /* Release all ADCs from reset state */
;;;212      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;213    }
;;;214    
                          ENDP


                          AREA ||i.ADC_DiscModeChannelCountConfig||, CODE, READONLY, ALIGN=1

                  ADC_DiscModeChannelCountConfig PROC
;;;922      */
;;;923    void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
000000  6842              LDR      r2,[r0,#4]
;;;924    {
;;;925      uint32_t tmpreg1 = 0;
;;;926      uint32_t tmpreg2 = 0;
;;;927      
;;;928      /* Check the parameters */
;;;929      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;930      assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
;;;931      
;;;932      /* Get the old register value */
;;;933      tmpreg1 = ADCx->CR1;
;;;934      
;;;935      /* Clear the old discontinuous mode channel count */
;;;936      tmpreg1 &= CR1_DISCNUM_RESET;
;;;937      
;;;938      /* Set the discontinuous mode channel count */
;;;939      tmpreg2 = Number - 1;
000002  1e49              SUBS     r1,r1,#1
000004  f4224260          BIC      r2,r2,#0xe000         ;936
;;;940      tmpreg1 |= tmpreg2 << 13;
000008  ea423141          ORR      r1,r2,r1,LSL #13
;;;941      
;;;942      /* Store the new register value */
;;;943      ADCx->CR1 = tmpreg1;
00000c  6041              STR      r1,[r0,#4]
;;;944    }
00000e  4770              BX       lr
;;;945    
                          ENDP


                          AREA ||i.ADC_DiscModeCmd||, CODE, READONLY, ALIGN=1

                  ADC_DiscModeCmd PROC
;;;954      */
;;;955    void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;956    {
;;;957      /* Check the parameters */
;;;958      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;959      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;960      
;;;961      if (NewState != DISABLE)
;;;962      {
;;;963        /* Enable the selected ADC regular discontinuous mode */
;;;964        ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
;;;965      }
;;;966      else
;;;967      {
;;;968        /* Disable the selected ADC regular discontinuous mode */
;;;969        ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
000002  6841              LDR      r1,[r0,#4]
000004  d002              BEQ      |L15.12|
000006  f4416100          ORR      r1,r1,#0x800          ;964
00000a  e001              B        |L15.16|
                  |L15.12|
00000c  f4216100          BIC      r1,r1,#0x800
                  |L15.16|
000010  6041              STR      r1,[r0,#4]            ;964
;;;970      }
;;;971    }
000012  4770              BX       lr
;;;972    
                          ENDP


                          AREA ||i.ADC_EOCOnEachRegularChannelCmd||, CODE, READONLY, ALIGN=1

                  ADC_EOCOnEachRegularChannelCmd PROC
;;;871      */
;;;872    void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;873    {
;;;874      /* Check the parameters */
;;;875      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;876      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;877      
;;;878      if (NewState != DISABLE)
;;;879      {
;;;880        /* Enable the selected ADC EOC rising on each regular channel conversion */
;;;881        ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
;;;882      }
;;;883      else
;;;884      {
;;;885        /* Disable the selected ADC EOC rising on each regular channel conversion */
;;;886        ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
000002  6881              LDR      r1,[r0,#8]
000004  d002              BEQ      |L16.12|
000006  f4416180          ORR      r1,r1,#0x400          ;881
00000a  e001              B        |L16.16|
                  |L16.12|
00000c  f4216180          BIC      r1,r1,#0x400
                  |L16.16|
000010  6081              STR      r1,[r0,#8]            ;881
;;;887      }
;;;888    }
000012  4770              BX       lr
;;;889    
                          ENDP


                          AREA ||i.ADC_ExternalTrigInjectedConvConfig||, CODE, READONLY, ALIGN=1

                  ADC_ExternalTrigInjectedConvConfig PROC
;;;1321     */
;;;1322   void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
000000  6882              LDR      r2,[r0,#8]
;;;1323   {
;;;1324     uint32_t tmpreg = 0;
;;;1325     /* Check the parameters */
;;;1326     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1327     assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
;;;1328     
;;;1329     /* Get the old register value */
;;;1330     tmpreg = ADCx->CR2;
;;;1331     
;;;1332     /* Clear the old external event selection for injected group */
;;;1333     tmpreg &= CR2_JEXTSEL_RESET;
000002  f4222270          BIC      r2,r2,#0xf0000
;;;1334     
;;;1335     /* Set the external event selection for injected group */
;;;1336     tmpreg |= ADC_ExternalTrigInjecConv;
000006  430a              ORRS     r2,r2,r1
;;;1337     
;;;1338     /* Store the new register value */
;;;1339     ADCx->CR2 = tmpreg;
000008  6082              STR      r2,[r0,#8]
;;;1340   }
00000a  4770              BX       lr
;;;1341   
                          ENDP


                          AREA ||i.ADC_ExternalTrigInjectedConvEdgeConfig||, CODE, READONLY, ALIGN=1

                  ADC_ExternalTrigInjectedConvEdgeConfig PROC
;;;1355     */
;;;1356   void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
000000  6882              LDR      r2,[r0,#8]
;;;1357   {
;;;1358     uint32_t tmpreg = 0;
;;;1359     /* Check the parameters */
;;;1360     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1361     assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
;;;1362     /* Get the old register value */
;;;1363     tmpreg = ADCx->CR2;
;;;1364     /* Clear the old external trigger edge for injected group */
;;;1365     tmpreg &= CR2_JEXTEN_RESET;
000002  f4221240          BIC      r2,r2,#0x300000
;;;1366     /* Set the new external trigger edge for injected group */
;;;1367     tmpreg |= ADC_ExternalTrigInjecConvEdge;
000006  430a              ORRS     r2,r2,r1
;;;1368     /* Store the new register value */
;;;1369     ADCx->CR2 = tmpreg;
000008  6082              STR      r2,[r0,#8]
;;;1370   }
00000a  4770              BX       lr
;;;1371   
                          ENDP


                          AREA ||i.ADC_GetConversionValue||, CODE, READONLY, ALIGN=1

                  ADC_GetConversionValue PROC
;;;977      */
;;;978    uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
000000  6cc0              LDR      r0,[r0,#0x4c]
;;;979    {
;;;980      /* Check the parameters */
;;;981      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;982      
;;;983      /* Return the selected ADC conversion value */
;;;984      return (uint16_t) ADCx->DR;
000002  b280              UXTH     r0,r0
;;;985    }
000004  4770              BX       lr
;;;986    
                          ENDP


                          AREA ||i.ADC_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  ADC_GetFlagStatus PROC
;;;1617     */
;;;1618   FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
000000  4602              MOV      r2,r0
;;;1619   {
;;;1620     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1621     /* Check the parameters */
;;;1622     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1623     assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
;;;1624   
;;;1625     /* Check the status of the specified ADC flag */
;;;1626     if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
000004  6812              LDR      r2,[r2,#0]
000006  420a              TST      r2,r1
000008  d000              BEQ      |L20.12|
;;;1627     {
;;;1628       /* ADC_FLAG is set */
;;;1629       bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L20.12|
;;;1630     }
;;;1631     else
;;;1632     {
;;;1633       /* ADC_FLAG is reset */
;;;1634       bitstatus = RESET;
;;;1635     }
;;;1636     /* Return the ADC_FLAG status */
;;;1637     return  bitstatus;
;;;1638   }
00000c  4770              BX       lr
;;;1639   
                          ENDP


                          AREA ||i.ADC_GetITStatus||, CODE, READONLY, ALIGN=1

                  ADC_GetITStatus PROC
;;;1673     */
;;;1674   ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
000000  b530              PUSH     {r4,r5,lr}
;;;1675   {
000002  4602              MOV      r2,r0
;;;1676     ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;1677     uint32_t itmask = 0, enablestatus = 0;
;;;1678   
;;;1679     /* Check the parameters */
;;;1680     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1681     assert_param(IS_ADC_IT(ADC_IT));
;;;1682   
;;;1683     /* Get the ADC IT index */
;;;1684     itmask = ADC_IT >> 8;
;;;1685   
;;;1686     /* Get the ADC_IT enable bit status */
;;;1687     enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
000006  6853              LDR      r3,[r2,#4]
000008  0a0c              LSRS     r4,r1,#8              ;1684
00000a  2501              MOVS     r5,#1
00000c  408d              LSLS     r5,r5,r1
;;;1688   
;;;1689     /* Check the status of the specified ADC interrupt */
;;;1690     if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
00000e  6811              LDR      r1,[r2,#0]
000010  402b              ANDS     r3,r3,r5              ;1687
000012  4221              TST      r1,r4
000014  d002              BEQ      |L21.28|
000016  2b00              CMP      r3,#0
000018  d000              BEQ      |L21.28|
;;;1691     {
;;;1692       /* ADC_IT is set */
;;;1693       bitstatus = SET;
00001a  2001              MOVS     r0,#1
                  |L21.28|
;;;1694     }
;;;1695     else
;;;1696     {
;;;1697       /* ADC_IT is reset */
;;;1698       bitstatus = RESET;
;;;1699     }
;;;1700     /* Return the ADC_IT status */
;;;1701     return  bitstatus;
;;;1702   }
00001c  bd30              POP      {r4,r5,pc}
;;;1703   
                          ENDP


                          AREA ||i.ADC_GetInjectedConversionValue||, CODE, READONLY, ALIGN=1

                  ADC_GetInjectedConversionValue PROC
;;;1472     */
;;;1473   uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
000000  b508              PUSH     {r3,lr}
;;;1474   {
;;;1475     __IO uint32_t tmp = 0;
;;;1476     
;;;1477     /* Check the parameters */
;;;1478     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1479     assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
;;;1480   
;;;1481     tmp = (uint32_t)ADCx;
;;;1482     tmp += ADC_InjectedChannel + JDR_OFFSET;
000002  4408              ADD      r0,r0,r1
000004  3028              ADDS     r0,r0,#0x28
;;;1483     
;;;1484     /* Returns the selected injected channel conversion data value */
;;;1485     return (uint16_t) (*(__IO uint32_t*)  tmp); 
000006  9000              STR      r0,[sp,#0]
000008  6800              LDR      r0,[r0,#0]
00000a  b280              UXTH     r0,r0
;;;1486   }
00000c  bd08              POP      {r3,pc}
;;;1487   /**
                          ENDP


                          AREA ||i.ADC_GetMultiModeConversionValue||, CODE, READONLY, ALIGN=2

                  ADC_GetMultiModeConversionValue PROC
;;;998      */
;;;999    uint32_t ADC_GetMultiModeConversionValue(void)
000000  4801              LDR      r0,|L23.8|
;;;1000   {
;;;1001     /* Return the multi mode conversion value */
;;;1002     return (*(__IO uint32_t *) CDR_ADDRESS);
000002  6800              LDR      r0,[r0,#0]
;;;1003   }
000004  4770              BX       lr
;;;1004   /**
                          ENDP

000006  0000              DCW      0x0000
                  |L23.8|
                          DCD      0x40012308

                          AREA ||i.ADC_GetSoftwareStartConvStatus||, CODE, READONLY, ALIGN=1

                  ADC_GetSoftwareStartConvStatus PROC
;;;841      */
;;;842    FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
000000  4601              MOV      r1,r0
;;;843    {
;;;844      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;845      /* Check the parameters */
;;;846      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;847      
;;;848      /* Check the status of SWSTART bit */
;;;849      if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
000004  6889              LDR      r1,[r1,#8]
000006  0249              LSLS     r1,r1,#9
000008  d500              BPL      |L24.12|
;;;850      {
;;;851        /* SWSTART bit is set */
;;;852        bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L24.12|
;;;853      }
;;;854      else
;;;855      {
;;;856        /* SWSTART bit is reset */
;;;857        bitstatus = RESET;
;;;858      }
;;;859      
;;;860      /* Return the SWSTART bit status */
;;;861      return  bitstatus;
;;;862    }
00000c  4770              BX       lr
;;;863    
                          ENDP


                          AREA ||i.ADC_GetSoftwareStartInjectedConvCmdStatus||, CODE, READONLY, ALIGN=1

                  ADC_GetSoftwareStartInjectedConvCmdStatus PROC
;;;1389     */
;;;1390   FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
000000  4601              MOV      r1,r0
;;;1391   {
;;;1392     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1393     /* Check the parameters */
;;;1394     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1395     
;;;1396     /* Check the status of JSWSTART bit */
;;;1397     if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
000004  6889              LDR      r1,[r1,#8]
000006  0249              LSLS     r1,r1,#9
000008  d500              BPL      |L25.12|
;;;1398     {
;;;1399       /* JSWSTART bit is set */
;;;1400       bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L25.12|
;;;1401     }
;;;1402     else
;;;1403     {
;;;1404       /* JSWSTART bit is reset */
;;;1405       bitstatus = RESET;
;;;1406     }
;;;1407     /* Return the JSWSTART bit status */
;;;1408     return  bitstatus;
;;;1409   }
00000c  4770              BX       lr
;;;1410   
                          ENDP


                          AREA ||i.ADC_ITConfig||, CODE, READONLY, ALIGN=1

                  ADC_ITConfig PROC
;;;1580     */
;;;1581   void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
000000  2301              MOVS     r3,#1
;;;1582   {
;;;1583     uint32_t itmask = 0;
;;;1584     /* Check the parameters */
;;;1585     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1586     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1587     assert_param(IS_ADC_IT(ADC_IT)); 
;;;1588   
;;;1589     /* Get the ADC IT index */
;;;1590     itmask = (uint8_t)ADC_IT;
;;;1591     itmask = (uint32_t)0x01 << itmask;    
000002  408b              LSLS     r3,r3,r1
;;;1592   
;;;1593     if (NewState != DISABLE)
;;;1594     {
;;;1595       /* Enable the selected ADC interrupts */
;;;1596       ADCx->CR1 |= itmask;
;;;1597     }
;;;1598     else
;;;1599     {
;;;1600       /* Disable the selected ADC interrupts */
;;;1601       ADCx->CR1 &= (~(uint32_t)itmask);
000004  6841              LDR      r1,[r0,#4]
000006  b10a              CBZ      r2,|L26.12|
000008  4319              ORRS     r1,r1,r3              ;1596
00000a  e000              B        |L26.14|
                  |L26.12|
00000c  4399              BICS     r1,r1,r3
                  |L26.14|
00000e  6041              STR      r1,[r0,#4]            ;1596
;;;1602     }
;;;1603   }
000010  4770              BX       lr
;;;1604   
                          ENDP


                          AREA ||i.ADC_Init||, CODE, READONLY, ALIGN=2

                  ADC_Init PROC
;;;227      */
;;;228    void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;229    {
;;;230      uint32_t tmpreg1 = 0;
;;;231      uint8_t tmpreg2 = 0;
;;;232      /* Check the parameters */
;;;233      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;234      assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
;;;235      assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
;;;236      assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
;;;237      assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
;;;238      assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
;;;239      assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
;;;240      assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
;;;241      
;;;242      /*---------------------------- ADCx CR1 Configuration -----------------*/
;;;243      /* Get the ADCx CR1 value */
;;;244      tmpreg1 = ADCx->CR1;
000002  6842              LDR      r2,[r0,#4]
;;;245      
;;;246      /* Clear RES and SCAN bits */
;;;247      tmpreg1 &= CR1_CLEAR_MASK;
000004  4b0f              LDR      r3,|L27.68|
;;;248      
;;;249      /* Configure ADCx: scan conversion mode and resolution */
;;;250      /* Set SCAN bit according to ADC_ScanConvMode value */
;;;251      /* Set RES bit according to ADC_Resolution value */ 
;;;252      tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
000006  790c              LDRB     r4,[r1,#4]
000008  401a              ANDS     r2,r2,r3              ;247
00000a  680b              LDR      r3,[r1,#0]
00000c  ea422204          ORR      r2,r2,r4,LSL #8
000010  4313              ORRS     r3,r3,r2
;;;253                                       ADC_InitStruct->ADC_Resolution);
;;;254      /* Write to ADCx CR1 */
;;;255      ADCx->CR1 = tmpreg1;
000012  6043              STR      r3,[r0,#4]
;;;256      /*---------------------------- ADCx CR2 Configuration -----------------*/
;;;257      /* Get the ADCx CR2 value */
;;;258      tmpreg1 = ADCx->CR2;
000014  6882              LDR      r2,[r0,#8]
;;;259      
;;;260      /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
;;;261      tmpreg1 &= CR2_CLEAR_MASK;
000016  4b0c              LDR      r3,|L27.72|
;;;262      
;;;263      /* Configure ADCx: external trigger event and edge, data alignment and 
;;;264         continuous conversion mode */
;;;265      /* Set ALIGN bit according to ADC_DataAlign value */
;;;266      /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
;;;267      /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
;;;268      /* Set CONT bit according to ADC_ContinuousConvMode value */
;;;269      tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
000018  794d              LDRB     r5,[r1,#5]
00001a  401a              ANDS     r2,r2,r3              ;261
00001c  e9d14303          LDRD     r4,r3,[r1,#0xc]       ;261
000020  4323              ORRS     r3,r3,r4
000022  688c              LDR      r4,[r1,#8]
000024  ea440445          ORR      r4,r4,r5,LSL #1
000028  4323              ORRS     r3,r3,r4
00002a  4313              ORRS     r3,r3,r2
;;;270                            ADC_InitStruct->ADC_ExternalTrigConv | 
;;;271                            ADC_InitStruct->ADC_ExternalTrigConvEdge | \
;;;272                            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
;;;273                            
;;;274      /* Write to ADCx CR2 */
;;;275      ADCx->CR2 = tmpreg1;
00002c  6083              STR      r3,[r0,#8]
;;;276      /*---------------------------- ADCx SQR1 Configuration -----------------*/
;;;277      /* Get the ADCx SQR1 value */
;;;278      tmpreg1 = ADCx->SQR1;
00002e  6ac2              LDR      r2,[r0,#0x2c]
;;;279      
;;;280      /* Clear L bits */
;;;281      tmpreg1 &= SQR1_L_RESET;
;;;282      
;;;283      /* Configure ADCx: regular channel sequence length */
;;;284      /* Set L bits according to ADC_NbrOfConversion value */
;;;285      tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
000030  7d09              LDRB     r1,[r1,#0x14]
000032  f4220270          BIC      r2,r2,#0xf00000       ;281
000036  1e49              SUBS     r1,r1,#1
000038  b2c9              UXTB     r1,r1
;;;286      tmpreg1 |= ((uint32_t)tmpreg2 << 20);
00003a  ea425101          ORR      r1,r2,r1,LSL #20
;;;287      
;;;288      /* Write to ADCx SQR1 */
;;;289      ADCx->SQR1 = tmpreg1;
00003e  62c1              STR      r1,[r0,#0x2c]
;;;290    }
000040  bd30              POP      {r4,r5,pc}
;;;291    
                          ENDP

000042  0000              DCW      0x0000
                  |L27.68|
                          DCD      0xfcfffeff
                  |L27.72|
                          DCD      0xc0fff7fd

                          AREA ||i.ADC_InjectedChannelConfig||, CODE, READONLY, ALIGN=1

                  ADC_InjectedChannelConfig PROC
;;;1185     */
;;;1186   void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
000000  b570              PUSH     {r4-r6,lr}
;;;1187   {
;;;1188     uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
;;;1189     /* Check the parameters */
;;;1190     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1191     assert_param(IS_ADC_CHANNEL(ADC_Channel));
;;;1192     assert_param(IS_ADC_INJECTED_RANK(Rank));
;;;1193     assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
;;;1194     /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
;;;1195     if (ADC_Channel > ADC_Channel_9)
;;;1196     {
;;;1197       /* Get the old register value */
;;;1198       tmpreg1 = ADCx->SMPR1;
;;;1199       /* Calculate the mask to clear */
;;;1200       tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
000002  2607              MOVS     r6,#7
000004  2909              CMP      r1,#9                 ;1195
000006  d90a              BLS      |L28.30|
000008  68c5              LDR      r5,[r0,#0xc]          ;1198
00000a  f1a1040a          SUB      r4,r1,#0xa
00000e  eb040444          ADD      r4,r4,r4,LSL #1
000012  40a6              LSLS     r6,r6,r4
;;;1201       /* Clear the old sample time */
;;;1202       tmpreg1 &= ~tmpreg2;
000014  43b5              BICS     r5,r5,r6
;;;1203       /* Calculate the mask to set */
;;;1204       tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
000016  40a3              LSLS     r3,r3,r4
;;;1205       /* Set the new sample time */
;;;1206       tmpreg1 |= tmpreg2;
000018  431d              ORRS     r5,r5,r3
;;;1207       /* Store the new register value */
;;;1208       ADCx->SMPR1 = tmpreg1;
00001a  60c5              STR      r5,[r0,#0xc]
00001c  e007              B        |L28.46|
                  |L28.30|
;;;1209     }
;;;1210     else /* ADC_Channel include in ADC_Channel_[0..9] */
;;;1211     {
;;;1212       /* Get the old register value */
;;;1213       tmpreg1 = ADCx->SMPR2;
00001e  6905              LDR      r5,[r0,#0x10]
;;;1214       /* Calculate the mask to clear */
;;;1215       tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
000020  eb010441          ADD      r4,r1,r1,LSL #1
000024  40a6              LSLS     r6,r6,r4
;;;1216       /* Clear the old sample time */
;;;1217       tmpreg1 &= ~tmpreg2;
000026  43b5              BICS     r5,r5,r6
;;;1218       /* Calculate the mask to set */
;;;1219       tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
000028  40a3              LSLS     r3,r3,r4
;;;1220       /* Set the new sample time */
;;;1221       tmpreg1 |= tmpreg2;
00002a  431d              ORRS     r5,r5,r3
;;;1222       /* Store the new register value */
;;;1223       ADCx->SMPR2 = tmpreg1;
00002c  6105              STR      r5,[r0,#0x10]
                  |L28.46|
;;;1224     }
;;;1225     /* Rank configuration */
;;;1226     /* Get the old register value */
;;;1227     tmpreg1 = ADCx->JSQR;
00002e  6b83              LDR      r3,[r0,#0x38]
;;;1228     /* Get JL value: Number = JL+1 */
;;;1229     tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
000030  f3c35401          UBFX     r4,r3,#20,#2
;;;1230     /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
;;;1231     tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
000034  1b12              SUBS     r2,r2,r4
000036  1c92              ADDS     r2,r2,#2
000038  eb020282          ADD      r2,r2,r2,LSL #2
00003c  241f              MOVS     r4,#0x1f
00003e  4094              LSLS     r4,r4,r2
;;;1232     /* Clear the old JSQx bits for the selected rank */
;;;1233     tmpreg1 &= ~tmpreg2;
000040  43a3              BICS     r3,r3,r4
;;;1234     /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
;;;1235     tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
000042  4091              LSLS     r1,r1,r2
;;;1236     /* Set the JSQx bits for the selected rank */
;;;1237     tmpreg1 |= tmpreg2;
000044  430b              ORRS     r3,r3,r1
;;;1238     /* Store the new register value */
;;;1239     ADCx->JSQR = tmpreg1;
000046  6383              STR      r3,[r0,#0x38]
;;;1240   }
000048  bd70              POP      {r4-r6,pc}
;;;1241   
                          ENDP


                          AREA ||i.ADC_InjectedDiscModeCmd||, CODE, READONLY, ALIGN=1

                  ADC_InjectedDiscModeCmd PROC
;;;1444     */
;;;1445   void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;1446   {
;;;1447     /* Check the parameters */
;;;1448     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1449     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1450     if (NewState != DISABLE)
;;;1451     {
;;;1452       /* Enable the selected ADC injected discontinuous mode */
;;;1453       ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
;;;1454     }
;;;1455     else
;;;1456     {
;;;1457       /* Disable the selected ADC injected discontinuous mode */
;;;1458       ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
000002  6841              LDR      r1,[r0,#4]
000004  d002              BEQ      |L29.12|
000006  f4415180          ORR      r1,r1,#0x1000         ;1453
00000a  e001              B        |L29.16|
                  |L29.12|
00000c  f4215180          BIC      r1,r1,#0x1000
                  |L29.16|
000010  6041              STR      r1,[r0,#4]            ;1453
;;;1459     }
;;;1460   }
000012  4770              BX       lr
;;;1461   
                          ENDP


                          AREA ||i.ADC_InjectedSequencerLengthConfig||, CODE, READONLY, ALIGN=1

                  ADC_InjectedSequencerLengthConfig PROC
;;;1248     */
;;;1249   void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
000000  6b82              LDR      r2,[r0,#0x38]
;;;1250   {
;;;1251     uint32_t tmpreg1 = 0;
;;;1252     uint32_t tmpreg2 = 0;
;;;1253     /* Check the parameters */
;;;1254     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1255     assert_param(IS_ADC_INJECTED_LENGTH(Length));
;;;1256     
;;;1257     /* Get the old register value */
;;;1258     tmpreg1 = ADCx->JSQR;
;;;1259     
;;;1260     /* Clear the old injected sequence length JL bits */
;;;1261     tmpreg1 &= JSQR_JL_RESET;
;;;1262     
;;;1263     /* Set the injected sequence length JL bits */
;;;1264     tmpreg2 = Length - 1; 
000002  1e49              SUBS     r1,r1,#1
000004  f4221240          BIC      r2,r2,#0x300000       ;1261
;;;1265     tmpreg1 |= tmpreg2 << 20;
000008  ea425101          ORR      r1,r2,r1,LSL #20
;;;1266     
;;;1267     /* Store the new register value */
;;;1268     ADCx->JSQR = tmpreg1;
00000c  6381              STR      r1,[r0,#0x38]
;;;1269   }
00000e  4770              BX       lr
;;;1270   
                          ENDP


                          AREA ||i.ADC_MultiModeDMARequestAfterLastTransferCmd||, CODE, READONLY, ALIGN=2

                  ADC_MultiModeDMARequestAfterLastTransferCmd PROC
;;;1098     */
;;;1099   void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
000000  4906              LDR      r1,|L31.28|
;;;1100   {
;;;1101     /* Check the parameters */
;;;1102     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1103     if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;1104     {
;;;1105       /* Enable the selected ADC DMA request after last transfer */
;;;1106       ADC->CCR |= (uint32_t)ADC_CCR_DDS;
;;;1107     }
;;;1108     else
;;;1109     {
;;;1110       /* Disable the selected ADC DMA request after last transfer */
;;;1111       ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
000004  f8d10304          LDR      r0,[r1,#0x304]
000008  d002              BEQ      |L31.16|
00000a  f4405000          ORR      r0,r0,#0x2000         ;1106
00000e  e001              B        |L31.20|
                  |L31.16|
000010  f4205000          BIC      r0,r0,#0x2000
                  |L31.20|
000014  f8c10304          STR      r0,[r1,#0x304]        ;1106
;;;1112     }
;;;1113   }
000018  4770              BX       lr
;;;1114   /**
                          ENDP

00001a  0000              DCW      0x0000
                  |L31.28|
                          DCD      0x40012000

                          AREA ||i.ADC_RegularChannelConfig||, CODE, READONLY, ALIGN=1

                  ADC_RegularChannelConfig PROC
;;;707      */
;;;708    void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
000000  b570              PUSH     {r4-r6,lr}
;;;709    {
;;;710      uint32_t tmpreg1 = 0, tmpreg2 = 0;
;;;711      /* Check the parameters */
;;;712      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;713      assert_param(IS_ADC_CHANNEL(ADC_Channel));
;;;714      assert_param(IS_ADC_REGULAR_RANK(Rank));
;;;715      assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
;;;716      
;;;717      /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
;;;718      if (ADC_Channel > ADC_Channel_9)
;;;719      {
;;;720        /* Get the old register value */
;;;721        tmpreg1 = ADCx->SMPR1;
;;;722        
;;;723        /* Calculate the mask to clear */
;;;724        tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
000002  2607              MOVS     r6,#7
000004  2909              CMP      r1,#9                 ;718
000006  d90a              BLS      |L32.30|
000008  68c5              LDR      r5,[r0,#0xc]          ;721
00000a  f1a1040a          SUB      r4,r1,#0xa
00000e  eb040444          ADD      r4,r4,r4,LSL #1
000012  40a6              LSLS     r6,r6,r4
;;;725        
;;;726        /* Clear the old sample time */
;;;727        tmpreg1 &= ~tmpreg2;
000014  43b5              BICS     r5,r5,r6
;;;728        
;;;729        /* Calculate the mask to set */
;;;730        tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
000016  40a3              LSLS     r3,r3,r4
;;;731        
;;;732        /* Set the new sample time */
;;;733        tmpreg1 |= tmpreg2;
000018  431d              ORRS     r5,r5,r3
;;;734        
;;;735        /* Store the new register value */
;;;736        ADCx->SMPR1 = tmpreg1;
00001a  60c5              STR      r5,[r0,#0xc]
00001c  e007              B        |L32.46|
                  |L32.30|
;;;737      }
;;;738      else /* ADC_Channel include in ADC_Channel_[0..9] */
;;;739      {
;;;740        /* Get the old register value */
;;;741        tmpreg1 = ADCx->SMPR2;
00001e  6905              LDR      r5,[r0,#0x10]
;;;742        
;;;743        /* Calculate the mask to clear */
;;;744        tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
000020  eb010441          ADD      r4,r1,r1,LSL #1
000024  40a6              LSLS     r6,r6,r4
;;;745        
;;;746        /* Clear the old sample time */
;;;747        tmpreg1 &= ~tmpreg2;
000026  43b5              BICS     r5,r5,r6
;;;748        
;;;749        /* Calculate the mask to set */
;;;750        tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
000028  40a3              LSLS     r3,r3,r4
;;;751        
;;;752        /* Set the new sample time */
;;;753        tmpreg1 |= tmpreg2;
00002a  431d              ORRS     r5,r5,r3
;;;754        
;;;755        /* Store the new register value */
;;;756        ADCx->SMPR2 = tmpreg1;
00002c  6105              STR      r5,[r0,#0x10]
                  |L32.46|
;;;757      }
;;;758      /* For Rank 1 to 6 */
;;;759      if (Rank < 7)
;;;760      {
;;;761        /* Get the old register value */
;;;762        tmpreg1 = ADCx->SQR3;
;;;763        
;;;764        /* Calculate the mask to clear */
;;;765        tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
00002e  231f              MOVS     r3,#0x1f
000030  2a07              CMP      r2,#7                 ;759
000032  d209              BCS      |L32.72|
000034  6b44              LDR      r4,[r0,#0x34]         ;762
000036  1e52              SUBS     r2,r2,#1
000038  eb020282          ADD      r2,r2,r2,LSL #2
00003c  4093              LSLS     r3,r3,r2
;;;766        
;;;767        /* Clear the old SQx bits for the selected rank */
;;;768        tmpreg1 &= ~tmpreg2;
00003e  439c              BICS     r4,r4,r3
;;;769        
;;;770        /* Calculate the mask to set */
;;;771        tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
000040  4091              LSLS     r1,r1,r2
;;;772        
;;;773        /* Set the SQx bits for the selected rank */
;;;774        tmpreg1 |= tmpreg2;
000042  430c              ORRS     r4,r4,r1
;;;775        
;;;776        /* Store the new register value */
;;;777        ADCx->SQR3 = tmpreg1;
000044  6344              STR      r4,[r0,#0x34]
;;;778      }
;;;779      /* For Rank 7 to 12 */
;;;780      else if (Rank < 13)
;;;781      {
;;;782        /* Get the old register value */
;;;783        tmpreg1 = ADCx->SQR2;
;;;784        
;;;785        /* Calculate the mask to clear */
;;;786        tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
;;;787        
;;;788        /* Clear the old SQx bits for the selected rank */
;;;789        tmpreg1 &= ~tmpreg2;
;;;790        
;;;791        /* Calculate the mask to set */
;;;792        tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
;;;793        
;;;794        /* Set the SQx bits for the selected rank */
;;;795        tmpreg1 |= tmpreg2;
;;;796        
;;;797        /* Store the new register value */
;;;798        ADCx->SQR2 = tmpreg1;
;;;799      }
;;;800      /* For Rank 13 to 16 */
;;;801      else
;;;802      {
;;;803        /* Get the old register value */
;;;804        tmpreg1 = ADCx->SQR1;
;;;805        
;;;806        /* Calculate the mask to clear */
;;;807        tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
;;;808        
;;;809        /* Clear the old SQx bits for the selected rank */
;;;810        tmpreg1 &= ~tmpreg2;
;;;811        
;;;812        /* Calculate the mask to set */
;;;813        tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
;;;814        
;;;815        /* Set the SQx bits for the selected rank */
;;;816        tmpreg1 |= tmpreg2;
;;;817        
;;;818        /* Store the new register value */
;;;819        ADCx->SQR1 = tmpreg1;
;;;820      }
;;;821    }
000046  bd70              POP      {r4-r6,pc}
                  |L32.72|
000048  2a0d              CMP      r2,#0xd               ;780
00004a  d209              BCS      |L32.96|
00004c  6b04              LDR      r4,[r0,#0x30]         ;783
00004e  1fd2              SUBS     r2,r2,#7              ;786
000050  eb020282          ADD      r2,r2,r2,LSL #2       ;786
000054  4093              LSLS     r3,r3,r2              ;786
000056  439c              BICS     r4,r4,r3              ;789
000058  4091              LSLS     r1,r1,r2              ;792
00005a  430c              ORRS     r4,r4,r1              ;795
00005c  6304              STR      r4,[r0,#0x30]         ;798
00005e  bd70              POP      {r4-r6,pc}
                  |L32.96|
000060  6ac4              LDR      r4,[r0,#0x2c]         ;804
000062  3a0d              SUBS     r2,r2,#0xd            ;807
000064  eb020282          ADD      r2,r2,r2,LSL #2       ;807
000068  4093              LSLS     r3,r3,r2              ;807
00006a  439c              BICS     r4,r4,r3              ;810
00006c  4091              LSLS     r1,r1,r2              ;813
00006e  430c              ORRS     r4,r4,r1              ;816
000070  62c4              STR      r4,[r0,#0x2c]         ;819
000072  bd70              POP      {r4-r6,pc}
;;;822    
                          ENDP


                          AREA ||i.ADC_SetInjectedOffset||, CODE, READONLY, ALIGN=1

                  ADC_SetInjectedOffset PROC
;;;1283     */
;;;1284   void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
000000  b508              PUSH     {r3,lr}
;;;1285   {
;;;1286       __IO uint32_t tmp = 0;
;;;1287     /* Check the parameters */
;;;1288     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1289     assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
;;;1290     assert_param(IS_ADC_OFFSET(Offset));
;;;1291     
;;;1292     tmp = (uint32_t)ADCx;
;;;1293     tmp += ADC_InjectedChannel;
000002  4408              ADD      r0,r0,r1
;;;1294     
;;;1295     /* Set the selected injected channel data offset */
;;;1296    *(__IO uint32_t *) tmp = (uint32_t)Offset;
000004  9000              STR      r0,[sp,#0]
000006  6002              STR      r2,[r0,#0]
;;;1297   }
000008  bd08              POP      {r3,pc}
;;;1298   
                          ENDP


                          AREA ||i.ADC_SoftwareStartConv||, CODE, READONLY, ALIGN=1

                  ADC_SoftwareStartConv PROC
;;;827      */
;;;828    void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
000000  6881              LDR      r1,[r0,#8]
;;;829    {
;;;830      /* Check the parameters */
;;;831      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;832      
;;;833      /* Enable the selected ADC conversion for regular group */
;;;834      ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
000002  f0414180          ORR      r1,r1,#0x40000000
000006  6081              STR      r1,[r0,#8]
;;;835    }
000008  4770              BX       lr
;;;836    
                          ENDP


                          AREA ||i.ADC_SoftwareStartInjectedConv||, CODE, READONLY, ALIGN=1

                  ADC_SoftwareStartInjectedConv PROC
;;;1376     */
;;;1377   void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
000000  6881              LDR      r1,[r0,#8]
;;;1378   {
;;;1379     /* Check the parameters */
;;;1380     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1381     /* Enable the selected ADC conversion for injected group */
;;;1382     ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
000002  f4410180          ORR      r1,r1,#0x400000
000006  6081              STR      r1,[r0,#8]
;;;1383   }
000008  4770              BX       lr
;;;1384   
                          ENDP


                          AREA ||i.ADC_StructInit||, CODE, READONLY, ALIGN=1

                  ADC_StructInit PROC
;;;302      */
;;;303    void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
000000  2100              MOVS     r1,#0
;;;304    {
;;;305      /* Initialize the ADC_Mode member */
;;;306      ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
;;;307    
;;;308      /* initialize the ADC_ScanConvMode member */
;;;309      ADC_InitStruct->ADC_ScanConvMode = DISABLE;
000002  6001              STR      r1,[r0,#0]
000004  7101              STRB     r1,[r0,#4]
;;;310    
;;;311      /* Initialize the ADC_ContinuousConvMode member */
;;;312      ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
000006  7141              STRB     r1,[r0,#5]
;;;313    
;;;314      /* Initialize the ADC_ExternalTrigConvEdge member */
;;;315      ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
;;;316    
;;;317      /* Initialize the ADC_ExternalTrigConv member */
;;;318      ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
000008  6081              STR      r1,[r0,#8]
;;;319    
;;;320      /* Initialize the ADC_DataAlign member */
;;;321      ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
00000a  60c1              STR      r1,[r0,#0xc]
;;;322    
;;;323      /* Initialize the ADC_NbrOfConversion member */
;;;324      ADC_InitStruct->ADC_NbrOfConversion = 1;
00000c  6101              STR      r1,[r0,#0x10]
00000e  2101              MOVS     r1,#1
000010  7501              STRB     r1,[r0,#0x14]
;;;325    }
000012  4770              BX       lr
;;;326    
                          ENDP


                          AREA ||i.ADC_TempSensorVrefintCmd||, CODE, READONLY, ALIGN=2

                  ADC_TempSensorVrefintCmd PROC
;;;584      */
;;;585    void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
000000  4906              LDR      r1,|L37.28|
;;;586    {
;;;587      /* Check the parameters */
;;;588      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;589      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;590      {
;;;591        /* Enable the temperature sensor and Vrefint channel*/
;;;592        ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
;;;593      }
;;;594      else
;;;595      {
;;;596        /* Disable the temperature sensor and Vrefint channel*/
;;;597        ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
000004  f8d10304          LDR      r0,[r1,#0x304]
000008  d002              BEQ      |L37.16|
00000a  f4400000          ORR      r0,r0,#0x800000       ;592
00000e  e001              B        |L37.20|
                  |L37.16|
000010  f4200000          BIC      r0,r0,#0x800000
                  |L37.20|
000014  f8c10304          STR      r0,[r1,#0x304]        ;592
;;;598      }
;;;599    }
000018  4770              BX       lr
;;;600    
                          ENDP

00001a  0000              DCW      0x0000
                  |L37.28|
                          DCD      0x40012000

                          AREA ||i.ADC_VBATCmd||, CODE, READONLY, ALIGN=2

                  ADC_VBATCmd PROC
;;;606      */
;;;607    void ADC_VBATCmd(FunctionalState NewState)                             
000000  4906              LDR      r1,|L38.28|
;;;608    {
;;;609      /* Check the parameters */
;;;610      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;611      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;612      {
;;;613        /* Enable the VBAT channel*/
;;;614        ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
;;;615      }
;;;616      else
;;;617      {
;;;618        /* Disable the VBAT channel*/
;;;619        ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
000004  f8d10304          LDR      r0,[r1,#0x304]
000008  d002              BEQ      |L38.16|
00000a  f4400080          ORR      r0,r0,#0x400000       ;614
00000e  e001              B        |L38.20|
                  |L38.16|
000010  f4200080          BIC      r0,r0,#0x400000
                  |L38.20|
000014  f8c10304          STR      r0,[r1,#0x304]        ;614
;;;620      }
;;;621    }
000018  4770              BX       lr
;;;622    
                          ENDP

00001a  0000              DCW      0x0000
                  |L38.28|
                          DCD      0x40012000

;*** Start embedded assembler ***

#line 1 "Libraries\\CMSIS\\stm32f4xx_adc.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f4xx_adc_c_e11a2ea2____REV16|
#line 114 ".\\Libraries\\CMSIS\\core_cmInstr.h"
|__asm___15_stm32f4xx_adc_c_e11a2ea2____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f4xx_adc_c_e11a2ea2____REVSH|
#line 128
|__asm___15_stm32f4xx_adc_c_e11a2ea2____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
