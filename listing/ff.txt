; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\media_usb_key\ff.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\media_usb_key\ff.d --cpu=Cortex-M4 --apcs=interwork -I.\Libraries -I.\Utilities -I.\Libraries\CMSIS\ST\STM32F4xx\Include -I.\inc -I.\src -I.\Libraries\STM32F4xx_StdPeriph_Driver -I.\Libraries\STM32_USB_HOST_Library -I.\Libraries\STM32_USB_OTG_Driver -I.\Utilities\STM32F4-Discovery -I.\Libraries\CMSIS -I.\Utilities\Third_Party\fat_fs -IC:\Keil4\ARM\RV31\INC -IC:\Keil4\ARM\CMSIS\Include -IC:\Keil4\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DUSE_USB_OTG_FS -DSTM32F4XX -DMEDIA_USB_KEY -D__FPU_PRESENT=0 --omf_browse=.\media_usb_key\ff.crf Utilities\Third_Party\fat_fs\ff.c]
                          THUMB

                          AREA ||i.check_fs||, CODE, READONLY, ALIGN=2

                  check_fs PROC
;;;1437   static
;;;1438   BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
000000  b510              PUSH     {r4,lr}
;;;1439   	FATFS *fs,	/* File system object */
;;;1440   	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
;;;1441   )
;;;1442   {
000002  4604              MOV      r4,r0
;;;1443   	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
000004  460a              MOV      r2,r1
000006  7840              LDRB     r0,[r0,#1]
000008  2301              MOVS     r3,#1
00000a  f1040130          ADD      r1,r4,#0x30
00000e  f7fffffe          BL       disk_read
000012  b108              CBZ      r0,|L1.24|
;;;1444   		return 3;
000014  2003              MOVS     r0,#3
;;;1445   	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
;;;1446   		return 2;
;;;1447   
;;;1448   	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
;;;1449   		return 0;
;;;1450   	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
;;;1451   		return 0;
;;;1452   
;;;1453   	return 1;
;;;1454   }
000016  bd10              POP      {r4,pc}
                  |L1.24|
000018  f8b4122e          LDRH     r1,[r4,#0x22e]        ;1445
00001c  f5a1402a          SUB      r0,r1,#0xaa00         ;1445
000020  3855              SUBS     r0,r0,#0x55           ;1445
000022  d001              BEQ      |L1.40|
000024  2002              MOVS     r0,#2                 ;1446
000026  bd10              POP      {r4,pc}
                  |L1.40|
000028  f8940066          LDRB     r0,[r4,#0x66]         ;1448
00002c  f8b41067          LDRH     r1,[r4,#0x67]         ;1448
000030  ea402101          ORR      r1,r0,r1,LSL #8       ;1448
000034  4808              LDR      r0,|L1.88|
000036  ebb02f01          CMP      r0,r1,LSL #8          ;1448
00003a  d008              BEQ      |L1.78|
00003c  f8941082          LDRB     r1,[r4,#0x82]         ;1450
000040  f8b42083          LDRH     r2,[r4,#0x83]         ;1450
000044  ea412102          ORR      r1,r1,r2,LSL #8       ;1450
000048  ebb02f01          CMP      r0,r1,LSL #8          ;1450
00004c  d101              BNE      |L1.82|
                  |L1.78|
00004e  2000              MOVS     r0,#0                 ;1451
000050  bd10              POP      {r4,pc}
                  |L1.82|
000052  2001              MOVS     r0,#1                 ;1453
000054  bd10              POP      {r4,pc}
;;;1455   
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
                          DCD      0x54414600

                          AREA ||i.chk_mounted||, CODE, READONLY, ALIGN=2

                  chk_mounted PROC
;;;1463   
;;;1464   FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1465   	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
;;;1466   	FATFS **rfs,		/* Pointer to pointer to the found file system object */
;;;1467   	BYTE chk_wp			/* !=0: Check media write protection for write access */
;;;1468   )
;;;1469   {
000004  460b              MOV      r3,r1
;;;1470   	BYTE fmt, *tbl;
;;;1471   	UINT vol;
;;;1472   	DSTATUS stat;
;;;1473   	DWORD bsect, fsize, tsect, mclst;
;;;1474   	const XCHAR *p = *path;
;;;1475   	FATFS *fs;
;;;1476   
;;;1477   	/* Get logical drive number from the path name */
;;;1478   	vol = p[0] - '0';				/* Is there a drive number? */
000006  6801              LDR      r1,[r0,#0]
000008  4616              MOV      r6,r2                 ;1469
00000a  780a              LDRB     r2,[r1,#0]
00000c  3a30              SUBS     r2,r2,#0x30
;;;1479   	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
00000e  2a09              CMP      r2,#9
000010  d808              BHI      |L2.36|
000012  784c              LDRB     r4,[r1,#1]
000014  2c3a              CMP      r4,#0x3a
000016  d105              BNE      |L2.36|
;;;1480   		p += 2; *path = p;			/* Return pointer to the path name */
000018  1c89              ADDS     r1,r1,#2
00001a  6001              STR      r1,[r0,#0]
00001c  b112              CBZ      r2,|L2.36|
;;;1481   	} else {						/* No drive number is given */
;;;1482   #if _FS_RPATH
;;;1483   		vol = Drive;				/* Use current drive */
;;;1484   #else
;;;1485   		vol = 0;					/* Use drive 0 */
;;;1486   #endif
;;;1487   	}
;;;1488   
;;;1489   	/* Check if the logical drive is valid or not */
;;;1490   	if (vol >= _DRIVES) 			/* Is the drive number valid? */
;;;1491   		return FR_INVALID_DRIVE;
00001e  200b              MOVS     r0,#0xb
                  |L2.32|
;;;1492   	*rfs = fs = FatFs[vol];			/* Return pointer to the corresponding file system object */
;;;1493   	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
;;;1494   
;;;1495   	ENTER_FF(fs);					/* Lock file system */
;;;1496   
;;;1497   	if (fs->fs_type) {				/* If the logical drive has been mounted */
;;;1498   		stat = disk_status(fs->drive);
;;;1499   		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
;;;1500   #if !_FS_READONLY
;;;1501   			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
;;;1502   				return FR_WRITE_PROTECTED;
;;;1503   #endif
;;;1504   			return FR_OK;			/* The file system object is valid */
;;;1505   		}
;;;1506   	}
;;;1507   
;;;1508   	/* The logical drive must be mounted. Following code attempts to mount the volume */
;;;1509   
;;;1510   	fs->fs_type = 0;					/* Clear the file system object */
;;;1511   	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
;;;1512   	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
;;;1513   	if (stat & STA_NOINIT)				/* Check if the drive is ready */
;;;1514   		return FR_NOT_READY;
;;;1515   #if _MAX_SS != 512						/* Get disk sector size if needed */
;;;1516   	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
;;;1517   		return FR_NO_FILESYSTEM;
;;;1518   #endif
;;;1519   #if !_FS_READONLY
;;;1520   	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
;;;1521   		return FR_WRITE_PROTECTED;
;;;1522   #endif
;;;1523   	/* Search FAT partition on the drive */
;;;1524   	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
;;;1525   	if (fmt == 1) {						/* Not an FAT boot record, it may be partitioned */
;;;1526   		/* Check a partition listed in top of the partition table */
;;;1527   		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
;;;1528   		if (tbl[4]) {									/* Is the partition existing? */
;;;1529   			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
;;;1530   			fmt = check_fs(fs, bsect);					/* Check the partition */
;;;1531   		}
;;;1532   	}
;;;1533   	if (fmt == 3) return FR_DISK_ERR;
;;;1534   	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT partition is found */
;;;1535   		return FR_NO_FILESYSTEM;
;;;1536   
;;;1537   	/* Initialize the file system object */
;;;1538   	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
;;;1539   	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
;;;1540   	fs->sects_fat = fsize;
;;;1541   	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
;;;1542   	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
;;;1543   	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
;;;1544   	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
;;;1545   	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
;;;1546   	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
;;;1547   	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
;;;1548   	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
;;;1549   		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
;;;1550   		) / fs->csize + 2;
;;;1551   
;;;1552   	fmt = FS_FAT12;										/* Determine the FAT sub type */
;;;1553   	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
;;;1554   	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
;;;1555   
;;;1556   	if (fmt == FS_FAT32)
;;;1557   		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
;;;1558   	else
;;;1559   		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
;;;1560   	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
;;;1561   
;;;1562   #if !_FS_READONLY
;;;1563   	/* Initialize allocation information */
;;;1564   	fs->free_clust = 0xFFFFFFFF;
;;;1565   	fs->wflag = 0;
;;;1566   	/* Get fsinfo if needed */
;;;1567   	if (fmt == FS_FAT32) {
;;;1568   	 	fs->fsi_flag = 0;
;;;1569   		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
;;;1570   		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
;;;1571   			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
;;;1572   			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
;;;1573   			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
;;;1574   			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
;;;1575   			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
;;;1576   		}
;;;1577   	}
;;;1578   #endif
;;;1579   	fs->fs_type = fmt;		/* FAT sub-type */
;;;1580   	fs->winsect = 0;		/* Invalidate sector cache */
;;;1581   #if _FS_RPATH
;;;1582   	fs->cdir = 0;			/* Current directory (root dir) */
;;;1583   #endif
;;;1584   	fs->id = ++Fsid;		/* File system mount ID */
;;;1585   
;;;1586   	return FR_OK;
;;;1587   }
000020  e8bd87f0          POP      {r4-r10,pc}
                  |L2.36|
000024  486d              LDR      r0,|L2.476|
000026  6804              LDR      r4,[r0,#0]            ;1492
000028  601c              STR      r4,[r3,#0]            ;1493
00002a  b1a4              CBZ      r4,|L2.86|
00002c  7820              LDRB     r0,[r4,#0]            ;1497
00002e  b120              CBZ      r0,|L2.58|
000030  7860              LDRB     r0,[r4,#1]            ;1498
000032  f7fffffe          BL       disk_status
000036  07c1              LSLS     r1,r0,#31             ;1499
000038  d00f              BEQ      |L2.90|
                  |L2.58|
00003a  f04f0900          MOV      r9,#0                 ;1510
00003e  f8849000          STRB     r9,[r4,#0]            ;1510
000042  4648              MOV      r0,r9                 ;1510
000044  f8849001          STRB     r9,[r4,#1]            ;1511
000048  f7fffffe          BL       disk_initialize
00004c  4605              MOV      r5,r0                 ;1512
00004e  07c0              LSLS     r0,r0,#31             ;1513
000050  d008              BEQ      |L2.100|
000052  2003              MOVS     r0,#3                 ;1514
000054  e7e4              B        |L2.32|
                  |L2.86|
000056  200c              MOVS     r0,#0xc               ;1493
000058  e7e2              B        |L2.32|
                  |L2.90|
00005a  b10e              CBZ      r6,|L2.96|
00005c  0740              LSLS     r0,r0,#29             ;1501
00005e  d40f              BMI      |L2.128|
                  |L2.96|
000060  2000              MOVS     r0,#0                 ;1504
000062  e7dd              B        |L2.32|
                  |L2.100|
000064  7860              LDRB     r0,[r4,#1]            ;1516
000066  f104020a          ADD      r2,r4,#0xa            ;1516
00006a  2102              MOVS     r1,#2                 ;1516
00006c  f7fffffe          BL       disk_ioctl
000070  bb38              CBNZ     r0,|L2.194|
000072  8960              LDRH     r0,[r4,#0xa]          ;1516
000074  f5b06f80          CMP      r0,#0x400             ;1516
000078  d823              BHI      |L2.194|
00007a  b11e              CBZ      r6,|L2.132|
00007c  0768              LSLS     r0,r5,#29             ;1520
00007e  d501              BPL      |L2.132|
                  |L2.128|
000080  200a              MOVS     r0,#0xa               ;1521
000082  e7cd              B        |L2.32|
                  |L2.132|
000084  2600              MOVS     r6,#0                 ;1524
000086  4631              MOV      r1,r6                 ;1524
000088  4620              MOV      r0,r4                 ;1524
00008a  f7fffffe          BL       check_fs
00008e  2801              CMP      r0,#1                 ;1525
000090  d10c              BNE      |L2.172|
000092  f50470f7          ADD      r0,r4,#0x1ee          ;1527
000096  7901              LDRB     r1,[r0,#4]            ;1528
000098  b199              CBZ      r1,|L2.194|
00009a  7a01              LDRB     r1,[r0,#8]            ;1529
00009c  f8d00009          LDR      r0,[r0,#9]            ;1529
0000a0  ea412600          ORR      r6,r1,r0,LSL #8       ;1529
0000a4  4631              MOV      r1,r6                 ;1530
0000a6  4620              MOV      r0,r4                 ;1530
0000a8  f7fffffe          BL       check_fs
                  |L2.172|
0000ac  2803              CMP      r0,#3                 ;1533
0000ae  d001              BEQ      |L2.180|
0000b0  b938              CBNZ     r0,|L2.194|
0000b2  e001              B        |L2.184|
                  |L2.180|
0000b4  2001              MOVS     r0,#1                 ;1533
0000b6  e7b3              B        |L2.32|
                  |L2.184|
0000b8  f8b4003b          LDRH     r0,[r4,#0x3b]         ;1534
0000bc  8965              LDRH     r5,[r4,#0xa]          ;1534
0000be  42a8              CMP      r0,r5                 ;1534
0000c0  d001              BEQ      |L2.198|
                  |L2.194|
0000c2  200d              MOVS     r0,#0xd               ;1535
0000c4  e7ac              B        |L2.32|
                  |L2.198|
0000c6  f8b40046          LDRH     r0,[r4,#0x46]         ;1538
0000ca  b928              CBNZ     r0,|L2.216|
0000cc  f8940054          LDRB     r0,[r4,#0x54]         ;1539
0000d0  f8d41055          LDR      r1,[r4,#0x55]         ;1539
0000d4  ea402001          ORR      r0,r0,r1,LSL #8       ;1539
                  |L2.216|
0000d8  61a0              STR      r0,[r4,#0x18]         ;1541
0000da  f8941040          LDRB     r1,[r4,#0x40]         ;1541
0000de  70e1              STRB     r1,[r4,#3]            ;1541
0000e0  8fe7              LDRH     r7,[r4,#0x3e]         ;1543
0000e2  4341              MULS     r1,r0,r1              ;1542
0000e4  fa16f287          UXTAH    r2,r6,r7              ;1543
0000e8  6222              STR      r2,[r4,#0x20]         ;1544
0000ea  f894c03d          LDRB     r12,[r4,#0x3d]        ;1544
0000ee  f884c002          STRB     r12,[r4,#2]           ;1544
0000f2  f8b43041          LDRH     r3,[r4,#0x41]         ;1545
0000f6  8123              STRH     r3,[r4,#8]            ;1545
0000f8  f8b40043          LDRH     r0,[r4,#0x43]         ;1546
0000fc  b928              CBNZ     r0,|L2.266|
0000fe  f8940050          LDRB     r0,[r4,#0x50]         ;1547
000102  f8d48051          LDR      r8,[r4,#0x51]         ;1547
000106  ea402008          ORR      r0,r0,r8,LSL #8       ;1547
                  |L2.266|
00010a  096d              LSRS     r5,r5,#5              ;1548
00010c  fbb3f3f5          UDIV     r3,r3,r5              ;1548
000110  1bc0              SUBS     r0,r0,r7              ;1548
000112  1a40              SUBS     r0,r0,r1              ;1548
000114  1ac0              SUBS     r0,r0,r3              ;1548
000116  fbb0f0fc          UDIV     r0,r0,r12             ;1548
00011a  1c80              ADDS     r0,r0,#2              ;1548
00011c  2501              MOVS     r5,#1                 ;1552
00011e  f64077f7          MOV      r7,#0xff7             ;1553
000122  61e0              STR      r0,[r4,#0x1c]         ;1553
000124  42b8              CMP      r0,r7                 ;1553
000126  d300              BCC      |L2.298|
000128  2502              MOVS     r5,#2                 ;1553
                  |L2.298|
00012a  f64f77f7          MOV      r7,#0xfff7            ;1554
00012e  42b8              CMP      r0,r7                 ;1554
000130  d301              BCC      |L2.310|
000132  2503              MOVS     r5,#3                 ;1554
000134  e00f              B        |L2.342|
                  |L2.310|
000136  2d03              CMP      r5,#3                 ;1556
000138  d00d              BEQ      |L2.342|
00013a  1850              ADDS     r0,r2,r1              ;1559
                  |L2.316|
00013c  6260              STR      r0,[r4,#0x24]         ;1560
00013e  1858              ADDS     r0,r3,r1              ;1560
000140  4410              ADD      r0,r0,r2              ;1560
000142  62a0              STR      r0,[r4,#0x28]         ;1564
000144  f04f30ff          MOV      r0,#0xffffffff        ;1564
000148  6120              STR      r0,[r4,#0x10]         ;1565
00014a  464f              MOV      r7,r9                 ;1565
00014c  f8849004          STRB     r9,[r4,#4]            ;1565
000150  2d03              CMP      r5,#3                 ;1567
000152  d007              BEQ      |L2.356|
000154  e039              B        |L2.458|
                  |L2.342|
000156  f894005c          LDRB     r0,[r4,#0x5c]         ;1557
00015a  f8d4705d          LDR      r7,[r4,#0x5d]         ;1557
00015e  ea402007          ORR      r0,r0,r7,LSL #8       ;1557
000162  e7eb              B        |L2.316|
                  |L2.356|
000164  7167              STRB     r7,[r4,#5]            ;1568
000166  f8b40060          LDRH     r0,[r4,#0x60]         ;1569
00016a  fa16f280          UXTAH    r2,r6,r0              ;1569
00016e  6162              STR      r2,[r4,#0x14]         ;1570
000170  7860              LDRB     r0,[r4,#1]            ;1570
000172  2301              MOVS     r3,#1                 ;1570
000174  f1040130          ADD      r1,r4,#0x30           ;1570
000178  f7fffffe          BL       disk_read
00017c  bb28              CBNZ     r0,|L2.458|
00017e  f8b4022e          LDRH     r0,[r4,#0x22e]        ;1571
000182  f5a0412a          SUB      r1,r0,#0xaa00         ;1571
000186  3955              SUBS     r1,r1,#0x55           ;1571
000188  d11f              BNE      |L2.458|
00018a  f8940030          LDRB     r0,[r4,#0x30]         ;1572
00018e  f8d41031          LDR      r1,[r4,#0x31]         ;1572
000192  ea402001          ORR      r0,r0,r1,LSL #8       ;1572
000196  4912              LDR      r1,|L2.480|
000198  4288              CMP      r0,r1                 ;1572
00019a  d116              BNE      |L2.458|
00019c  f8940214          LDRB     r0,[r4,#0x214]        ;1573
0001a0  f8d41215          LDR      r1,[r4,#0x215]        ;1573
0001a4  ea402001          ORR      r0,r0,r1,LSL #8       ;1573
0001a8  490e              LDR      r1,|L2.484|
0001aa  4288              CMP      r0,r1                 ;1573
0001ac  d10d              BNE      |L2.458|
0001ae  f894021c          LDRB     r0,[r4,#0x21c]        ;1574
0001b2  f8d4121d          LDR      r1,[r4,#0x21d]        ;1574
0001b6  ea402001          ORR      r0,r0,r1,LSL #8       ;1574
0001ba  60e0              STR      r0,[r4,#0xc]          ;1575
0001bc  f8940218          LDRB     r0,[r4,#0x218]        ;1575
0001c0  f8d41219          LDR      r1,[r4,#0x219]        ;1575
0001c4  ea402001          ORR      r0,r0,r1,LSL #8       ;1575
0001c8  6120              STR      r0,[r4,#0x10]         ;1575
                  |L2.458|
0001ca  4904              LDR      r1,|L2.476|
0001cc  7025              STRB     r5,[r4,#0]            ;1579
0001ce  1f09              SUBS     r1,r1,#4              ;1584
0001d0  62e7              STR      r7,[r4,#0x2c]         ;1584
0001d2  8808              LDRH     r0,[r1,#0]            ;1584  ; Fsid
0001d4  1c40              ADDS     r0,r0,#1              ;1584
0001d6  8008              STRH     r0,[r1,#0]            ;1584
0001d8  80e0              STRH     r0,[r4,#6]            ;1584
0001da  e741              B        |L2.96|
;;;1588   
                          ENDP

                  |L2.476|
                          DCD      ||.data||+0x4
                  |L2.480|
                          DCD      0x41615252
                  |L2.484|
                          DCD      0x61417272

                          AREA ||i.clust2sect||, CODE, READONLY, ALIGN=1

                  clust2sect PROC
;;;527    
;;;528    DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
000000  69c2              LDR      r2,[r0,#0x1c]
;;;529    	FATFS *fs,		/* File system object */
;;;530    	DWORD clst		/* Cluster# to be converted */
;;;531    )
;;;532    {
;;;533    	clst -= 2;
000002  1e89              SUBS     r1,r1,#2
;;;534    	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
000004  1e92              SUBS     r2,r2,#2
000006  428a              CMP      r2,r1
000008  d801              BHI      |L3.14|
00000a  2000              MOVS     r0,#0
;;;535    	return clst * fs->csize + fs->database;
;;;536    }
00000c  4770              BX       lr
                  |L3.14|
00000e  6a82              LDR      r2,[r0,#0x28]         ;535
000010  7880              LDRB     r0,[r0,#2]            ;535
000012  fb012000          MLA      r0,r1,r0,r2           ;535
000016  4770              BX       lr
;;;537    
                          ENDP


                          AREA ||i.create_chain||, CODE, READONLY, ALIGN=1

                  create_chain PROC
;;;468    static
;;;469    DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;470    	FATFS *fs,			/* File system object */
;;;471    	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
;;;472    )
;;;473    {
000004  69c7              LDR      r7,[r0,#0x1c]
000006  ea5f0801          MOVS     r8,r1
00000a  4606              MOV      r6,r0
00000c  d008              BEQ      |L4.32|
;;;474    	DWORD cs, ncl, scl, mcl;
;;;475    
;;;476    
;;;477    	mcl = fs->max_clust;
;;;478    	if (clst == 0) {		/* Create new chain */
;;;479    		scl = fs->last_clust;			/* Get suggested start point */
;;;480    		if (scl == 0 || scl >= mcl) scl = 1;
;;;481    	}
;;;482    	else {					/* Stretch existing chain */
;;;483    		cs = get_fat(fs, clst);			/* Check the cluster status */
00000e  4641              MOV      r1,r8
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       get_fat
;;;484    		if (cs < 2) return 1;			/* It is an invalid cluster */
000016  2802              CMP      r0,#2
000018  d208              BCS      |L4.44|
00001a  2001              MOVS     r0,#1
                  |L4.28|
;;;485    		if (cs < mcl) return cs;		/* It is already followed by next cluster */
;;;486    		scl = clst;
;;;487    	}
;;;488    
;;;489    	ncl = scl;				/* Start cluster */
;;;490    	for (;;) {
;;;491    		ncl++;							/* Next cluster */
;;;492    		if (ncl >= mcl) {				/* Wrap around */
;;;493    			ncl = 2;
;;;494    			if (ncl > scl) return 0;	/* No free cluster */
;;;495    		}
;;;496    		cs = get_fat(fs, ncl);			/* Get the cluster status */
;;;497    		if (cs == 0) break;				/* Found a free cluster */
;;;498    		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
;;;499    			return cs;
;;;500    		if (ncl == scl) return 0;		/* No free cluster */
;;;501    	}
;;;502    
;;;503    	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
;;;504    		return 0xFFFFFFFF;
;;;505    	if (clst != 0) {					/* Link it to the previous one if needed */
;;;506    		if (put_fat(fs, clst, ncl))
;;;507    			return 0xFFFFFFFF;
;;;508    	}
;;;509    
;;;510    	fs->last_clust = ncl;				/* Update FSINFO */
;;;511    	if (fs->free_clust != 0xFFFFFFFF) {
;;;512    		fs->free_clust--;
;;;513    		fs->fsi_flag = 1;
;;;514    	}
;;;515    
;;;516    	return ncl;		/* Return new cluster number */
;;;517    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L4.32|
000020  68f5              LDR      r5,[r6,#0xc]          ;480
000022  b10d              CBZ      r5,|L4.40|
000024  42bd              CMP      r5,r7                 ;480
000026  d304              BCC      |L4.50|
                  |L4.40|
000028  2501              MOVS     r5,#1                 ;480
00002a  e002              B        |L4.50|
                  |L4.44|
00002c  42b8              CMP      r0,r7                 ;485
00002e  d3f5              BCC      |L4.28|
000030  4645              MOV      r5,r8                 ;486
                  |L4.50|
000032  462c              MOV      r4,r5                 ;489
                  |L4.52|
000034  1c64              ADDS     r4,r4,#1              ;491
000036  42bc              CMP      r4,r7                 ;492
000038  d302              BCC      |L4.64|
00003a  2402              MOVS     r4,#2                 ;493
00003c  2d02              CMP      r5,#2                 ;494
00003e  d30a              BCC      |L4.86|
                  |L4.64|
000040  4621              MOV      r1,r4                 ;496
000042  4630              MOV      r0,r6                 ;496
000044  f7fffffe          BL       get_fat
000048  b138              CBZ      r0,|L4.90|
00004a  1c41              ADDS     r1,r0,#1              ;498
00004c  d0e6              BEQ      |L4.28|
00004e  2801              CMP      r0,#1                 ;498
000050  d0e4              BEQ      |L4.28|
000052  42ac              CMP      r4,r5                 ;500
000054  d1ee              BNE      |L4.52|
                  |L4.86|
000056  2000              MOVS     r0,#0                 ;500
000058  e7e0              B        |L4.28|
                  |L4.90|
00005a  f06f4270          MVN      r2,#0xf0000000        ;503
00005e  4621              MOV      r1,r4                 ;503
000060  4630              MOV      r0,r6                 ;503
000062  f7fffffe          BL       put_fat
000066  f04f35ff          MOV      r5,#0xffffffff        ;498
00006a  b940              CBNZ     r0,|L4.126|
00006c  ea5f0008          MOVS     r0,r8                 ;505
000070  d007              BEQ      |L4.130|
000072  4601              MOV      r1,r0                 ;506
000074  4622              MOV      r2,r4                 ;506
000076  4630              MOV      r0,r6                 ;506
000078  f7fffffe          BL       put_fat
00007c  b108              CBZ      r0,|L4.130|
                  |L4.126|
00007e  4628              MOV      r0,r5                 ;507
000080  e7cc              B        |L4.28|
                  |L4.130|
000082  60f4              STR      r4,[r6,#0xc]          ;511
000084  6930              LDR      r0,[r6,#0x10]         ;511
000086  1c41              ADDS     r1,r0,#1              ;511
000088  d003              BEQ      |L4.146|
00008a  1e40              SUBS     r0,r0,#1              ;512
00008c  6130              STR      r0,[r6,#0x10]         ;513
00008e  2001              MOVS     r0,#1                 ;513
000090  7170              STRB     r0,[r6,#5]            ;513
                  |L4.146|
000092  4620              MOV      r0,r4                 ;516
000094  e7c2              B        |L4.28|
;;;518    #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.create_name||, CODE, READONLY, ALIGN=2

                  create_name PROC
;;;1097   static
;;;1098   FRESULT create_name (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1099   	DIR *dj,			/* Pointer to the directory object */
;;;1100   	const XCHAR **path	/* Pointer to pointer to the segment in the path string */
;;;1101   )
;;;1102   {
;;;1103   #ifdef _EXCVT
;;;1104   	static const BYTE cvt[] = _EXCVT;
;;;1105   #endif
;;;1106   
;;;1107   #if _USE_LFN	/* LFN configuration */
;;;1108   	BYTE b, cf;
;;;1109   	WCHAR w, *lfn;
;;;1110   	int i, ni, si, di;
;;;1111   	const XCHAR *p;
;;;1112   	
;;;1113   	/* Create LFN in Unicode */
;;;1114   	si = di = 0;
;;;1115   	p = *path;
;;;1116   	lfn = dj->lfn;
;;;1117   	for (;;) {
;;;1118   		w = p[si++];					/* Get a character */
;;;1119   		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
;;;1120   		if (di >= _MAX_LFN)				/* Reject too long name */
;;;1121   			return FR_INVALID_NAME;
;;;1122   #if !_LFN_UNICODE
;;;1123   		w &= 0xFF;
;;;1124   		if (IsDBCS1(w)) {				/* If it is a DBC 1st byte */
;;;1125   			b = p[si++];				/* Get 2nd byte */
;;;1126   			if (!IsDBCS2(b))			/* Reject invalid code for DBC */
;;;1127   				return FR_INVALID_NAME;
;;;1128   			//w = (w << 8) + b;
;;;1129   			else w = (w << 8) + b;
;;;1130   		}
;;;1131   		w = ff_convert(w, 1);			/* Convert OEM to Unicode */
;;;1132   		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
;;;1133   #endif
;;;1134   		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
;;;1135   			return FR_INVALID_NAME;
;;;1136   		lfn[di++] = w;					/* Store the Unicode char */
;;;1137   	}
;;;1138   	*path = &p[si];						/* Return pointer to the next segment */
;;;1139   	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1140   #if _FS_RPATH
;;;1141   	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
;;;1142   		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
;;;1143   		lfn[di] = 0;
;;;1144   		for (i = 0; i < 11; i++)
;;;1145   			dj->fn[i] = (i < di) ? '.' : ' ';
;;;1146   		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
;;;1147   		return FR_OK;
;;;1148   	}
;;;1149   #endif
;;;1150   	while (di) {						/* Strip trailing spaces and dots */
;;;1151   		w = lfn[di - 1];
;;;1152   		if (w != ' ' && w != '.') break;
;;;1153   		di--;
;;;1154   	}
;;;1155   	if (!di) return FR_INVALID_NAME;	/* Reject null string */
;;;1156   
;;;1157   	lfn[di] = 0;						/* LFN is created */
;;;1158   
;;;1159   	/* Create SFN in directory form */
;;;1160   	mem_set(dj->fn, ' ', 11);
;;;1161   	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
;;;1162   	if (si) cf |= NS_LOSS | NS_LFN;
;;;1163   	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
;;;1164   	
;;;1165   	b = i = 0; ni = 8;
;;;1166   	for (;;) {
;;;1167   		w = lfn[si++];					/* Get an LFN char */
;;;1168   		if (!w) break;					/* Break on end of the LFN */
;;;1169   		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
;;;1170   			cf |= NS_LOSS | NS_LFN; continue;
;;;1171   		}
;;;1172   		
;;;1173   		if (i >= ni || si == di) {		/* Extension or end of SFN */
;;;1174   			if (ni == 11) {				/* Long extension */
;;;1175   				cf |= NS_LOSS | NS_LFN; break;
;;;1176   			}
;;;1177   			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
;;;1178   			if (si > di) break;			/* No extension */
;;;1179   			si = di; i = 8; ni = 11;	/* Enter extension section */
;;;1180   			b <<= 2; continue;
;;;1181   		}
;;;1182   
;;;1183   		if (w >= 0x80) {				/* Non ASCII char */
;;;1184   #ifdef _EXCVT
;;;1185   			w = ff_convert(w, 0);		/* Unicode -> OEM code */
;;;1186   			if (w) w = cvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
;;;1187   #else
;;;1188   			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
;;;1189   #endif
;;;1190   			cf |= NS_LFN;				/* Force create LFN entry */
;;;1191   		}
;;;1192   		
;;;1193   		if (_DF1S && w >= 0x100) {		/* Double byte char */
;;;1194   			if (i >= ni - 1) {
;;;1195   				cf |= NS_LOSS | NS_LFN; i = ni; continue;
;;;1196   			}
;;;1197   			dj->fn[i++] = (BYTE)(w >> 8);
;;;1198   		} else {						/* Single byte char */
;;;1199   			if (!w || chk_chr("+,;[=]", w)) {		/* Replace illegal chars for SFN */
;;;1200   				w = '_'; cf |= NS_LOSS | NS_LFN;	/* Lossy conversion */
;;;1201   			} else {
;;;1202   				if (IsUpper(w)) {		/* ASCII large capital */
;;;1203   					b |= 2;
;;;1204   				} else {
;;;1205   					if (IsLower(w)) {	/* ASCII small capital */
;;;1206   						b |= 1; w -= 0x20;
;;;1207   					}
;;;1208   				}
;;;1209   			}
;;;1210   		}
;;;1211   		dj->fn[i++] = (BYTE)w;
;;;1212   	}
;;;1213   
;;;1214   	if (dj->fn[0] == 0xE5) dj->fn[0] = 0x05;	/* If the first char collides with deleted mark, replace it with 0x05 */
;;;1215   
;;;1216   	if (ni == 8) b <<= 2;
;;;1217   	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
;;;1218   		cf |= NS_LFN;
;;;1219   	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
;;;1220   		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;1221   		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;1222   	}
;;;1223   
;;;1224   	dj->fn[NS] = cf;	/* SFN is created */
;;;1225   	return FR_OK;
;;;1226   
;;;1227   
;;;1228   #else	/* Non-LFN configuration */
;;;1229   	BYTE b, c, d, *sfn;
;;;1230   	int ni, si, i;
;;;1231   	const char *p;
;;;1232   
;;;1233   	/* Create file name in directory form */
;;;1234   	sfn = dj->fn;
;;;1235   	mem_set(sfn, ' ', 11);
000004  6984              LDR      r4,[r0,#0x18]
000006  4689              MOV      r9,r1                 ;1102
000008  220b              MOVS     r2,#0xb
00000a  2120              MOVS     r1,#0x20
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       mem_set
;;;1236   	si = i = b = 0; ni = 8;
000012  2200              MOVS     r2,#0
000014  4613              MOV      r3,r2
;;;1237   	p = *path;
000016  f8d9c000          LDR      r12,[r9,#0]
00001a  461e              MOV      r6,r3                 ;1236
00001c  2708              MOVS     r7,#8                 ;1236
                  |L5.30|
;;;1238   #if _FS_RPATH
;;;1239   	if (p[si] == '.') { /* Is this a dot entry? */
;;;1240   		for (;;) {
;;;1241   			c = p[si++];
;;;1242   			if (c != '.' || si >= 3) break;
;;;1243   			sfn[i++] = c;
;;;1244   		}
;;;1245   		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
;;;1246   		*path = &p[si];									/* Return pointer to the next segment */
;;;1247   		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
;;;1248   		return FR_OK;
;;;1249   	}
;;;1250   #endif
;;;1251   	for (;;) {
;;;1252   		c = p[si++];
00001e  f81c1006          LDRB     r1,[r12,r6]
000022  1c76              ADDS     r6,r6,#1
;;;1253   		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
000024  2920              CMP      r1,#0x20
000026  d930              BLS      |L5.138|
000028  292f              CMP      r1,#0x2f
00002a  d02e              BEQ      |L5.138|
00002c  295c              CMP      r1,#0x5c
00002e  d02c              BEQ      |L5.138|
;;;1254   		if (c == '.' || i >= ni) {
000030  292e              CMP      r1,#0x2e
000032  d001              BEQ      |L5.56|
000034  42bb              CMP      r3,r7
000036  db08              BLT      |L5.74|
                  |L5.56|
;;;1255   			if (ni != 8 || c != '.') return FR_INVALID_NAME;
000038  2f08              CMP      r7,#8
00003a  d134              BNE      |L5.166|
00003c  292e              CMP      r1,#0x2e
00003e  d132              BNE      |L5.166|
;;;1256   			i = 8; ni = 11;
000040  2308              MOVS     r3,#8
000042  270b              MOVS     r7,#0xb
;;;1257   			b <<= 2; continue;
000044  0690              LSLS     r0,r2,#26
000046  0e02              LSRS     r2,r0,#24
000048  e7e9              B        |L5.30|
                  |L5.74|
;;;1258   		}
;;;1259   		if (c >= 0x80) {				/* Extended char */
00004a  2980              CMP      r1,#0x80
00004c  d303              BCC      |L5.86|
;;;1260   #ifdef _EXCVT
;;;1261   			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
00004e  4822              LDR      r0,|L5.216|
000050  4408              ADD      r0,r0,r1
000052  f8101c80          LDRB     r1,[r0,#-0x80]
                  |L5.86|
;;;1262   #else
;;;1263   			b |= 3;						/* Eliminate NT flag if ext char is exist */
;;;1264   #if !_DF1S	/* ASCII only cfg */
;;;1265   			return FR_INVALID_NAME;
;;;1266   #endif
;;;1267   #endif
;;;1268   		}
;;;1269   		if (IsDBCS1(c)) {				/* DBC 1st byte? */
;;;1270   			d = p[si++];				/* Get 2nd byte */
;;;1271   			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
;;;1272   				return FR_INVALID_NAME;
;;;1273   			sfn[i++] = c;
;;;1274   			sfn[i++] = d;
;;;1275   		} else {						/* Single byte code */
;;;1276   			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
000056  a021              ADR      r0,|L5.220|
000058  e000              B        |L5.92|
                  |L5.90|
00005a  1c40              ADDS     r0,r0,#1
                  |L5.92|
00005c  7805              LDRB     r5,[r0,#0]
00005e  b115              CBZ      r5,|L5.102|
000060  428d              CMP      r5,r1
000062  d1fa              BNE      |L5.90|
000064  e01f              B        |L5.166|
                  |L5.102|
;;;1277   				return FR_INVALID_NAME;
;;;1278   			if (IsUpper(c)) {			/* ASCII large capital? */
000066  f1a10041          SUB      r0,r1,#0x41
00006a  2819              CMP      r0,#0x19
00006c  d802              BHI      |L5.116|
;;;1279   				b |= 2;
00006e  f0420202          ORR      r2,r2,#2
000072  e007              B        |L5.132|
                  |L5.116|
;;;1280   			} else {
;;;1281   				if (IsLower(c)) {		/* ASCII small capital? */
000074  f1a10061          SUB      r0,r1,#0x61
000078  2819              CMP      r0,#0x19
00007a  d803              BHI      |L5.132|
;;;1282   					b |= 1; c -= 0x20;
00007c  3920              SUBS     r1,r1,#0x20
00007e  f0420201          ORR      r2,r2,#1
000082  b2c9              UXTB     r1,r1
                  |L5.132|
;;;1283   				}
;;;1284   			}
;;;1285   			sfn[i++] = c;
000084  54e1              STRB     r1,[r4,r3]
000086  1c5b              ADDS     r3,r3,#1
000088  e7c9              B        |L5.30|
                  |L5.138|
;;;1286   		}
;;;1287   	}
;;;1288   	*path = &p[si];						/* Return pointer to the next segment */
00008a  eb0c0506          ADD      r5,r12,r6
;;;1289   	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
00008e  f8c95000          STR      r5,[r9,#0]
000092  2920              CMP      r1,#0x20
000094  d801              BHI      |L5.154|
000096  2004              MOVS     r0,#4
000098  e000              B        |L5.156|
                  |L5.154|
00009a  2000              MOVS     r0,#0
                  |L5.156|
;;;1290   
;;;1291   	if (!i) return FR_INVALID_NAME;		/* Reject null string */
00009c  b11b              CBZ      r3,|L5.166|
;;;1292   	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
00009e  7821              LDRB     r1,[r4,#0]
0000a0  29e5              CMP      r1,#0xe5
0000a2  d003              BEQ      |L5.172|
0000a4  e004              B        |L5.176|
                  |L5.166|
0000a6  2006              MOVS     r0,#6                 ;1291
                  |L5.168|
;;;1293   
;;;1294   	if (ni == 8) b <<= 2;
;;;1295   	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;1296   	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;1297   
;;;1298   	sfn[NS] = c;		/* Store NT flag, File name is created */
;;;1299   
;;;1300   	return FR_OK;
;;;1301   #endif
;;;1302   }
0000a8  e8bd87f0          POP      {r4-r10,pc}
                  |L5.172|
0000ac  2105              MOVS     r1,#5                 ;1292
0000ae  7021              STRB     r1,[r4,#0]            ;1292
                  |L5.176|
0000b0  2f08              CMP      r7,#8                 ;1294
0000b2  d101              BNE      |L5.184|
0000b4  0691              LSLS     r1,r2,#26             ;1294
0000b6  0e0a              LSRS     r2,r1,#24             ;1294
                  |L5.184|
0000b8  f0020103          AND      r1,r2,#3              ;1295
0000bc  2901              CMP      r1,#1                 ;1295
0000be  d101              BNE      |L5.196|
0000c0  f0400010          ORR      r0,r0,#0x10           ;1295
                  |L5.196|
0000c4  f3c20181          UBFX     r1,r2,#2,#2           ;1296
0000c8  2901              CMP      r1,#1                 ;1296
0000ca  d101              BNE      |L5.208|
0000cc  f0400008          ORR      r0,r0,#8              ;1296
                  |L5.208|
0000d0  72e0              STRB     r0,[r4,#0xb]          ;1298
0000d2  2000              MOVS     r0,#0                 ;1300
0000d4  e7e8              B        |L5.168|
;;;1303   
                          ENDP

0000d6  0000              DCW      0x0000
                  |L5.216|
                          DCD      ||.constdata||
                  |L5.220|
0000dc  20222a2b          DCB      " ""*+,[=]|",127,0
0000e0  2c5b3d5d
0000e4  7c7f00  
0000e7  00                DCB      0

                          AREA ||i.dir_next||, CODE, READONLY, ALIGN=1

                  dir_next PROC
;;;593    static
;;;594    FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;595    	DIR *dj,		/* Pointer to directory object */
;;;596    	BOOL streach	/* FALSE: Do not stretch table, TRUE: Stretch table if needed */
;;;597    )
;;;598    {
000004  4604              MOV      r4,r0
;;;599    	DWORD clst;
;;;600    	WORD i;
;;;601    
;;;602    
;;;603    	i = dj->index + 1;
000006  88c0              LDRH     r0,[r0,#6]
000008  460e              MOV      r6,r1                 ;598
00000a  1c40              ADDS     r0,r0,#1
00000c  0407              LSLS     r7,r0,#16
00000e  0c3f              LSRS     r7,r7,#16
000010  d037              BEQ      |L6.130|
;;;604    	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
000012  6921              LDR      r1,[r4,#0x10]
000014  b3a1              CBZ      r1,|L6.128|
;;;605    		return FR_NO_FILE;
;;;606    
;;;607    	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
000016  6820              LDR      r0,[r4,#0]
000018  8942              LDRH     r2,[r0,#0xa]
00001a  0952              LSRS     r2,r2,#5
00001c  fbb7f3f2          UDIV     r3,r7,r2
000020  fb027213          MLS      r2,r2,r3,r7
000024  2a00              CMP      r2,#0
000026  d15f              BNE      |L6.232|
;;;608    		dj->sect++;					/* Next sector */
000028  1c49              ADDS     r1,r1,#1
;;;609    
;;;610    		if (dj->clust == 0) {	/* Static table */
00002a  6121              STR      r1,[r4,#0x10]
00002c  68e1              LDR      r1,[r4,#0xc]
00002e  b141              CBZ      r1,|L6.66|
;;;611    			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
;;;612    				return FR_NO_FILE;
;;;613    		}
;;;614    		else {					/* Dynamic table */
;;;615    			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
000030  8942              LDRH     r2,[r0,#0xa]
000032  7883              LDRB     r3,[r0,#2]
000034  0952              LSRS     r2,r2,#5
000036  fbb7f2f2          UDIV     r2,r7,r2
00003a  1e5b              SUBS     r3,r3,#1
00003c  421a              TST      r2,r3
00003e  d004              BEQ      |L6.74|
000040  e052              B        |L6.232|
                  |L6.66|
000042  8900              LDRH     r0,[r0,#8]            ;611
000044  42b8              CMP      r0,r7                 ;611
000046  d91c              BLS      |L6.130|
000048  e04e              B        |L6.232|
                  |L6.74|
;;;616    				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
00004a  f7fffffe          BL       get_fat
00004e  4605              MOV      r5,r0
;;;617    				if (clst <= 1) return FR_INT_ERR;
000050  2801              CMP      r0,#1
000052  d91b              BLS      |L6.140|
;;;618    				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
000054  1c68              ADDS     r0,r5,#1
000056  d032              BEQ      |L6.190|
;;;619    				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
000058  6820              LDR      r0,[r4,#0]
00005a  69c1              LDR      r1,[r0,#0x1c]
00005c  42a9              CMP      r1,r5
00005e  d83d              BHI      |L6.220|
;;;620    #if !_FS_READONLY
;;;621    					BYTE c;
;;;622    					if (!streach) return FR_NO_FILE;			/* When do not stretch, report EOT */
000060  b176              CBZ      r6,|L6.128|
;;;623    					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
000062  68e1              LDR      r1,[r4,#0xc]
000064  f7fffffe          BL       create_chain
000068  0005              MOVS     r5,r0
;;;624    					if (clst == 0) return FR_DENIED;			/* No free cluster */
00006a  d00d              BEQ      |L6.136|
;;;625    					if (clst == 1) return FR_INT_ERR;
00006c  2d01              CMP      r5,#1
00006e  d00d              BEQ      |L6.140|
;;;626    					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
000070  1c68              ADDS     r0,r5,#1
000072  d024              BEQ      |L6.190|
;;;627    					/* Clean-up streached table */
;;;628    					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
000074  2100              MOVS     r1,#0
000076  6820              LDR      r0,[r4,#0]
000078  f7fffffe          BL       move_window
00007c  b9f8              CBNZ     r0,|L6.190|
00007e  e007              B        |L6.144|
                  |L6.128|
000080  e7ff              B        |L6.130|
                  |L6.130|
000082  2004              MOVS     r0,#4                 ;622
                  |L6.132|
;;;629    					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
;;;630    					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
;;;631    					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
;;;632    						dj->fs->wflag = 1;
;;;633    						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
;;;634    						dj->fs->winsect++;
;;;635    					}
;;;636    					dj->fs->winsect -= c;						/* Rewind window address */
;;;637    #else
;;;638    					return FR_NO_FILE;			/* Report EOT */
;;;639    #endif
;;;640    				}
;;;641    				dj->clust = clst;				/* Initialize data for new cluster */
;;;642    				dj->sect = clust2sect(dj->fs, clst);
;;;643    			}
;;;644    		}
;;;645    	}
;;;646    
;;;647    	dj->index = i;
;;;648    	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
;;;649    
;;;650    	return FR_OK;
;;;651    }
000084  e8bd81f0          POP      {r4-r8,pc}
                  |L6.136|
000088  2007              MOVS     r0,#7                 ;624
00008a  e7fb              B        |L6.132|
                  |L6.140|
00008c  2002              MOVS     r0,#2                 ;625
00008e  e7f9              B        |L6.132|
                  |L6.144|
000090  6820              LDR      r0,[r4,#0]            ;629
000092  2100              MOVS     r1,#0                 ;629
000094  8942              LDRH     r2,[r0,#0xa]          ;629
000096  3030              ADDS     r0,r0,#0x30           ;629
000098  f7fffffe          BL       mem_set
00009c  4629              MOV      r1,r5                 ;630
00009e  6820              LDR      r0,[r4,#0]            ;630
0000a0  f7fffffe          BL       clust2sect
0000a4  6821              LDR      r1,[r4,#0]            ;630
0000a6  2600              MOVS     r6,#0                 ;631
0000a8  f04f0801          MOV      r8,#1                 ;618
0000ac  62c8              STR      r0,[r1,#0x2c]         ;631
0000ae  e00e              B        |L6.206|
                  |L6.176|
0000b0  f8808004          STRB     r8,[r0,#4]            ;632
0000b4  2100              MOVS     r1,#0                 ;633
0000b6  6820              LDR      r0,[r4,#0]            ;633
0000b8  f7fffffe          BL       move_window
0000bc  b108              CBZ      r0,|L6.194|
                  |L6.190|
0000be  2001              MOVS     r0,#1                 ;633
0000c0  e7e0              B        |L6.132|
                  |L6.194|
0000c2  6820              LDR      r0,[r4,#0]            ;634
0000c4  6ac1              LDR      r1,[r0,#0x2c]         ;634
0000c6  1c49              ADDS     r1,r1,#1              ;634
0000c8  1c76              ADDS     r6,r6,#1              ;631
0000ca  b2f6              UXTB     r6,r6                 ;631
0000cc  62c1              STR      r1,[r0,#0x2c]         ;631
                  |L6.206|
0000ce  6820              LDR      r0,[r4,#0]            ;631
0000d0  7881              LDRB     r1,[r0,#2]            ;631
0000d2  42b1              CMP      r1,r6                 ;631
0000d4  d8ec              BHI      |L6.176|
0000d6  6ac1              LDR      r1,[r0,#0x2c]         ;636
0000d8  1b89              SUBS     r1,r1,r6              ;636
0000da  62c1              STR      r1,[r0,#0x2c]         ;636
                  |L6.220|
0000dc  60e5              STR      r5,[r4,#0xc]          ;642
0000de  4629              MOV      r1,r5                 ;642
0000e0  6820              LDR      r0,[r4,#0]            ;642
0000e2  f7fffffe          BL       clust2sect
0000e6  6120              STR      r0,[r4,#0x10]         ;642
                  |L6.232|
0000e8  80e7              STRH     r7,[r4,#6]            ;647
0000ea  6820              LDR      r0,[r4,#0]            ;648
0000ec  8941              LDRH     r1,[r0,#0xa]          ;648
0000ee  0949              LSRS     r1,r1,#5              ;648
0000f0  fbb7f2f1          UDIV     r2,r7,r1              ;648
0000f4  fb017112          MLS      r1,r1,r2,r7           ;648
0000f8  2230              MOVS     r2,#0x30              ;648
0000fa  eb021141          ADD      r1,r2,r1,LSL #5       ;648
0000fe  4408              ADD      r0,r0,r1              ;648
000100  6160              STR      r0,[r4,#0x14]         ;650
000102  2000              MOVS     r0,#0                 ;650
000104  e7be              B        |L6.132|
;;;652    
                          ENDP


                          AREA ||i.dir_read||, CODE, READONLY, ALIGN=1

                  dir_read PROC
;;;891    static
;;;892    FRESULT dir_read (
000000  b510              PUSH     {r4,lr}
;;;893    	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
;;;894    )
;;;895    {
000002  4604              MOV      r4,r0
;;;896    	FRESULT res;
;;;897    	BYTE c, *dir;
;;;898    #if _USE_LFN
;;;899    	BYTE a, ord = 0xFF, sum = 0xFF;
;;;900    #endif
;;;901    
;;;902    	res = FR_NO_FILE;
000004  2004              MOVS     r0,#4
000006  e015              B        |L7.52|
                  |L7.8|
;;;903    	while (dj->sect) {
;;;904    		res = move_window(dj->fs, dj->sect);
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       move_window
;;;905    		if (res != FR_OK) break;
00000e  b9b0              CBNZ     r0,|L7.62|
;;;906    		dir = dj->dir;					/* Ptr to the directory entry of current index */
;;;907    		c = dir[DIR_Name];
000010  6962              LDR      r2,[r4,#0x14]
000012  7811              LDRB     r1,[r2,#0]
;;;908    		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
000014  b161              CBZ      r1,|L7.48|
;;;909    #if _USE_LFN	/* LFN configuration */
;;;910    		a = dir[DIR_Attr] & AM_MASK;
;;;911    		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;912    			ord = 0xFF;
;;;913    		} else {
;;;914    			if (a == AM_LFN) {			/* An LFN entry is found */
;;;915    				if (c & 0x40) {			/* Is it start of LFN sequence? */
;;;916    					sum = dir[LDIR_Chksum];
;;;917    					c &= 0xBF; ord = c;
;;;918    					dj->lfn_idx = dj->index;
;;;919    				}
;;;920    				/* Check LFN validity and capture it */
;;;921    				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
;;;922    			} else {					/* An SFN entry is found */
;;;923    				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
;;;924    					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
;;;925    				break;
;;;926    			}
;;;927    		}
;;;928    #else		/* Non LFN configuration */
;;;929    		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
000016  29e5              CMP      r1,#0xe5
000018  d004              BEQ      |L7.36|
00001a  292e              CMP      r1,#0x2e
00001c  d002              BEQ      |L7.36|
00001e  7ad1              LDRB     r1,[r2,#0xb]
000020  0709              LSLS     r1,r1,#28
000022  d50e              BPL      |L7.66|
                  |L7.36|
;;;930    			break;
;;;931    #endif
;;;932    		res = dir_next(dj, FALSE);				/* Next entry */
000024  2100              MOVS     r1,#0
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       dir_next
;;;933    		if (res != FR_OK) break;
00002c  b110              CBZ      r0,|L7.52|
00002e  e006              B        |L7.62|
                  |L7.48|
000030  2004              MOVS     r0,#4                 ;908
000032  e004              B        |L7.62|
                  |L7.52|
000034  6921              LDR      r1,[r4,#0x10]         ;903
000036  2900              CMP      r1,#0                 ;903
000038  d1e6              BNE      |L7.8|
;;;934    	}
;;;935    
;;;936    	if (res != FR_OK) dj->sect = 0;
00003a  2800              CMP      r0,#0
00003c  d001              BEQ      |L7.66|
                  |L7.62|
00003e  2100              MOVS     r1,#0
000040  6121              STR      r1,[r4,#0x10]
                  |L7.66|
;;;937    
;;;938    	return res;
;;;939    }
000042  bd10              POP      {r4,pc}
;;;940    #endif
                          ENDP


                          AREA ||i.dir_register||, CODE, READONLY, ALIGN=1

                  dir_register PROC
;;;948    static
;;;949    FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;950    	DIR *dj				/* Target directory with object name to be created */
;;;951    )
;;;952    {
000002  4604              MOV      r4,r0
;;;953    	FRESULT res;
;;;954    	BYTE c, *dir;
;;;955    #if _USE_LFN	/* LFN configuration */
;;;956    	WORD n, ne, is;
;;;957    	BYTE sn[12], *fn, sum;
;;;958    	WCHAR *lfn;
;;;959    
;;;960    
;;;961    	fn = dj->fn; lfn = dj->lfn;
;;;962    	mem_cpy(sn, fn, 12);
;;;963    
;;;964    	if (_FS_RPATH && (sn[NS] & NS_DOT)) return FR_INVALID_NAME;	/* Cannot create dot entry */
;;;965    
;;;966    	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
;;;967    		fn[NS] = 0; dj->lfn = NULL;			/* Find only SFN */
;;;968    		for (n = 1; n < 100; n++) {
;;;969    			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
;;;970    			res = dir_find(dj);				/* Check if the name collides with existing SFN */
;;;971    			if (res != FR_OK) break;
;;;972    		}
;;;973    		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
;;;974    		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
;;;975    		fn[NS] = sn[NS]; dj->lfn = lfn;
;;;976    	}
;;;977    
;;;978    	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve reserve an SFN + LFN entries. */
;;;979    		for (ne = 0; lfn[ne]; ne++) ;
;;;980    		ne = (ne + 25) / 13;
;;;981    	} else {						/* Otherwise reserve only an SFN entry. */
;;;982    		ne = 1;
;;;983    	}
;;;984    
;;;985    	/* Reserve contiguous entries */
;;;986    	res = dir_seek(dj, 0);
;;;987    	if (res != FR_OK) return res;
;;;988    	n = is = 0;
;;;989    	do {
;;;990    		res = move_window(dj->fs, dj->sect);
;;;991    		if (res != FR_OK) break;
;;;992    		c = *dj->dir;				/* Check the entry status */
;;;993    		if (c == 0xE5 || c == 0) {	/* Is it a blank entry? */
;;;994    			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
;;;995    			if (++n == ne) break;	/* A contiguous entry that required count is found */
;;;996    		} else {
;;;997    			n = 0;					/* Not a blank entry. Restart to search */
;;;998    		}
;;;999    		res = dir_next(dj, TRUE);	/* Next entry with table stretch */
;;;1000   	} while (res == FR_OK);
;;;1001   
;;;1002   	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
;;;1003   		res = dir_seek(dj, is);
;;;1004   		if (res == FR_OK) {
;;;1005   			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
;;;1006   			ne--;
;;;1007   			do {					/* Store LFN entries in bottom first */
;;;1008   				res = move_window(dj->fs, dj->sect);
;;;1009   				if (res != FR_OK) break;
;;;1010   				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
;;;1011   				dj->fs->wflag = 1;
;;;1012   				res = dir_next(dj, FALSE);	/* Next entry */
;;;1013   			} while (res == FR_OK && --ne);
;;;1014   		}
;;;1015   	}
;;;1016   
;;;1017   #else	/* Non LFN configuration */
;;;1018   	res = dir_seek(dj, 0);
000004  2100              MOVS     r1,#0
000006  f7fffffe          BL       dir_seek
;;;1019   	if (res == FR_OK) {
00000a  e00e              B        |L8.42|
                  |L8.12|
;;;1020   		do {	/* Find a blank entry for the SFN */
;;;1021   			res = move_window(dj->fs, dj->sect);
00000c  6921              LDR      r1,[r4,#0x10]
00000e  6820              LDR      r0,[r4,#0]
000010  f7fffffe          BL       move_window
000014  0005              MOVS     r5,r0
;;;1022   			if (res != FR_OK) break;
000016  d124              BNE      |L8.98|
;;;1023   			c = *dj->dir;
000018  6960              LDR      r0,[r4,#0x14]
00001a  7800              LDRB     r0,[r0,#0]
;;;1024   			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
00001c  28e5              CMP      r0,#0xe5
00001e  d007              BEQ      |L8.48|
000020  b130              CBZ      r0,|L8.48|
;;;1025   			res = dir_next(dj, TRUE);		/* Next entry with table streach */
000022  2101              MOVS     r1,#1
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       dir_next
                  |L8.42|
00002a  0005              MOVS     r5,r0                 ;1018
00002c  d0ee              BEQ      |L8.12|
00002e  e018              B        |L8.98|
                  |L8.48|
;;;1026   		} while (res == FR_OK);
;;;1027   	}
;;;1028   #endif
;;;1029   
;;;1030   	if (res == FR_OK) {		/* Initialize the SFN entry */
;;;1031   		res = move_window(dj->fs, dj->sect);
000030  6921              LDR      r1,[r4,#0x10]
000032  6820              LDR      r0,[r4,#0]
000034  f7fffffe          BL       move_window
000038  0005              MOVS     r5,r0
;;;1032   		if (res == FR_OK) {
00003a  d112              BNE      |L8.98|
;;;1033   			dir = dj->dir;
;;;1034   			mem_set(dir, 0, 32);		/* Clean the entry */
00003c  6966              LDR      r6,[r4,#0x14]
00003e  2220              MOVS     r2,#0x20
000040  2100              MOVS     r1,#0
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       mem_set
;;;1035   			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
000048  220b              MOVS     r2,#0xb
00004a  4630              MOV      r0,r6
00004c  69a1              LDR      r1,[r4,#0x18]
00004e  f7fffffe          BL       mem_cpy
;;;1036   			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
000052  69a0              LDR      r0,[r4,#0x18]
000054  7ac0              LDRB     r0,[r0,#0xb]
000056  f0000018          AND      r0,r0,#0x18
00005a  7330              STRB     r0,[r6,#0xc]
;;;1037   			dj->fs->wflag = 1;
00005c  6821              LDR      r1,[r4,#0]
00005e  2001              MOVS     r0,#1
000060  7108              STRB     r0,[r1,#4]
                  |L8.98|
;;;1038   		}
;;;1039   	}
;;;1040   
;;;1041   	return res;
000062  4628              MOV      r0,r5
;;;1042   }
000064  bd70              POP      {r4-r6,pc}
;;;1043   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_remove||, CODE, READONLY, ALIGN=1

                  dir_remove PROC
;;;1052   static
;;;1053   FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
000000  b510              PUSH     {r4,lr}
;;;1054   	DIR *dj				/* Directory object pointing the entry to be removed */
;;;1055   )
;;;1056   {
000002  4604              MOV      r4,r0
;;;1057   	FRESULT res;
;;;1058   #if _USE_LFN	/* LFN configuration */
;;;1059   	WORD i;
;;;1060   
;;;1061   	i = dj->index;	/* SFN index */
;;;1062   	res = dir_seek(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
;;;1063   	if (res == FR_OK) {
;;;1064   		do {
;;;1065   			res = move_window(dj->fs, dj->sect);
;;;1066   			if (res != FR_OK) break;
;;;1067   			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
;;;1068   			dj->fs->wflag = 1;
;;;1069   			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
;;;1070   			res = dir_next(dj, FALSE);	/* Next entry */
;;;1071   		} while (res == FR_OK);
;;;1072   		if (res == FR_NO_FILE) res = FR_INT_ERR;
;;;1073   	}
;;;1074   
;;;1075   #else			/* Non LFN configuration */
;;;1076   	res = dir_seek(dj, dj->index);
000004  88c1              LDRH     r1,[r0,#6]
000006  f7fffffe          BL       dir_seek
;;;1077   	if (res == FR_OK) {
00000a  2800              CMP      r0,#0
00000c  d10b              BNE      |L9.38|
;;;1078   		res = move_window(dj->fs, dj->sect);
00000e  6921              LDR      r1,[r4,#0x10]
000010  6820              LDR      r0,[r4,#0]
000012  f7fffffe          BL       move_window
;;;1079   		if (res == FR_OK) {
000016  2800              CMP      r0,#0
000018  d105              BNE      |L9.38|
;;;1080   			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
00001a  6962              LDR      r2,[r4,#0x14]
00001c  21e5              MOVS     r1,#0xe5
00001e  7011              STRB     r1,[r2,#0]
;;;1081   			dj->fs->wflag = 1;
000020  6822              LDR      r2,[r4,#0]
000022  2101              MOVS     r1,#1
000024  7111              STRB     r1,[r2,#4]
                  |L9.38|
;;;1082   		}
;;;1083   	}
;;;1084   #endif
;;;1085   
;;;1086   	return res;
;;;1087   }
000026  bd10              POP      {r4,pc}
;;;1088   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_seek||, CODE, READONLY, ALIGN=1

                  dir_seek PROC
;;;545    static
;;;546    FRESULT dir_seek (
000000  b570              PUSH     {r4-r6,lr}
;;;547    	DIR *dj,		/* Pointer to directory object */
;;;548    	WORD idx		/* Directory index number */
;;;549    )
;;;550    {
000002  460d              MOV      r5,r1
;;;551    	DWORD clst;
;;;552    	WORD ic;
;;;553    
;;;554    
;;;555    	dj->index = idx;
000004  80c1              STRH     r1,[r0,#6]
;;;556    	clst = dj->sclust;
;;;557    	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
000006  6881              LDR      r1,[r0,#8]
000008  4604              MOV      r4,r0                 ;550
00000a  2901              CMP      r1,#1
00000c  d027              BEQ      |L10.94|
00000e  6820              LDR      r0,[r4,#0]
000010  69c2              LDR      r2,[r0,#0x1c]
000012  428a              CMP      r2,r1
000014  d923              BLS      |L10.94|
;;;558    		return FR_INT_ERR;
;;;559    	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
000016  b921              CBNZ     r1,|L10.34|
000018  7802              LDRB     r2,[r0,#0]
00001a  2a03              CMP      r2,#3
00001c  d108              BNE      |L10.48|
;;;560    		clst = dj->fs->dirbase;
00001e  6a41              LDR      r1,[r0,#0x24]
000020  b131              CBZ      r1,|L10.48|
                  |L10.34|
;;;561    
;;;562    	if (clst == 0) {	/* Static table */
;;;563    		dj->clust = clst;
;;;564    		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
;;;565    			return FR_INT_ERR;
;;;566    		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
;;;567    	}
;;;568    	else {				/* Dynamic table */
;;;569    		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
000022  8942              LDRH     r2,[r0,#0xa]
000024  7880              LDRB     r0,[r0,#2]
000026  0952              LSRS     r2,r2,#5
000028  fb12f000          SMULBB   r0,r2,r0
00002c  b286              UXTH     r6,r0
;;;570    		while (idx >= ic) {	/* Follow cluster chain */
00002e  e01c              B        |L10.106|
                  |L10.48|
000030  60e1              STR      r1,[r4,#0xc]          ;564
000032  8901              LDRH     r1,[r0,#8]            ;564
000034  42a9              CMP      r1,r5                 ;564
000036  d912              BLS      |L10.94|
000038  8941              LDRH     r1,[r0,#0xa]          ;566
00003a  6a40              LDR      r0,[r0,#0x24]         ;566
00003c  0949              LSRS     r1,r1,#5              ;566
00003e  fbb5f1f1          UDIV     r1,r5,r1              ;566
000042  4408              ADD      r0,r0,r1              ;566
000044  e01d              B        |L10.130|
                  |L10.70|
;;;571    			clst = get_fat(dj->fs, clst);				/* Get next cluster */
000046  6820              LDR      r0,[r4,#0]
000048  f7fffffe          BL       get_fat
00004c  4601              MOV      r1,r0
;;;572    			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
00004e  1c40              ADDS     r0,r0,#1
000050  d007              BEQ      |L10.98|
;;;573    			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
000052  2902              CMP      r1,#2
000054  d303              BCC      |L10.94|
000056  6820              LDR      r0,[r4,#0]
000058  69c0              LDR      r0,[r0,#0x1c]
00005a  4288              CMP      r0,r1
00005c  d803              BHI      |L10.102|
                  |L10.94|
;;;574    				return FR_INT_ERR;
00005e  2002              MOVS     r0,#2
;;;575    			idx -= ic;
;;;576    		}
;;;577    		dj->clust = clst;
;;;578    		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
;;;579    	}
;;;580    
;;;581    	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
;;;582    
;;;583    	return FR_OK;	/* Seek succeeded */
;;;584    }
000060  bd70              POP      {r4-r6,pc}
                  |L10.98|
000062  2001              MOVS     r0,#1                 ;572
000064  bd70              POP      {r4-r6,pc}
                  |L10.102|
000066  1ba8              SUBS     r0,r5,r6              ;575
000068  b285              UXTH     r5,r0                 ;575
                  |L10.106|
00006a  42b5              CMP      r5,r6                 ;570
00006c  d2eb              BCS      |L10.70|
00006e  60e1              STR      r1,[r4,#0xc]          ;578
000070  6820              LDR      r0,[r4,#0]            ;578
000072  f7fffffe          BL       clust2sect
000076  6821              LDR      r1,[r4,#0]            ;578
000078  8949              LDRH     r1,[r1,#0xa]          ;578
00007a  0949              LSRS     r1,r1,#5              ;578
00007c  fbb5f1f1          UDIV     r1,r5,r1              ;578
000080  4408              ADD      r0,r0,r1              ;578
                  |L10.130|
000082  6120              STR      r0,[r4,#0x10]         ;581
000084  6820              LDR      r0,[r4,#0]            ;581
000086  8941              LDRH     r1,[r0,#0xa]          ;581
000088  0949              LSRS     r1,r1,#5              ;581
00008a  fbb5f2f1          UDIV     r2,r5,r1              ;581
00008e  fb015112          MLS      r1,r1,r2,r5           ;581
000092  2230              MOVS     r2,#0x30              ;581
000094  eb021141          ADD      r1,r2,r1,LSL #5       ;581
000098  4408              ADD      r0,r0,r1              ;581
00009a  6160              STR      r0,[r4,#0x14]         ;583
00009c  2000              MOVS     r0,#0                 ;583
00009e  bd70              POP      {r4-r6,pc}
;;;585    
                          ENDP


                          AREA ||i.f_chmod||, CODE, READONLY, ALIGN=1

                  f_chmod PROC
;;;2559   
;;;2560   FRESULT f_chmod (
000000  b537              PUSH     {r0-r2,r4,r5,lr}
;;;2561   	const XCHAR *path,	/* Pointer to the file path */
;;;2562   	BYTE value,			/* Attribute bits */
;;;2563   	BYTE mask			/* Attribute mask to change */
;;;2564   )
;;;2565   {
000002  b08a              SUB      sp,sp,#0x28
000004  4615              MOV      r5,r2
000006  460c              MOV      r4,r1
;;;2566   	FRESULT res;
;;;2567   	DIR dj;
;;;2568   	NAMEBUF(sfn, lfn);
;;;2569   	BYTE *dir;
;;;2570   
;;;2571   
;;;2572   	res = chk_mounted(&path, &dj.fs, 1);
000008  2201              MOVS     r2,#1
00000a  4669              MOV      r1,sp
00000c  a80a              ADD      r0,sp,#0x28
00000e  f7fffffe          BL       chk_mounted
;;;2573   	if (res == FR_OK) {
000012  2800              CMP      r0,#0
000014  d116              BNE      |L11.68|
;;;2574   		INITBUF(dj, sfn, lfn);
000016  a807              ADD      r0,sp,#0x1c
;;;2575   		res = follow_path(&dj, path);		/* Follow the file path */
000018  9006              STR      r0,[sp,#0x18]
00001a  4668              MOV      r0,sp
00001c  990a              LDR      r1,[sp,#0x28]
00001e  f7fffffe          BL       follow_path
;;;2576   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
;;;2577   			res = FR_INVALID_NAME;
;;;2578   		if (res == FR_OK) {
000022  2800              CMP      r0,#0
000024  d10e              BNE      |L11.68|
;;;2579   			dir = dj.dir;
;;;2580   			if (!dir) {						/* Is it a root directory? */
000026  9805              LDR      r0,[sp,#0x14]
000028  b170              CBZ      r0,|L11.72|
;;;2581   				res = FR_INVALID_NAME;
;;;2582   			} else {						/* File or sub directory */
;;;2583   				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
00002a  f0050227          AND      r2,r5,#0x27
;;;2584   				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
00002e  7ac1              LDRB     r1,[r0,#0xb]
000030  4014              ANDS     r4,r4,r2
000032  4391              BICS     r1,r1,r2
000034  430c              ORRS     r4,r4,r1
000036  72c4              STRB     r4,[r0,#0xb]
;;;2585   				dj.fs->wflag = 1;
000038  9900              LDR      r1,[sp,#0]
00003a  2001              MOVS     r0,#1
00003c  7108              STRB     r0,[r1,#4]
;;;2586   				res = sync(dj.fs);
00003e  9800              LDR      r0,[sp,#0]
000040  f7fffffe          BL       sync
                  |L11.68|
;;;2587   			}
;;;2588   		}
;;;2589   	}
;;;2590   
;;;2591   	LEAVE_FF(dj.fs, res);
;;;2592   }
000044  b00d              ADD      sp,sp,#0x34
000046  bd30              POP      {r4,r5,pc}
                  |L11.72|
000048  2006              MOVS     r0,#6                 ;2581
00004a  e7fb              B        |L11.68|
;;;2593   
                          ENDP


                          AREA ||i.f_close||, CODE, READONLY, ALIGN=1

                  f_close PROC
;;;2020   
;;;2021   FRESULT f_close (
000000  b510              PUSH     {r4,lr}
;;;2022   	FIL *fp		/* Pointer to the file object to be closed */
;;;2023   )
;;;2024   {
000002  4604              MOV      r4,r0
;;;2025   	FRESULT res;
;;;2026   
;;;2027   
;;;2028   #if _FS_READONLY
;;;2029   	res = validate(fp->fs, fp->id);
;;;2030   	if (res == FR_OK) fp->fs = NULL;
;;;2031   	LEAVE_FF(fp->fs, res);
;;;2032   #else
;;;2033   	res = f_sync(fp);
000004  f7fffffe          BL       f_sync
;;;2034   	if (res == FR_OK) fp->fs = NULL;
000008  2800              CMP      r0,#0
00000a  d101              BNE      |L12.16|
00000c  2100              MOVS     r1,#0
00000e  6021              STR      r1,[r4,#0]
                  |L12.16|
;;;2035   	return res;
;;;2036   #endif
;;;2037   }
000010  bd10              POP      {r4,pc}
;;;2038   
                          ENDP


                          AREA ||i.f_getfree||, CODE, READONLY, ALIGN=1

                  f_getfree PROC
;;;2313   
;;;2314   FRESULT f_getfree (
000000  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;2315   	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
;;;2316   	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
;;;2317   	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
;;;2318   )
;;;2319   {
000004  4615              MOV      r5,r2
000006  4689              MOV      r9,r1
;;;2320   	FRESULT res;
;;;2321   	DWORD n, clst, sect, stat;
;;;2322   	UINT i;
;;;2323   	BYTE fat, *p;
;;;2324   
;;;2325   
;;;2326   	/* Get drive number */
;;;2327   	res = chk_mounted(&path, fatfs, 0);
000008  2200              MOVS     r2,#0
00000a  4629              MOV      r1,r5
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       chk_mounted
;;;2328   	if (res != FR_OK) LEAVE_FF(*fatfs, res);
000012  2800              CMP      r0,#0
000014  d11c              BNE      |L13.80|
;;;2329   
;;;2330   	/* If number of free cluster is valid, return it without cluster scan. */
;;;2331   	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
000016  6828              LDR      r0,[r5,#0]
000018  69c7              LDR      r7,[r0,#0x1c]
00001a  6901              LDR      r1,[r0,#0x10]
00001c  1eba              SUBS     r2,r7,#2
00001e  4291              CMP      r1,r2
000020  d802              BHI      |L13.40|
;;;2332   		*nclst = (*fatfs)->free_clust;
;;;2333   		LEAVE_FF(*fatfs, FR_OK);
000022  f8c91000          STR      r1,[r9,#0]
000026  e04a              B        |L13.190|
                  |L13.40|
;;;2334   	}
;;;2335   
;;;2336   	/* Get number of free clusters */
;;;2337   	fat = (*fatfs)->fs_type;
000028  f8908000          LDRB     r8,[r0,#0]
;;;2338   	n = 0;
00002c  2400              MOVS     r4,#0
;;;2339   	if (fat == FS_FAT12) {
00002e  f1b80f01          CMP      r8,#1
000032  d001              BEQ      |L13.56|
;;;2340   		clst = 2;
;;;2341   		do {
;;;2342   			stat = get_fat(*fatfs, clst);
;;;2343   			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
;;;2344   			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
;;;2345   			if (stat == 0) n++;
;;;2346   		} while (++clst < (*fatfs)->max_clust);
;;;2347   	} else {
;;;2348   		clst = (*fatfs)->max_clust;
;;;2349   		sect = (*fatfs)->fatbase;
;;;2350   		i = 0; p = 0;
;;;2351   		do {
000034  6a06              LDR      r6,[r0,#0x20]
000036  e017              B        |L13.104|
                  |L13.56|
000038  2602              MOVS     r6,#2                 ;2340
                  |L13.58|
00003a  4631              MOV      r1,r6                 ;2342
00003c  6828              LDR      r0,[r5,#0]            ;2342
00003e  f7fffffe          BL       get_fat
000042  1c41              ADDS     r1,r0,#1              ;2343
000044  d003              BEQ      |L13.78|
000046  2801              CMP      r0,#1                 ;2344
000048  d004              BEQ      |L13.84|
00004a  b128              CBZ      r0,|L13.88|
00004c  e005              B        |L13.90|
                  |L13.78|
00004e  2001              MOVS     r0,#1                 ;2343
                  |L13.80|
;;;2352   			if (!i) {
;;;2353   				res = move_window(*fatfs, sect++);
;;;2354   				if (res != FR_OK)
;;;2355   					LEAVE_FF(*fatfs, res);
;;;2356   				p = (*fatfs)->win;
;;;2357   				i = SS(*fatfs);
;;;2358   			}
;;;2359   			if (fat == FS_FAT16) {
;;;2360   				if (LD_WORD(p) == 0) n++;
;;;2361   				p += 2; i -= 2;
;;;2362   			} else {
;;;2363   				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
;;;2364   				p += 4; i -= 4;
;;;2365   			}
;;;2366   		} while (--clst);
;;;2367   	}
;;;2368   	(*fatfs)->free_clust = n;
;;;2369   	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
;;;2370   	*nclst = n;
;;;2371   
;;;2372   	LEAVE_FF(*fatfs, FR_OK);
;;;2373   }
000050  e8bd83fe          POP      {r1-r9,pc}
                  |L13.84|
000054  2002              MOVS     r0,#2                 ;2344
000056  e7fb              B        |L13.80|
                  |L13.88|
000058  1c64              ADDS     r4,r4,#1              ;2345
                  |L13.90|
00005a  6828              LDR      r0,[r5,#0]            ;2346
00005c  1c76              ADDS     r6,r6,#1              ;2346
00005e  69c0              LDR      r0,[r0,#0x1c]         ;2346
000060  4286              CMP      r6,r0                 ;2346
000062  d3ea              BCC      |L13.58|
000064  e021              B        |L13.170|
                  |L13.102|
000066  b951              CBNZ     r1,|L13.126|
                  |L13.104|
000068  4631              MOV      r1,r6                 ;2353
00006a  1c76              ADDS     r6,r6,#1              ;2353
00006c  6828              LDR      r0,[r5,#0]            ;2353
00006e  f7fffffe          BL       move_window
000072  2800              CMP      r0,#0                 ;2354
000074  d1ec              BNE      |L13.80|
000076  6829              LDR      r1,[r5,#0]            ;2356
000078  f1010030          ADD      r0,r1,#0x30           ;2356
00007c  8949              LDRH     r1,[r1,#0xa]          ;2357
                  |L13.126|
00007e  f1b80f02          CMP      r8,#2                 ;2359
000082  d007              BEQ      |L13.148|
000084  7802              LDRB     r2,[r0,#0]            ;2363
000086  f8d03001          LDR      r3,[r0,#1]            ;2363
00008a  ea422203          ORR      r2,r2,r3,LSL #8       ;2363
00008e  0112              LSLS     r2,r2,#4              ;2363
000090  d006              BEQ      |L13.160|
000092  e006              B        |L13.162|
                  |L13.148|
000094  8802              LDRH     r2,[r0,#0]            ;2360
000096  b902              CBNZ     r2,|L13.154|
000098  1c64              ADDS     r4,r4,#1              ;2360
                  |L13.154|
00009a  1c80              ADDS     r0,r0,#2              ;2361
00009c  1e89              SUBS     r1,r1,#2              ;2361
00009e  e002              B        |L13.166|
                  |L13.160|
0000a0  1c64              ADDS     r4,r4,#1              ;2363
                  |L13.162|
0000a2  1d00              ADDS     r0,r0,#4              ;2364
0000a4  1f09              SUBS     r1,r1,#4              ;2364
                  |L13.166|
0000a6  1e7f              SUBS     r7,r7,#1              ;2366
0000a8  d1dd              BNE      |L13.102|
                  |L13.170|
0000aa  6828              LDR      r0,[r5,#0]            ;2368
0000ac  f1b80f03          CMP      r8,#3                 ;2369
0000b0  6104              STR      r4,[r0,#0x10]         ;2369
0000b2  d102              BNE      |L13.186|
0000b4  6829              LDR      r1,[r5,#0]            ;2369
0000b6  2001              MOVS     r0,#1                 ;2369
0000b8  7148              STRB     r0,[r1,#5]            ;2369
                  |L13.186|
0000ba  f8c94000          STR      r4,[r9,#0]            ;2370
                  |L13.190|
0000be  2000              MOVS     r0,#0                 ;2372
0000c0  e7c6              B        |L13.80|
;;;2374   
                          ENDP


                          AREA ||i.f_gets||, CODE, READONLY, ALIGN=1

                  f_gets PROC
;;;2994   /*-----------------------------------------------------------------------*/
;;;2995   char* f_gets (
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;2996   	char* buff,	/* Pointer to the string buffer to read */
;;;2997   	int len,	/* Size of string buffer */
;;;2998   	FIL* fil	/* Pointer to the file object */
;;;2999   )
;;;3000   {
;;;3001   	int i = 0;
000004  2500              MOVS     r5,#0
000006  4690              MOV      r8,r2                 ;3000
000008  4607              MOV      r7,r0                 ;3000
;;;3002   	char *p = buff;
00000a  4604              MOV      r4,r0
;;;3003   	UINT rc;
;;;3004   
;;;3005   
;;;3006   	while (i < len - 1) {			/* Read bytes until buffer gets filled */
00000c  1e4e              SUBS     r6,r1,#1
00000e  e00f              B        |L14.48|
                  |L14.16|
;;;3007   		f_read(fil, p, 1, &rc);
000010  466b              MOV      r3,sp
000012  2201              MOVS     r2,#1
000014  4621              MOV      r1,r4
000016  4640              MOV      r0,r8
000018  f7fffffe          BL       f_read
;;;3008   		if (rc != 1) break;			/* Break when no data to read */
00001c  9800              LDR      r0,[sp,#0]
00001e  2801              CMP      r0,#1
000020  d108              BNE      |L14.52|
;;;3009   #if _USE_STRFUNC >= 2
;;;3010   		if (*p == '\r') continue;	/* Strip '\r' */
000022  7820              LDRB     r0,[r4,#0]
000024  280d              CMP      r0,#0xd
000026  d003              BEQ      |L14.48|
;;;3011   #endif
;;;3012   		i++;
000028  1c6d              ADDS     r5,r5,#1
;;;3013   		if (*p++ == '\n') break;	/* Break when reached end of line */
00002a  1c64              ADDS     r4,r4,#1
00002c  280a              CMP      r0,#0xa
00002e  d001              BEQ      |L14.52|
                  |L14.48|
000030  42b5              CMP      r5,r6                 ;3006
000032  dbed              BLT      |L14.16|
                  |L14.52|
;;;3014   	}
;;;3015   	*p = 0;
000034  2000              MOVS     r0,#0
000036  7020              STRB     r0,[r4,#0]
;;;3016   	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
000038  b115              CBZ      r5,|L14.64|
00003a  4638              MOV      r0,r7
                  |L14.60|
;;;3017   }
00003c  e8bd83f8          POP      {r3-r9,pc}
                  |L14.64|
000040  2000              MOVS     r0,#0                 ;3016
000042  e7fb              B        |L14.60|
;;;3018   
                          ENDP


                          AREA ||i.f_lseek||, CODE, READONLY, ALIGN=1

                  f_lseek PROC
;;;2101   
;;;2102   FRESULT f_lseek (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2103   	FIL *fp,		/* Pointer to the file object */
;;;2104   	DWORD ofs		/* File pointer from top of file */
;;;2105   )
;;;2106   {
000004  460d              MOV      r5,r1
000006  4604              MOV      r4,r0
;;;2107   	FRESULT res;
;;;2108   	DWORD clst, bcs, nsect, ifptr;
;;;2109   
;;;2110   
;;;2111   	res = validate(fp->fs, fp->id);		/* Check validity of the object */
000008  8881              LDRH     r1,[r0,#4]
00000a  6800              LDR      r0,[r0,#0]
00000c  f7fffffe          BL       validate
000010  ea5f0800          MOVS     r8,r0
;;;2112   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
000014  d103              BNE      |L15.30|
;;;2113   	if (fp->flag & FA__ERROR)			/* Check abort flag */
000016  79a1              LDRB     r1,[r4,#6]
000018  0608              LSLS     r0,r1,#24
00001a  d502              BPL      |L15.34|
                  |L15.28|
;;;2114   		LEAVE_FF(fp->fs, FR_INT_ERR);
00001c  2002              MOVS     r0,#2
                  |L15.30|
;;;2115   	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
;;;2116   #if !_FS_READONLY
;;;2117   		 && !(fp->flag & FA_WRITE)
;;;2118   #endif
;;;2119   		) ofs = fp->fsize;
;;;2120   
;;;2121   	ifptr = fp->fptr;
;;;2122   	fp->fptr = nsect = 0; fp->csect = 255;
;;;2123   	if (ofs > 0) {
;;;2124   		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
;;;2125   		if (ifptr > 0 &&
;;;2126   			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
;;;2127   			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
;;;2128   			ofs -= fp->fptr;
;;;2129   			clst = fp->curr_clust;
;;;2130   		} else {									/* When seek to back cluster, */
;;;2131   			clst = fp->org_clust;					/* start from the first cluster */
;;;2132   #if !_FS_READONLY
;;;2133   			if (clst == 0) {						/* If no cluster chain, create a new chain */
;;;2134   				clst = create_chain(fp->fs, 0);
;;;2135   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2136   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2137   				fp->org_clust = clst;
;;;2138   			}
;;;2139   #endif
;;;2140   			fp->curr_clust = clst;
;;;2141   		}
;;;2142   		if (clst != 0) {
;;;2143   			while (ofs > bcs) {						/* Cluster following loop */
;;;2144   #if !_FS_READONLY
;;;2145   				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
;;;2146   					clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
;;;2147   					if (clst == 0) {				/* When disk gets full, clip file size */
;;;2148   						ofs = bcs; break;
;;;2149   					}
;;;2150   				} else
;;;2151   #endif
;;;2152   					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
;;;2153   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2154   				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
;;;2155   				fp->curr_clust = clst;
;;;2156   				fp->fptr += bcs;
;;;2157   				ofs -= bcs;
;;;2158   			}
;;;2159   			fp->fptr += ofs;
;;;2160   			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
;;;2161   			if (ofs % SS(fp->fs)) {
;;;2162   				nsect = clust2sect(fp->fs, clst);	/* Current sector */
;;;2163   				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
;;;2164   				nsect += fp->csect;
;;;2165   				fp->csect++;
;;;2166   			}
;;;2167   		}
;;;2168   	}
;;;2169   	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
;;;2170   #if !_FS_TINY
;;;2171   #if !_FS_READONLY
;;;2172   		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
;;;2173   			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
;;;2174   				ABORT(fp->fs, FR_DISK_ERR);
;;;2175   			fp->flag &= ~FA__DIRTY;
;;;2176   		}
;;;2177   #endif
;;;2178   		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
;;;2179   			ABORT(fp->fs, FR_DISK_ERR);
;;;2180   #endif
;;;2181   		fp->dsect = nsect;
;;;2182   	}
;;;2183   #if !_FS_READONLY
;;;2184   	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
;;;2185   		fp->fsize = fp->fptr;
;;;2186   		fp->flag |= FA__WRITTEN;
;;;2187   	}
;;;2188   #endif
;;;2189   
;;;2190   	LEAVE_FF(fp->fs, res);
;;;2191   }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L15.34|
000022  68e0              LDR      r0,[r4,#0xc]          ;2115
000024  42a8              CMP      r0,r5                 ;2115
000026  d202              BCS      |L15.46|
000028  0789              LSLS     r1,r1,#30             ;2117
00002a  d400              BMI      |L15.46|
00002c  4605              MOV      r5,r0                 ;2119
                  |L15.46|
00002e  2700              MOVS     r7,#0                 ;2122
000030  68a1              LDR      r1,[r4,#8]            ;2122
000032  20ff              MOVS     r0,#0xff              ;2122
000034  60a7              STR      r7,[r4,#8]            ;2122
000036  71e0              STRB     r0,[r4,#7]            ;2122
000038  b1fd              CBZ      r5,|L15.122|
00003a  6820              LDR      r0,[r4,#0]            ;2124
00003c  7886              LDRB     r6,[r0,#2]            ;2124
00003e  8942              LDRH     r2,[r0,#0xa]          ;2124
000040  4356              MULS     r6,r2,r6              ;2124
000042  b169              CBZ      r1,|L15.96|
000044  1e6a              SUBS     r2,r5,#1              ;2126
000046  1e49              SUBS     r1,r1,#1              ;2126
000048  fbb2f2f6          UDIV     r2,r2,r6              ;2126
00004c  fbb1f3f6          UDIV     r3,r1,r6              ;2126
000050  429a              CMP      r2,r3                 ;2126
000052  d305              BCC      |L15.96|
000054  1e70              SUBS     r0,r6,#1              ;2127
000056  4381              BICS     r1,r1,r0              ;2127
000058  1a6d              SUBS     r5,r5,r1              ;2128
00005a  60a1              STR      r1,[r4,#8]            ;2129
00005c  6961              LDR      r1,[r4,#0x14]         ;2129
00005e  e00b              B        |L15.120|
                  |L15.96|
000060  6921              LDR      r1,[r4,#0x10]         ;2133
000062  b941              CBNZ     r1,|L15.118|
000064  2100              MOVS     r1,#0                 ;2134
000066  f7fffffe          BL       create_chain
00006a  4601              MOV      r1,r0                 ;2134
00006c  2801              CMP      r0,#1                 ;2135
00006e  d04d              BEQ      |L15.268|
000070  1c48              ADDS     r0,r1,#1              ;2136
000072  d05c              BEQ      |L15.302|
000074  6121              STR      r1,[r4,#0x10]         ;2137
                  |L15.118|
000076  6161              STR      r1,[r4,#0x14]         ;2140
                  |L15.120|
000078  b9d1              CBNZ     r1,|L15.176|
                  |L15.122|
00007a  e030              B        |L15.222|
                  |L15.124|
00007c  79a0              LDRB     r0,[r4,#6]            ;2145
00007e  0780              LSLS     r0,r0,#30             ;2145
000080  6820              LDR      r0,[r4,#0]            ;2145
000082  d505              BPL      |L15.144|
000084  f7fffffe          BL       create_chain
000088  0001              MOVS     r1,r0                 ;2146
00008a  d104              BNE      |L15.150|
00008c  4635              MOV      r5,r6                 ;2148
00008e  e011              B        |L15.180|
                  |L15.144|
000090  f7fffffe          BL       get_fat
000094  4601              MOV      r1,r0                 ;2152
                  |L15.150|
000096  1c48              ADDS     r0,r1,#1              ;2153
000098  d049              BEQ      |L15.302|
00009a  2901              CMP      r1,#1                 ;2154
00009c  d936              BLS      |L15.268|
00009e  6820              LDR      r0,[r4,#0]            ;2154
0000a0  69c0              LDR      r0,[r0,#0x1c]         ;2154
0000a2  4288              CMP      r0,r1                 ;2154
0000a4  d932              BLS      |L15.268|
0000a6  6161              STR      r1,[r4,#0x14]         ;2156
0000a8  68a0              LDR      r0,[r4,#8]            ;2156
0000aa  1bad              SUBS     r5,r5,r6              ;2157
0000ac  4430              ADD      r0,r0,r6              ;2156
0000ae  60a0              STR      r0,[r4,#8]            ;2157
                  |L15.176|
0000b0  42b5              CMP      r5,r6                 ;2143
0000b2  d8e3              BHI      |L15.124|
                  |L15.180|
0000b4  68a0              LDR      r0,[r4,#8]            ;2159
0000b6  4428              ADD      r0,r0,r5              ;2159
0000b8  60a0              STR      r0,[r4,#8]            ;2160
0000ba  6820              LDR      r0,[r4,#0]            ;2160
0000bc  8942              LDRH     r2,[r0,#0xa]          ;2160
0000be  fbb5f2f2          UDIV     r2,r5,r2              ;2160
0000c2  71e2              STRB     r2,[r4,#7]            ;2160
0000c4  8942              LDRH     r2,[r0,#0xa]          ;2161
0000c6  fbb5f3f2          UDIV     r3,r5,r2              ;2161
0000ca  fb025213          MLS      r2,r2,r3,r5           ;2161
0000ce  b132              CBZ      r2,|L15.222|
0000d0  f7fffffe          BL       clust2sect
0000d4  b1d0              CBZ      r0,|L15.268|
0000d6  79e1              LDRB     r1,[r4,#7]            ;2164
0000d8  180f              ADDS     r7,r1,r0              ;2164
0000da  1c49              ADDS     r1,r1,#1              ;2165
0000dc  71e1              STRB     r1,[r4,#7]            ;2165
                  |L15.222|
0000de  6820              LDR      r0,[r4,#0]            ;2169
0000e0  68a1              LDR      r1,[r4,#8]            ;2169
0000e2  8942              LDRH     r2,[r0,#0xa]          ;2169
0000e4  fbb1f3f2          UDIV     r3,r1,r2              ;2169
0000e8  fb021113          MLS      r1,r2,r3,r1           ;2169
0000ec  b331              CBZ      r1,|L15.316|
0000ee  69a2              LDR      r2,[r4,#0x18]         ;2169
0000f0  42ba              CMP      r2,r7                 ;2169
0000f2  d023              BEQ      |L15.316|
0000f4  79a1              LDRB     r1,[r4,#6]            ;2172
0000f6  f1040524          ADD      r5,r4,#0x24           ;2173
0000fa  0649              LSLS     r1,r1,#25             ;2172
0000fc  d50f              BPL      |L15.286|
0000fe  7840              LDRB     r0,[r0,#1]            ;2173
000100  2301              MOVS     r3,#1                 ;2173
000102  4629              MOV      r1,r5                 ;2173
000104  f7fffffe          BL       disk_write
000108  b988              CBNZ     r0,|L15.302|
00010a  e004              B        |L15.278|
                  |L15.268|
00010c  79a0              LDRB     r0,[r4,#6]            ;2163
00010e  f0400080          ORR      r0,r0,#0x80           ;2163
000112  71a0              STRB     r0,[r4,#6]            ;2163
000114  e782              B        |L15.28|
                  |L15.278|
000116  79a0              LDRB     r0,[r4,#6]            ;2175
000118  f0200040          BIC      r0,r0,#0x40           ;2175
00011c  71a0              STRB     r0,[r4,#6]            ;2175
                  |L15.286|
00011e  6820              LDR      r0,[r4,#0]            ;2178
000120  2301              MOVS     r3,#1                 ;2178
000122  463a              MOV      r2,r7                 ;2178
000124  7840              LDRB     r0,[r0,#1]            ;2178
000126  4629              MOV      r1,r5                 ;2178
000128  f7fffffe          BL       disk_read
00012c  b128              CBZ      r0,|L15.314|
                  |L15.302|
00012e  79a0              LDRB     r0,[r4,#6]            ;2179
000130  f0400080          ORR      r0,r0,#0x80           ;2179
000134  71a0              STRB     r0,[r4,#6]            ;2179
000136  2001              MOVS     r0,#1                 ;2179
000138  e771              B        |L15.30|
                  |L15.314|
00013a  61a7              STR      r7,[r4,#0x18]         ;2181
                  |L15.316|
00013c  e9d40102          LDRD     r0,r1,[r4,#8]         ;2181
000140  4288              CMP      r0,r1                 ;2184
000142  d904              BLS      |L15.334|
000144  60e0              STR      r0,[r4,#0xc]          ;2186
000146  79a0              LDRB     r0,[r4,#6]            ;2186
000148  f0400020          ORR      r0,r0,#0x20           ;2186
00014c  71a0              STRB     r0,[r4,#6]            ;2186
                  |L15.334|
00014e  4640              MOV      r0,r8                 ;2190
000150  e765              B        |L15.30|
;;;2192   
                          ENDP


                          AREA ||i.f_mkdir||, CODE, READONLY, ALIGN=1

                  f_mkdir PROC
;;;2480   
;;;2481   FRESULT f_mkdir (
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;2482   	const XCHAR *path		/* Pointer to the directory path */
;;;2483   )
;;;2484   {
000004  b090              SUB      sp,sp,#0x40
;;;2485   	FRESULT res;
;;;2486   	DIR dj;
;;;2487   	NAMEBUF(sfn, lfn);
;;;2488   	BYTE *dir, n;
;;;2489   	DWORD dsect, dclst, pclst, tim;
;;;2490   
;;;2491   
;;;2492   	res = chk_mounted(&path, &dj.fs, 1);
000006  2201              MOVS     r2,#1
000008  4669              MOV      r1,sp
00000a  a810              ADD      r0,sp,#0x40
00000c  f7fffffe          BL       chk_mounted
;;;2493   	if (res != FR_OK) LEAVE_FF(dj.fs, res);
000010  2800              CMP      r0,#0
000012  d114              BNE      |L16.62|
;;;2494   
;;;2495   	INITBUF(dj, sfn, lfn);
000014  a80c              ADD      r0,sp,#0x30
;;;2496   	res = follow_path(&dj, path);			/* Follow the file path */
000016  9006              STR      r0,[sp,#0x18]
000018  4668              MOV      r0,sp
00001a  9910              LDR      r1,[sp,#0x40]
00001c  f7fffffe          BL       follow_path
;;;2497   	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
000020  b160              CBZ      r0,|L16.60|
;;;2498   	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
;;;2499   		res = FR_INVALID_NAME;
;;;2500   	if (res != FR_NO_FILE)					/* Any error occurred */
000022  2804              CMP      r0,#4
000024  d10b              BNE      |L16.62|
;;;2501   		LEAVE_FF(dj.fs, res);
;;;2502   
;;;2503   	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
000026  2100              MOVS     r1,#0
000028  9800              LDR      r0,[sp,#0]
00002a  f7fffffe          BL       create_chain
00002e  0005              MOVS     r5,r0
;;;2504   	res = FR_OK;
000030  f04f0000          MOV      r0,#0
;;;2505   	if (dclst == 0) res = FR_DENIED;
000034  d006              BEQ      |L16.68|
;;;2506   	if (dclst == 1) res = FR_INT_ERR;
000036  2d01              CMP      r5,#1
000038  d006              BEQ      |L16.72|
00003a  e006              B        |L16.74|
                  |L16.60|
00003c  2008              MOVS     r0,#8                 ;2497
                  |L16.62|
;;;2507   	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
;;;2508   	if (res == FR_OK)
;;;2509   		res = move_window(dj.fs, 0);
;;;2510   	if (res != FR_OK) LEAVE_FF(dj.fs, res);
;;;2511   	dsect = clust2sect(dj.fs, dclst);
;;;2512   
;;;2513   	dir = dj.fs->win;						/* Initialize the new directory table */
;;;2514   	mem_set(dir, 0, SS(dj.fs));
;;;2515   	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
;;;2516   	dir[DIR_Name] = '.';
;;;2517   	dir[DIR_Attr] = AM_DIR;
;;;2518   	tim = get_fattime();
;;;2519   	ST_DWORD(dir+DIR_WrtTime, tim);
;;;2520   	ST_WORD(dir+DIR_FstClusLO, dclst);
;;;2521   	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
;;;2522   	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
;;;2523   	dir[33] = '.';
;;;2524   	pclst = dj.sclust;
;;;2525   	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
;;;2526   		pclst = 0;
;;;2527   	ST_WORD(dir+32+DIR_FstClusLO, pclst);
;;;2528   	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
;;;2529   	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
;;;2530   		dj.fs->winsect = dsect++;
;;;2531   		dj.fs->wflag = 1;
;;;2532   		res = move_window(dj.fs, 0);
;;;2533   		if (res) LEAVE_FF(dj.fs, res);
;;;2534   		mem_set(dir, 0, SS(dj.fs));
;;;2535   	}
;;;2536   
;;;2537   	res = dir_register(&dj);
;;;2538   	if (res != FR_OK) {
;;;2539   		remove_chain(dj.fs, dclst);
;;;2540   	} else {
;;;2541   		dir = dj.dir;
;;;2542   		dir[DIR_Attr] = AM_DIR;					/* Attribute */
;;;2543   		ST_DWORD(dir+DIR_WrtTime, tim);			/* Create time */
;;;2544   		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
;;;2545   		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
;;;2546   		dj.fs->wflag = 1;
;;;2547   		res = sync(dj.fs);
;;;2548   	}
;;;2549   
;;;2550   	LEAVE_FF(dj.fs, res);
;;;2551   }
00003e  b011              ADD      sp,sp,#0x44
000040  e8bd8ff0          POP      {r4-r11,pc}
                  |L16.68|
000044  2007              MOVS     r0,#7                 ;2505
000046  e000              B        |L16.74|
                  |L16.72|
000048  2002              MOVS     r0,#2                 ;2506
                  |L16.74|
00004a  1c69              ADDS     r1,r5,#1              ;2507
00004c  d04a              BEQ      |L16.228|
00004e  2800              CMP      r0,#0                 ;2508
000050  d1f5              BNE      |L16.62|
000052  2100              MOVS     r1,#0                 ;2509
000054  9800              LDR      r0,[sp,#0]            ;2509
000056  f7fffffe          BL       move_window
00005a  2800              CMP      r0,#0                 ;2509
00005c  d1ef              BNE      |L16.62|
00005e  4629              MOV      r1,r5                 ;2511
000060  9800              LDR      r0,[sp,#0]            ;2511
000062  f7fffffe          BL       clust2sect
000066  4606              MOV      r6,r0                 ;2511
000068  9800              LDR      r0,[sp,#0]            ;2514
00006a  9c00              LDR      r4,[sp,#0]            ;2513
00006c  2100              MOVS     r1,#0                 ;2514
00006e  3430              ADDS     r4,r4,#0x30           ;2513
000070  8942              LDRH     r2,[r0,#0xa]          ;2514
000072  4620              MOV      r0,r4                 ;2514
000074  f7fffffe          BL       mem_set
000078  220b              MOVS     r2,#0xb               ;2515
00007a  2120              MOVS     r1,#0x20              ;2515
00007c  4620              MOV      r0,r4                 ;2515
00007e  f7fffffe          BL       mem_set
000082  272e              MOVS     r7,#0x2e              ;2516
000084  7027              STRB     r7,[r4,#0]            ;2516
000086  2010              MOVS     r0,#0x10              ;2517
000088  72e0              STRB     r0,[r4,#0xb]          ;2517
00008a  f7fffffe          BL       get_fattime
00008e  b2c1              UXTB     r1,r0                 ;2519
000090  910b              STR      r1,[sp,#0x2c]         ;2519
000092  75a1              STRB     r1,[r4,#0x16]         ;2519
000094  f3c02107          UBFX     r1,r0,#8,#8           ;2519
000098  910a              STR      r1,[sp,#0x28]         ;2519
00009a  75e1              STRB     r1,[r4,#0x17]         ;2519
00009c  f3c04107          UBFX     r1,r0,#16,#8          ;2519
0000a0  9109              STR      r1,[sp,#0x24]         ;2519
0000a2  7621              STRB     r1,[r4,#0x18]         ;2519
0000a4  0e00              LSRS     r0,r0,#24             ;2519
0000a6  9008              STR      r0,[sp,#0x20]         ;2519
0000a8  7660              STRB     r0,[r4,#0x19]         ;2519
0000aa  b2e8              UXTB     r0,r5                 ;2520
0000ac  9007              STR      r0,[sp,#0x1c]         ;2520
0000ae  76a0              STRB     r0,[r4,#0x1a]         ;2520
0000b0  f3c52b07          UBFX     r11,r5,#8,#8          ;2520
0000b4  f884b01b          STRB     r11,[r4,#0x1b]        ;2520
0000b8  f3c54a07          UBFX     r10,r5,#16,#8         ;2521
0000bc  f884a014          STRB     r10,[r4,#0x14]        ;2521
0000c0  ea4f6915          LSR      r9,r5,#24             ;2521
0000c4  f8849015          STRB     r9,[r4,#0x15]         ;2521
0000c8  2220              MOVS     r2,#0x20              ;2522
0000ca  4621              MOV      r1,r4                 ;2522
0000cc  f1040020          ADD      r0,r4,#0x20           ;2522
0000d0  f7fffffe          BL       mem_cpy
0000d4  f8847021          STRB     r7,[r4,#0x21]         ;2523
0000d8  9900              LDR      r1,[sp,#0]            ;2525
0000da  9802              LDR      r0,[sp,#8]            ;2525
0000dc  7809              LDRB     r1,[r1,#0]            ;2525
0000de  2903              CMP      r1,#3                 ;2525
0000e0  d002              BEQ      |L16.232|
0000e2  e006              B        |L16.242|
                  |L16.228|
0000e4  2001              MOVS     r0,#1                 ;2507
0000e6  e7aa              B        |L16.62|
                  |L16.232|
0000e8  9900              LDR      r1,[sp,#0]            ;2525
0000ea  6a49              LDR      r1,[r1,#0x24]         ;2525
0000ec  4281              CMP      r1,r0                 ;2525
0000ee  d100              BNE      |L16.242|
0000f0  2000              MOVS     r0,#0                 ;2526
                  |L16.242|
0000f2  3434              ADDS     r4,r4,#0x34           ;2526
0000f4  0a01              LSRS     r1,r0,#8              ;2527
0000f6  71a0              STRB     r0,[r4,#6]            ;2527
0000f8  71e1              STRB     r1,[r4,#7]            ;2527
0000fa  0c01              LSRS     r1,r0,#16             ;2528
0000fc  7021              STRB     r1,[r4,#0]            ;2528
0000fe  0e00              LSRS     r0,r0,#24             ;2528
000100  7060              STRB     r0,[r4,#1]            ;2528
000102  3c34              SUBS     r4,r4,#0x34           ;2528
000104  2700              MOVS     r7,#0                 ;2529
000106  f04f0801          MOV      r8,#1                 ;2492
00010a  e013              B        |L16.308|
                  |L16.268|
00010c  9800              LDR      r0,[sp,#0]            ;2530
00010e  62c6              STR      r6,[r0,#0x2c]         ;2530
000110  9900              LDR      r1,[sp,#0]            ;2531
000112  1c76              ADDS     r6,r6,#1              ;2530
000114  f8818004          STRB     r8,[r1,#4]            ;2531
000118  2100              MOVS     r1,#0                 ;2532
00011a  9800              LDR      r0,[sp,#0]            ;2532
00011c  f7fffffe          BL       move_window
000120  2800              CMP      r0,#0                 ;2533
000122  d18c              BNE      |L16.62|
000124  9800              LDR      r0,[sp,#0]            ;2534
000126  2100              MOVS     r1,#0                 ;2534
000128  8942              LDRH     r2,[r0,#0xa]          ;2534
00012a  4620              MOV      r0,r4                 ;2534
00012c  f7fffffe          BL       mem_set
000130  1c7f              ADDS     r7,r7,#1              ;2529
000132  b2ff              UXTB     r7,r7                 ;2529
                  |L16.308|
000134  9800              LDR      r0,[sp,#0]            ;2529
000136  7880              LDRB     r0,[r0,#2]            ;2529
000138  42b8              CMP      r0,r7                 ;2529
00013a  d8e7              BHI      |L16.268|
00013c  4668              MOV      r0,sp                 ;2537
00013e  f7fffffe          BL       dir_register
000142  0004              MOVS     r4,r0                 ;2537
000144  d004              BEQ      |L16.336|
000146  4629              MOV      r1,r5                 ;2539
000148  9800              LDR      r0,[sp,#0]            ;2539
00014a  f7fffffe          BL       remove_chain
00014e  e019              B        |L16.388|
                  |L16.336|
000150  9805              LDR      r0,[sp,#0x14]         ;2542
000152  2110              MOVS     r1,#0x10              ;2542
000154  72c1              STRB     r1,[r0,#0xb]          ;2542
000156  990b              LDR      r1,[sp,#0x2c]         ;2543
000158  7581              STRB     r1,[r0,#0x16]         ;2543
00015a  990a              LDR      r1,[sp,#0x28]         ;2543
00015c  75c1              STRB     r1,[r0,#0x17]         ;2543
00015e  9909              LDR      r1,[sp,#0x24]         ;2543
000160  7601              STRB     r1,[r0,#0x18]         ;2543
000162  9908              LDR      r1,[sp,#0x20]         ;2543
000164  7641              STRB     r1,[r0,#0x19]         ;2543
000166  9907              LDR      r1,[sp,#0x1c]         ;2544
000168  7681              STRB     r1,[r0,#0x1a]         ;2544
00016a  f880b01b          STRB     r11,[r0,#0x1b]        ;2544
00016e  f880a014          STRB     r10,[r0,#0x14]        ;2545
000172  f8809015          STRB     r9,[r0,#0x15]         ;2545
000176  9900              LDR      r1,[sp,#0]            ;2546
000178  f8818004          STRB     r8,[r1,#4]            ;2546
00017c  9800              LDR      r0,[sp,#0]            ;2547
00017e  f7fffffe          BL       sync
000182  4604              MOV      r4,r0                 ;2547
                  |L16.388|
000184  4620              MOV      r0,r4                 ;2550
000186  e75a              B        |L16.62|
;;;2552   
                          ENDP


                          AREA ||i.f_mkfs||, CODE, READONLY, ALIGN=2

                  f_mkfs PROC
;;;2778   
;;;2779   FRESULT f_mkfs (
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2780   	BYTE drv,			/* Logical drive number */
;;;2781   	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
;;;2782   	WORD allocsize		/* Allocation unit size [bytes] */
;;;2783   )
;;;2784   {
000004  b084              SUB      sp,sp,#0x10
000006  4617              MOV      r7,r2
000008  9804              LDR      r0,[sp,#0x10]
00000a  460c              MOV      r4,r1
00000c  b118              CBZ      r0,|L17.22|
;;;2785   	static const DWORD sstbl[] = { 2048000, 1024000, 512000, 256000, 128000, 64000, 32000, 16000, 8000, 4000,   0 };
;;;2786   	static const WORD cstbl[] =  {   32768,   16384,   8192,   4096,   2048, 16384,  8192,  4096, 2048, 1024, 512 };
;;;2787   	BYTE fmt, m, *tbl;
;;;2788   	DWORD b_part, b_fat, b_dir, b_data;		/* Area offset (LBA) */
;;;2789   	DWORD n_part, n_rsv, n_fat, n_dir;		/* Area size */
;;;2790   	DWORD n_clst, d, n;
;;;2791   	WORD as;
;;;2792   	FATFS *fs;
;;;2793   	DSTATUS stat;
;;;2794   
;;;2795   
;;;2796   	/* Check validity of the parameters */
;;;2797   	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
00000e  200b              MOVS     r0,#0xb
                  |L17.16|
;;;2798   	if (partition >= 2) return FR_MKFS_ABORTED;
;;;2799   
;;;2800   	/* Check mounted drive and clear work area */
;;;2801   	fs = FatFs[drv];
;;;2802   	if (!fs) return FR_NOT_ENABLED;
;;;2803   	fs->fs_type = 0;
;;;2804   	drv = LD2PD(drv);
;;;2805   
;;;2806   	/* Get disk statics */
;;;2807   	stat = disk_initialize(drv);
;;;2808   	if (stat & STA_NOINIT) return FR_NOT_READY;
;;;2809   	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
;;;2810   #if _MAX_SS != 512						/* Get disk sector size */
;;;2811   	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
;;;2812   		|| SS(fs) > _MAX_SS)
;;;2813   		return FR_MKFS_ABORTED;
;;;2814   #endif
;;;2815   	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
;;;2816   		return FR_MKFS_ABORTED;
;;;2817   	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
;;;2818   	b_part = (!partition) ? 63 : 0;		/* Boot sector */
;;;2819   	n_part -= b_part;
;;;2820   	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit size */
;;;2821   	if (d != allocsize) allocsize = 0;
;;;2822   	if (!allocsize) {					/* Auto selection of cluster size */
;;;2823   		d = n_part;
;;;2824   		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
;;;2825   		for (n = 0; d < sstbl[n]; n++) ;
;;;2826   		allocsize = cstbl[n];
;;;2827   	}
;;;2828   	if (allocsize < SS(fs)) allocsize = SS(fs);
;;;2829   
;;;2830   	allocsize /= SS(fs);		/* Number of sectors per cluster */
;;;2831   
;;;2832   	/* Pre-compute number of clusters and FAT type */
;;;2833   	n_clst = n_part / allocsize;
;;;2834   	fmt = FS_FAT12;
;;;2835   	if (n_clst >= 0xFF5) fmt = FS_FAT16;
;;;2836   	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
;;;2837   
;;;2838   	/* Determine offset and size of FAT structure */
;;;2839   	switch (fmt) {
;;;2840   	case FS_FAT12:
;;;2841   		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
;;;2842   		n_rsv = 1 + partition;
;;;2843   		n_dir = N_ROOTDIR * 32 / SS(fs);
;;;2844   		break;
;;;2845   	case FS_FAT16:
;;;2846   		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
;;;2847   		n_rsv = 1 + partition;
;;;2848   		n_dir = N_ROOTDIR * 32 / SS(fs);
;;;2849   		break;
;;;2850   	default:
;;;2851   		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
;;;2852   		n_rsv = 33 - partition;
;;;2853   		n_dir = 0;
;;;2854   	}
;;;2855   	b_fat = b_part + n_rsv;			/* FATs start sector */
;;;2856   	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
;;;2857   	b_data = b_dir + n_dir;			/* Data start sector */
;;;2858   
;;;2859   	/* Align data start sector to erase block boundary (for flash memory media) */
;;;2860   	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
;;;2861   	n = (b_data + n - 1) & ~(n - 1);
;;;2862   	n_fat += (n - b_data) / N_FATS;
;;;2863   	/* b_dir and b_data are no longer used below */
;;;2864   
;;;2865   	/* Determine number of cluster and final check of validity of the FAT type */
;;;2866   	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
;;;2867   	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
;;;2868   		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
;;;2869   		return FR_MKFS_ABORTED;
;;;2870   
;;;2871   	/* Create partition table if needed */
;;;2872   	if (!partition) {
;;;2873   		DWORD n_disk = b_part + n_part;
;;;2874   
;;;2875   		mem_set(fs->win, 0, SS(fs));
;;;2876   		tbl = fs->win+MBR_Table;
;;;2877   		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
;;;2878   		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
;;;2879   			n_disk = n_disk / 63 / 255;
;;;2880   			tbl[7] = (BYTE)n_disk;
;;;2881   			tbl[6] = (BYTE)((n_disk >> 2) | 63);
;;;2882   		} else {
;;;2883   			ST_WORD(&tbl[6], 0xFFFF);
;;;2884   		}
;;;2885   		tbl[5] = 254;
;;;2886   		if (fmt != FS_FAT32)			/* System ID */
;;;2887   			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
;;;2888   		else
;;;2889   			tbl[4] = 0x0c;
;;;2890   		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
;;;2891   		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
;;;2892   		ST_WORD(tbl+64, 0xAA55);		/* Signature */
;;;2893   		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
;;;2894   			return FR_DISK_ERR;
;;;2895   		partition = 0xF8;
;;;2896   	} else {
;;;2897   		partition = 0xF0;
;;;2898   	}
;;;2899   
;;;2900   	/* Create boot record */
;;;2901   	tbl = fs->win;								/* Clear buffer */
;;;2902   	mem_set(tbl, 0, SS(fs));
;;;2903   	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
;;;2904   	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
;;;2905   	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
;;;2906   	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
;;;2907   	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
;;;2908   	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
;;;2909   	if (n_part < 0x10000) {						/* Number of total sectors */
;;;2910   		ST_WORD(tbl+BPB_TotSec16, n_part);
;;;2911   	} else {
;;;2912   		ST_DWORD(tbl+BPB_TotSec32, n_part);
;;;2913   	}
;;;2914   	tbl[BPB_Media] = partition;					/* Media descriptor */
;;;2915   	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
;;;2916   	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
;;;2917   	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
;;;2918   	n = get_fattime();							/* Use current time as a VSN */
;;;2919   	if (fmt != FS_FAT32) {
;;;2920   		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
;;;2921   		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of sectors per FAT */
;;;2922   		tbl[BS_DrvNum] = 0x80;					/* Drive number */
;;;2923   		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
;;;2924   		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume label, FAT signature */
;;;2925   	} else {
;;;2926   		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
;;;2927   		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of sectors per FAT */
;;;2928   		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
;;;2929   		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
;;;2930   		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
;;;2931   		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
;;;2932   		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
;;;2933   		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume label, FAT signature */
;;;2934   	}
;;;2935   	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
;;;2936   	if (SS(fs) > 512U) {
;;;2937   		ST_WORD(tbl+SS(fs)-2, 0xAA55);
;;;2938   	}
;;;2939   	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
;;;2940   		return FR_DISK_ERR;
;;;2941   	if (fmt == FS_FAT32)
;;;2942   		disk_write(drv, tbl, b_part+6, 1);
;;;2943   
;;;2944   	/* Initialize FAT area */
;;;2945   	for (m = 0; m < N_FATS; m++) {
;;;2946   		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
;;;2947   		if (fmt != FS_FAT32) {
;;;2948   			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
;;;2949   			n |= partition;
;;;2950   			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
;;;2951   		} else {
;;;2952   			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
;;;2953   			ST_DWORD(tbl+4, 0xFFFFFFFF);
;;;2954   			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
;;;2955   		}
;;;2956   		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
;;;2957   			return FR_DISK_ERR;
;;;2958   		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
;;;2959   		for (n = 1; n < n_fat; n++) {
;;;2960   			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
;;;2961   				return FR_DISK_ERR;
;;;2962   		}
;;;2963   	}
;;;2964   
;;;2965   	/* Initialize Root directory */
;;;2966   	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
;;;2967   	do {
;;;2968   		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
;;;2969   			return FR_DISK_ERR;
;;;2970   	} while (--m);
;;;2971   
;;;2972   	/* Create FSInfo record if needed */
;;;2973   	if (fmt == FS_FAT32) {
;;;2974   		ST_WORD(tbl+BS_55AA, 0xAA55);
;;;2975   		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
;;;2976   		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
;;;2977   		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
;;;2978   		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
;;;2979   		disk_write(drv, tbl, b_part+1, 1);
;;;2980   		disk_write(drv, tbl, b_part+7, 1);
;;;2981   	}
;;;2982   
;;;2983   	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
;;;2984   }
000010  b007              ADD      sp,sp,#0x1c
000012  e8bd8ff0          POP      {r4-r11,pc}
                  |L17.22|
000016  2c02              CMP      r4,#2                 ;2798
000018  d27c              BCS      |L17.276|
00001a  48fe              LDR      r0,|L17.1044|
00001c  6806              LDR      r6,[r0,#0]            ;2802
00001e  b13e              CBZ      r6,|L17.48|
000020  2000              MOVS     r0,#0                 ;2803
000022  7030              STRB     r0,[r6,#0]            ;2803
000024  f7fffffe          BL       disk_initialize
000028  07c1              LSLS     r1,r0,#31             ;2808
00002a  d003              BEQ      |L17.52|
00002c  2003              MOVS     r0,#3                 ;2808
                  |L17.46|
00002e  e7ef              B        |L17.16|
                  |L17.48|
000030  200c              MOVS     r0,#0xc               ;2802
000032  e7ed              B        |L17.16|
                  |L17.52|
000034  0740              LSLS     r0,r0,#29             ;2809
000036  d501              BPL      |L17.60|
000038  200a              MOVS     r0,#0xa               ;2809
00003a  e7e9              B        |L17.16|
                  |L17.60|
00003c  f106020a          ADD      r2,r6,#0xa            ;2811
000040  2102              MOVS     r1,#2                 ;2811
000042  9804              LDR      r0,[sp,#0x10]         ;2811
000044  f7fffffe          BL       disk_ioctl
000048  2800              CMP      r0,#0                 ;2811
00004a  d163              BNE      |L17.276|
00004c  8970              LDRH     r0,[r6,#0xa]          ;2812
00004e  f5b06f80          CMP      r0,#0x400             ;2812
000052  d85f              BHI      |L17.276|
000054  aa02              ADD      r2,sp,#8              ;2815
000056  2101              MOVS     r1,#1                 ;2815
000058  9804              LDR      r0,[sp,#0x10]         ;2815
00005a  f7fffffe          BL       disk_ioctl
00005e  2800              CMP      r0,#0                 ;2815
000060  d158              BNE      |L17.276|
000062  9802              LDR      r0,[sp,#8]            ;2815
000064  f5b06ffa          CMP      r0,#0x7d0             ;2815
000068  d354              BCC      |L17.276|
00006a  f04f61fa          MOV      r1,#0x7d00000         ;2817
00006e  4288              CMP      r0,r1                 ;2817
000070  d900              BLS      |L17.116|
000072  9102              STR      r1,[sp,#8]            ;2817
                  |L17.116|
000074  b14c              CBZ      r4,|L17.138|
000076  2000              MOVS     r0,#0                 ;2818
                  |L17.120|
000078  4680              MOV      r8,r0                 ;2818
00007a  9902              LDR      r1,[sp,#8]            ;2819
00007c  f44f7000          MOV      r0,#0x200             ;2820
000080  eba10108          SUB      r1,r1,r8              ;2819
000084  0182              LSLS     r2,r0,#6              ;2820
000086  9102              STR      r1,[sp,#8]            ;2820
000088  e004              B        |L17.148|
                  |L17.138|
00008a  203f              MOVS     r0,#0x3f              ;2818
00008c  e7f4              B        |L17.120|
                  |L17.142|
00008e  0040              LSLS     r0,r0,#1              ;2820
000090  4290              CMP      r0,r2                 ;2820
000092  d801              BHI      |L17.152|
                  |L17.148|
000094  42b8              CMP      r0,r7                 ;2820
000096  d1fa              BNE      |L17.142|
                  |L17.152|
000098  42b8              CMP      r0,r7                 ;2821
00009a  d100              BNE      |L17.158|
00009c  b9af              CBNZ     r7,|L17.202|
                  |L17.158|
00009e  8970              LDRH     r0,[r6,#0xa]          ;2824
0000a0  f44f7200          MOV      r2,#0x200             ;2820
0000a4  e001              B        |L17.170|
                  |L17.166|
0000a6  0849              LSRS     r1,r1,#1              ;2824
0000a8  0840              LSRS     r0,r0,#1              ;2824
                  |L17.170|
0000aa  4290              CMP      r0,r2                 ;2824
0000ac  d8fb              BHI      |L17.166|
0000ae  2000              MOVS     r0,#0                 ;2825
0000b0  4ad9              LDR      r2,|L17.1048|
0000b2  9001              STR      r0,[sp,#4]            ;2825
0000b4  e001              B        |L17.186|
                  |L17.182|
0000b6  1c40              ADDS     r0,r0,#1              ;2825
0000b8  9001              STR      r0,[sp,#4]            ;2825
                  |L17.186|
0000ba  f8523020          LDR      r3,[r2,r0,LSL #2]     ;2825
0000be  428b              CMP      r3,r1                 ;2825
0000c0  d8f9              BHI      |L17.182|
0000c2  49d5              LDR      r1,|L17.1048|
0000c4  312c              ADDS     r1,r1,#0x2c           ;2826
0000c6  f8317010          LDRH     r7,[r1,r0,LSL #1]     ;2826
                  |L17.202|
0000ca  8975              LDRH     r5,[r6,#0xa]          ;2828
0000cc  42bd              CMP      r5,r7                 ;2828
0000ce  d900              BLS      |L17.210|
0000d0  462f              MOV      r7,r5                 ;2828
                  |L17.210|
0000d2  fbb7f0f5          UDIV     r0,r7,r5              ;2830
0000d6  9902              LDR      r1,[sp,#8]            ;2833
0000d8  9006              STR      r0,[sp,#0x18]         ;2833
0000da  fbb1f0f0          UDIV     r0,r1,r0              ;2833
0000de  2701              MOVS     r7,#1                 ;2834
0000e0  f64071f5          MOV      r1,#0xff5             ;2835
0000e4  4288              CMP      r0,r1                 ;2835
0000e6  d300              BCC      |L17.234|
0000e8  2702              MOVS     r7,#2                 ;2835
                  |L17.234|
0000ea  f64f71f5          MOV      r1,#0xfff5            ;2836
0000ee  4288              CMP      r0,r1                 ;2836
0000f0  d300              BCC      |L17.244|
0000f2  2703              MOVS     r7,#3                 ;2836
                  |L17.244|
0000f4  f44f4180          MOV      r1,#0x4000            ;2843
0000f8  2f01              CMP      r7,#1                 ;2839
0000fa  d00c              BEQ      |L17.278|
0000fc  2f02              CMP      r7,#2                 ;2839
0000fe  d011              BEQ      |L17.292|
000100  2107              MOVS     r1,#7                 ;2851
000102  eb010080          ADD      r0,r1,r0,LSL #2       ;2851
000106  4428              ADD      r0,r0,r5              ;2851
000108  fbb0f9f5          UDIV     r9,r0,r5              ;2851
00010c  f1c40b21          RSB      r11,r4,#0x21          ;2852
000110  2000              MOVS     r0,#0                 ;2853
000112  e011              B        |L17.312|
                  |L17.276|
000114  e041              B        |L17.410|
                  |L17.278|
000116  eb000240          ADD      r2,r0,r0,LSL #1       ;2841
00011a  1c52              ADDS     r2,r2,#1              ;2841
00011c  2002              MOVS     r0,#2                 ;2841
00011e  eb000052          ADD      r0,r0,r2,LSR #1       ;2841
000122  e002              B        |L17.298|
                  |L17.292|
000124  2203              MOVS     r2,#3                 ;2846
000126  eb020040          ADD      r0,r2,r0,LSL #1       ;2846
                  |L17.298|
00012a  4428              ADD      r0,r0,r5              ;2841
00012c  fbb0f9f5          UDIV     r9,r0,r5              ;2841
000130  fbb1f0f5          UDIV     r0,r1,r5              ;2843
000134  f1040b01          ADD      r11,r4,#1             ;2842
                  |L17.312|
000138  4682              MOV      r10,r0                ;2843
00013a  eb08050b          ADD      r5,r8,r11             ;2855
00013e  eb050009          ADD      r0,r5,r9              ;2856
000142  4450              ADD      r0,r0,r10             ;2857
000144  9000              STR      r0,[sp,#0]            ;2860
000146  aa01              ADD      r2,sp,#4              ;2860
000148  2103              MOVS     r1,#3                 ;2860
00014a  9804              LDR      r0,[sp,#0x10]         ;2860
00014c  f7fffffe          BL       disk_ioctl
000150  bb18              CBNZ     r0,|L17.410|
000152  e9dd0100          LDRD     r0,r1,[sp,#0]         ;2860
000156  4408              ADD      r0,r0,r1              ;2861
000158  1e40              SUBS     r0,r0,#1              ;2861
00015a  1e49              SUBS     r1,r1,#1              ;2861
00015c  4388              BICS     r0,r0,r1              ;2861
00015e  9900              LDR      r1,[sp,#0]            ;2862
000160  9001              STR      r0,[sp,#4]            ;2862
000162  1a41              SUBS     r1,r0,r1              ;2862
000164  9802              LDR      r0,[sp,#8]            ;2866
000166  4489              ADD      r9,r9,r1              ;2862
000168  eba0020b          SUB      r2,r0,r11             ;2866
00016c  eba20209          SUB      r2,r2,r9              ;2866
000170  9906              LDR      r1,[sp,#0x18]         ;2866
000172  eba2020a          SUB      r2,r2,r10             ;2866
000176  fbb2f1f1          UDIV     r1,r2,r1              ;2866
00017a  9100              STR      r1,[sp,#0]            ;2867
00017c  2f02              CMP      r7,#2                 ;2867
00017e  d002              BEQ      |L17.390|
000180  2f03              CMP      r7,#3                 ;2868
000182  d005              BEQ      |L17.400|
000184  e00b              B        |L17.414|
                  |L17.390|
000186  f64072f5          MOV      r2,#0xff5             ;2867
00018a  4291              CMP      r1,r2                 ;2867
00018c  d305              BCC      |L17.410|
00018e  e006              B        |L17.414|
                  |L17.400|
000190  460a              MOV      r2,r1                 ;2868
000192  f64f71f5          MOV      r1,#0xfff5            ;2868
000196  428a              CMP      r2,r1                 ;2868
000198  d201              BCS      |L17.414|
                  |L17.410|
00019a  200e              MOVS     r0,#0xe               ;2869
00019c  e738              B        |L17.16|
                  |L17.414|
00019e  b10c              CBZ      r4,|L17.420|
0001a0  20f0              MOVS     r0,#0xf0              ;2897
0001a2  e04b              B        |L17.572|
                  |L17.420|
0001a4  eb080400          ADD      r4,r8,r0              ;2873
0001a8  8972              LDRH     r2,[r6,#0xa]          ;2875
0001aa  f1060030          ADD      r0,r6,#0x30           ;2875
0001ae  2100              MOVS     r1,#0                 ;2875
0001b0  9003              STR      r0,[sp,#0xc]          ;2875
0001b2  f7fffffe          BL       mem_set
0001b6  f50670f7          ADD      r0,r6,#0x1ee          ;2876
0001ba  2180              MOVS     r1,#0x80              ;2877
0001bc  7001              STRB     r1,[r0,#0]            ;2877
0001be  2101              MOVS     r1,#1                 ;2877
0001c0  7041              STRB     r1,[r0,#1]            ;2877
0001c2  7081              STRB     r1,[r0,#2]            ;2877
0001c4  2200              MOVS     r2,#0                 ;2877
0001c6  4995              LDR      r1,|L17.1052|
0001c8  70c2              STRB     r2,[r0,#3]            ;2877
0001ca  428c              CMP      r4,r1                 ;2878
0001cc  d208              BCS      |L17.480|
0001ce  1289              ASRS     r1,r1,#10             ;2879
0001d0  fbb4f1f1          UDIV     r1,r4,r1              ;2879
0001d4  71c1              STRB     r1,[r0,#7]            ;2880
0001d6  233f              MOVS     r3,#0x3f              ;2881
0001d8  ea430191          ORR      r1,r3,r1,LSR #2       ;2881
0001dc  7181              STRB     r1,[r0,#6]            ;2881
0001de  e002              B        |L17.486|
                  |L17.480|
0001e0  21ff              MOVS     r1,#0xff              ;2883
0001e2  7181              STRB     r1,[r0,#6]            ;2883
0001e4  71c1              STRB     r1,[r0,#7]            ;2883
                  |L17.486|
0001e6  21fe              MOVS     r1,#0xfe              ;2885
0001e8  7141              STRB     r1,[r0,#5]            ;2885
0001ea  2f03              CMP      r7,#3                 ;2886
0001ec  d023              BEQ      |L17.566|
0001ee  9902              LDR      r1,[sp,#8]            ;2887
0001f0  f5b13f80          CMP      r1,#0x10000           ;2887
0001f4  d201              BCS      |L17.506|
0001f6  2104              MOVS     r1,#4                 ;2887
0001f8  e000              B        |L17.508|
                  |L17.506|
0001fa  2106              MOVS     r1,#6                 ;2887
                  |L17.508|
0001fc  7101              STRB     r1,[r0,#4]            ;2887
0001fe  213f              MOVS     r1,#0x3f              ;2890
000200  7201              STRB     r1,[r0,#8]            ;2890
000202  7242              STRB     r2,[r0,#9]            ;2890
000204  7282              STRB     r2,[r0,#0xa]          ;2890
000206  72c2              STRB     r2,[r0,#0xb]          ;2890
000208  9902              LDR      r1,[sp,#8]            ;2891
00020a  7301              STRB     r1,[r0,#0xc]          ;2891
00020c  0a0a              LSRS     r2,r1,#8              ;2891
00020e  7342              STRB     r2,[r0,#0xd]          ;2891
000210  0c0a              LSRS     r2,r1,#16             ;2891
000212  7382              STRB     r2,[r0,#0xe]          ;2891
000214  0e09              LSRS     r1,r1,#24             ;2891
000216  73c1              STRB     r1,[r0,#0xf]          ;2891
000218  2155              MOVS     r1,#0x55              ;2892
00021a  f8801040          STRB     r1,[r0,#0x40]         ;2892
00021e  21aa              MOVS     r1,#0xaa              ;2892
000220  f8801041          STRB     r1,[r0,#0x41]         ;2892
000224  e9dd1003          LDRD     r1,r0,[sp,#0xc]       ;2893
000228  2301              MOVS     r3,#1                 ;2893
00022a  2200              MOVS     r2,#0                 ;2893
00022c  f7fffffe          BL       disk_write
000230  2800              CMP      r0,#0                 ;2893
000232  d16e              BNE      |L17.786|
000234  e001              B        |L17.570|
                  |L17.566|
000236  210c              MOVS     r1,#0xc               ;2889
000238  e7e0              B        |L17.508|
                  |L17.570|
00023a  20f8              MOVS     r0,#0xf8              ;2895
                  |L17.572|
00023c  9005              STR      r0,[sp,#0x14]         ;2902
00023e  f1060430          ADD      r4,r6,#0x30           ;2901
000242  8972              LDRH     r2,[r6,#0xa]          ;2902
000244  2100              MOVS     r1,#0                 ;2902
000246  4620              MOV      r0,r4                 ;2902
000248  f7fffffe          BL       mem_set
00024c  20eb              MOVS     r0,#0xeb              ;2903
00024e  7020              STRB     r0,[r4,#0]            ;2903
000250  20fe              MOVS     r0,#0xfe              ;2903
000252  7060              STRB     r0,[r4,#1]            ;2903
000254  2090              MOVS     r0,#0x90              ;2903
000256  70a0              STRB     r0,[r4,#2]            ;2903
000258  2100              MOVS     r1,#0                 ;2903
00025a  70e1              STRB     r1,[r4,#3]            ;2903
00025c  7ab0              LDRB     r0,[r6,#0xa]          ;2904
00025e  72e0              STRB     r0,[r4,#0xb]          ;2904
000260  8970              LDRH     r0,[r6,#0xa]          ;2904
000262  0a00              LSRS     r0,r0,#8              ;2904
000264  7320              STRB     r0,[r4,#0xc]          ;2904
000266  9806              LDR      r0,[sp,#0x18]         ;2905
000268  7360              STRB     r0,[r4,#0xd]          ;2905
00026a  f884b00e          STRB     r11,[r4,#0xe]         ;2906
00026e  ea4f201b          LSR      r0,r11,#8             ;2906
000272  73e0              STRB     r0,[r4,#0xf]          ;2906
000274  2001              MOVS     r0,#1                 ;2907
000276  7420              STRB     r0,[r4,#0x10]         ;2907
000278  8970              LDRH     r0,[r6,#0xa]          ;2908
00027a  0940              LSRS     r0,r0,#5              ;2908
00027c  fb00f00a          MUL      r0,r0,r10             ;2908
000280  7460              STRB     r0,[r4,#0x11]         ;2908
000282  8970              LDRH     r0,[r6,#0xa]          ;2908
000284  0940              LSRS     r0,r0,#5              ;2908
000286  fb00f00a          MUL      r0,r0,r10             ;2908
00028a  0a00              LSRS     r0,r0,#8              ;2908
00028c  74a0              STRB     r0,[r4,#0x12]         ;2908
00028e  9802              LDR      r0,[sp,#8]            ;2909
000290  f5b03f80          CMP      r0,#0x10000           ;2909
000294  d203              BCS      |L17.670|
000296  74e0              STRB     r0,[r4,#0x13]         ;2910
000298  0a00              LSRS     r0,r0,#8              ;2910
00029a  7520              STRB     r0,[r4,#0x14]         ;2910
00029c  e008              B        |L17.688|
                  |L17.670|
00029e  f8040f20          STRB     r0,[r4,#0x20]!        ;2912
0002a2  0a02              LSRS     r2,r0,#8              ;2912
0002a4  7062              STRB     r2,[r4,#1]            ;2912
0002a6  0c02              LSRS     r2,r0,#16             ;2912
0002a8  70a2              STRB     r2,[r4,#2]            ;2912
0002aa  0e00              LSRS     r0,r0,#24             ;2912
0002ac  70e0              STRB     r0,[r4,#3]            ;2912
0002ae  3c20              SUBS     r4,r4,#0x20           ;2912
                  |L17.688|
0002b0  9805              LDR      r0,[sp,#0x14]         ;2914
0002b2  7560              STRB     r0,[r4,#0x15]         ;2914
0002b4  203f              MOVS     r0,#0x3f              ;2915
0002b6  7620              STRB     r0,[r4,#0x18]         ;2915
0002b8  468b              MOV      r11,r1                ;2915
0002ba  7661              STRB     r1,[r4,#0x19]         ;2915
0002bc  21ff              MOVS     r1,#0xff              ;2916
0002be  76a1              STRB     r1,[r4,#0x1a]         ;2916
0002c0  f884b01b          STRB     r11,[r4,#0x1b]        ;2916
0002c4  f884801c          STRB     r8,[r4,#0x1c]         ;2917
0002c8  ea4f2018          LSR      r0,r8,#8              ;2917
0002cc  7760              STRB     r0,[r4,#0x1d]         ;2917
0002ce  ea4f4018          LSR      r0,r8,#16             ;2917
0002d2  77a0              STRB     r0,[r4,#0x1e]         ;2917
0002d4  ea4f6018          LSR      r0,r8,#24             ;2917
0002d8  77e0              STRB     r0,[r4,#0x1f]         ;2917
0002da  f7fffffe          BL       get_fattime
0002de  2129              MOVS     r1,#0x29              ;2923
0002e0  9001              STR      r0,[sp,#4]            ;2919
0002e2  2f03              CMP      r7,#3                 ;2919
0002e4  d016              BEQ      |L17.788|
0002e6  3416              ADDS     r4,r4,#0x16           ;2919
0002e8  0a02              LSRS     r2,r0,#8              ;2920
0002ea  7460              STRB     r0,[r4,#0x11]         ;2920
0002ec  74a2              STRB     r2,[r4,#0x12]         ;2920
0002ee  0c02              LSRS     r2,r0,#16             ;2920
0002f0  74e2              STRB     r2,[r4,#0x13]         ;2920
0002f2  0e00              LSRS     r0,r0,#24             ;2920
0002f4  7520              STRB     r0,[r4,#0x14]         ;2920
0002f6  f8849000          STRB     r9,[r4,#0]            ;2921
0002fa  ea4f2019          LSR      r0,r9,#8              ;2921
0002fe  7060              STRB     r0,[r4,#1]            ;2921
000300  2080              MOVS     r0,#0x80              ;2922
000302  73a0              STRB     r0,[r4,#0xe]          ;2922
000304  7421              STRB     r1,[r4,#0x10]         ;2923
000306  3c16              SUBS     r4,r4,#0x16           ;2923
000308  2213              MOVS     r2,#0x13              ;2924
00030a  a145              ADR      r1,|L17.1056|
00030c  f104002b          ADD      r0,r4,#0x2b           ;2924
000310  e02d              B        |L17.878|
                  |L17.786|
000312  e0c4              B        |L17.1182|
                  |L17.788|
000314  3425              ADDS     r4,r4,#0x25           ;2924
000316  0a02              LSRS     r2,r0,#8              ;2926
000318  77a0              STRB     r0,[r4,#0x1e]         ;2926
00031a  77e2              STRB     r2,[r4,#0x1f]         ;2926
00031c  0c02              LSRS     r2,r0,#16             ;2926
00031e  f8842020          STRB     r2,[r4,#0x20]         ;2926
000322  0e00              LSRS     r0,r0,#24             ;2926
000324  f8840021          STRB     r0,[r4,#0x21]         ;2926
000328  f8049c01          STRB     r9,[r4,#-1]           ;2927
00032c  ea4f2019          LSR      r0,r9,#8              ;2927
000330  7020              STRB     r0,[r4,#0]            ;2927
000332  ea4f4019          LSR      r0,r9,#16             ;2927
000336  7060              STRB     r0,[r4,#1]            ;2927
000338  ea4f6019          LSR      r0,r9,#24             ;2927
00033c  70a0              STRB     r0,[r4,#2]            ;2927
00033e  2002              MOVS     r0,#2                 ;2928
000340  71e0              STRB     r0,[r4,#7]            ;2928
000342  f884b008          STRB     r11,[r4,#8]           ;2928
000346  f884b009          STRB     r11,[r4,#9]           ;2928
00034a  f884b00a          STRB     r11,[r4,#0xa]         ;2928
00034e  2201              MOVS     r2,#1                 ;2929
000350  72e2              STRB     r2,[r4,#0xb]          ;2929
000352  f884b00c          STRB     r11,[r4,#0xc]         ;2929
000356  2206              MOVS     r2,#6                 ;2930
000358  7362              STRB     r2,[r4,#0xd]          ;2930
00035a  f884b00e          STRB     r11,[r4,#0xe]         ;2930
00035e  2080              MOVS     r0,#0x80              ;2931
000360  76e0              STRB     r0,[r4,#0x1b]         ;2931
000362  7761              STRB     r1,[r4,#0x1d]         ;2932
000364  3c25              SUBS     r4,r4,#0x25           ;2932
000366  2213              MOVS     r2,#0x13              ;2933
000368  a132              ADR      r1,|L17.1076|
00036a  f1040047          ADD      r0,r4,#0x47           ;2933
                  |L17.878|
00036e  f7fffffe          BL       mem_cpy
000372  2055              MOVS     r0,#0x55              ;2935
000374  f88401fe          STRB     r0,[r4,#0x1fe]        ;2935
000378  20aa              MOVS     r0,#0xaa              ;2935
00037a  f88401ff          STRB     r0,[r4,#0x1ff]        ;2935
00037e  8970              LDRH     r0,[r6,#0xa]          ;2936
000380  f5b07f00          CMP      r0,#0x200             ;2936
000384  d906              BLS      |L17.916|
000386  1ea2              SUBS     r2,r4,#2              ;2937
000388  2155              MOVS     r1,#0x55              ;2937
00038a  5481              STRB     r1,[r0,r2]            ;2937
00038c  20aa              MOVS     r0,#0xaa              ;2937
00038e  8972              LDRH     r2,[r6,#0xa]          ;2937
000390  1e61              SUBS     r1,r4,#1              ;2937
000392  5450              STRB     r0,[r2,r1]            ;2937
                  |L17.916|
000394  2301              MOVS     r3,#1                 ;2939
000396  4642              MOV      r2,r8                 ;2939
000398  4621              MOV      r1,r4                 ;2939
00039a  9804              LDR      r0,[sp,#0x10]         ;2939
00039c  f7fffffe          BL       disk_write
0003a0  2800              CMP      r0,#0                 ;2939
0003a2  d17c              BNE      |L17.1182|
0003a4  2f03              CMP      r7,#3                 ;2941
0003a6  d106              BNE      |L17.950|
0003a8  2301              MOVS     r3,#1                 ;2942
0003aa  f1080206          ADD      r2,r8,#6              ;2942
0003ae  4621              MOV      r1,r4                 ;2942
0003b0  9804              LDR      r0,[sp,#0x10]         ;2942
0003b2  f7fffffe          BL       disk_write
                  |L17.950|
0003b6  f04f0b00          MOV      r11,#0                ;2945
                  |L17.954|
0003ba  8972              LDRH     r2,[r6,#0xa]          ;2946
0003bc  2100              MOVS     r1,#0                 ;2946
0003be  4620              MOV      r0,r4                 ;2946
0003c0  f7fffffe          BL       mem_set
0003c4  2f03              CMP      r7,#3                 ;2947
0003c6  d013              BEQ      |L17.1008|
0003c8  2f01              CMP      r7,#1                 ;2948
0003ca  d00f              BEQ      |L17.1004|
0003cc  f06f00ff          MVN      r0,#0xff              ;2948
                  |L17.976|
0003d0  9905              LDR      r1,[sp,#0x14]         ;2949
0003d2  4308              ORRS     r0,r0,r1              ;2949
0003d4  9001              STR      r0,[sp,#4]            ;2950
0003d6  7020              STRB     r0,[r4,#0]            ;2950
0003d8  9801              LDR      r0,[sp,#4]            ;2950
0003da  0a00              LSRS     r0,r0,#8              ;2950
0003dc  7060              STRB     r0,[r4,#1]            ;2950
0003de  9801              LDR      r0,[sp,#4]            ;2950
0003e0  0c00              LSRS     r0,r0,#16             ;2950
0003e2  70a0              STRB     r0,[r4,#2]            ;2950
0003e4  9801              LDR      r0,[sp,#4]            ;2950
0003e6  0e00              LSRS     r0,r0,#24             ;2950
0003e8  70e0              STRB     r0,[r4,#3]            ;2950
0003ea  e010              B        |L17.1038|
                  |L17.1004|
0003ec  4816              LDR      r0,|L17.1096|
0003ee  e7ef              B        |L17.976|
                  |L17.1008|
0003f0  20f8              MOVS     r0,#0xf8              ;2952
0003f2  7020              STRB     r0,[r4,#0]            ;2952
0003f4  20ff              MOVS     r0,#0xff              ;2952
0003f6  7060              STRB     r0,[r4,#1]            ;2952
0003f8  70a0              STRB     r0,[r4,#2]            ;2952
0003fa  70e0              STRB     r0,[r4,#3]            ;2952
0003fc  7120              STRB     r0,[r4,#4]            ;2953
0003fe  7160              STRB     r0,[r4,#5]            ;2953
000400  71a0              STRB     r0,[r4,#6]            ;2953
000402  71e0              STRB     r0,[r4,#7]            ;2953
000404  7220              STRB     r0,[r4,#8]            ;2954
000406  7260              STRB     r0,[r4,#9]            ;2954
000408  72a0              STRB     r0,[r4,#0xa]          ;2954
00040a  200f              MOVS     r0,#0xf               ;2954
00040c  72e0              STRB     r0,[r4,#0xb]          ;2954
                  |L17.1038|
00040e  462a              MOV      r2,r5                 ;2956
000410  1c6d              ADDS     r5,r5,#1              ;2956
000412  e01b              B        |L17.1100|
                  |L17.1044|
                          DCD      ||.data||+0x4
                  |L17.1048|
                          DCD      ||.constdata||+0x80
                  |L17.1052|
                          DCD      0x00fb0400
                  |L17.1056|
000420  4e4f204e          DCB      "NO NAME    FAT     ",0
000424  414d4520
000428  20202046
00042c  41542020
000430  20202000
                  |L17.1076|
000434  4e4f204e          DCB      "NO NAME    FAT32   ",0
000438  414d4520
00043c  20202046
000440  41543332
000444  20202000
                  |L17.1096|
                          DCD      0x00ffff00
                  |L17.1100|
00044c  2301              MOVS     r3,#1                 ;2956
00044e  4621              MOV      r1,r4                 ;2956
000450  9804              LDR      r0,[sp,#0x10]         ;2956
000452  f7fffffe          BL       disk_write
000456  bb10              CBNZ     r0,|L17.1182|
000458  8972              LDRH     r2,[r6,#0xa]          ;2958
00045a  2100              MOVS     r1,#0                 ;2958
00045c  4620              MOV      r0,r4                 ;2958
00045e  f7fffffe          BL       mem_set
000462  2001              MOVS     r0,#1                 ;2959
000464  e009              B        |L17.1146|
                  |L17.1126|
000466  462a              MOV      r2,r5                 ;2960
000468  1c6d              ADDS     r5,r5,#1              ;2960
00046a  2301              MOVS     r3,#1                 ;2960
00046c  4621              MOV      r1,r4                 ;2960
00046e  9804              LDR      r0,[sp,#0x10]         ;2960
000470  f7fffffe          BL       disk_write
000474  b998              CBNZ     r0,|L17.1182|
000476  9801              LDR      r0,[sp,#4]            ;2959
000478  1c40              ADDS     r0,r0,#1              ;2959
                  |L17.1146|
00047a  9001              STR      r0,[sp,#4]            ;2959
00047c  4548              CMP      r0,r9                 ;2959
00047e  d3f2              BCC      |L17.1126|
000480  f10b0001          ADD      r0,r11,#1             ;2945
000484  f0100bff          ANDS     r11,r0,#0xff          ;2945
000488  d097              BEQ      |L17.954|
00048a  2f03              CMP      r7,#3                 ;2966
00048c  d00c              BEQ      |L17.1192|
00048e  4650              MOV      r0,r10                ;2966
                  |L17.1168|
000490  b2c6              UXTB     r6,r0                 ;2966
                  |L17.1170|
000492  462a              MOV      r2,r5                 ;2968
000494  1c6d              ADDS     r5,r5,#1              ;2968
000496  2301              MOVS     r3,#1                 ;2968
000498  4621              MOV      r1,r4                 ;2968
00049a  9804              LDR      r0,[sp,#0x10]         ;2968
00049c  e000              B        |L17.1184|
                  |L17.1182|
00049e  e040              B        |L17.1314|
                  |L17.1184|
0004a0  f7fffffe          BL       disk_write
0004a4  bbe8              CBNZ     r0,|L17.1314|
0004a6  e001              B        |L17.1196|
                  |L17.1192|
0004a8  9806              LDR      r0,[sp,#0x18]         ;2966
0004aa  e7f1              B        |L17.1168|
                  |L17.1196|
0004ac  1e76              SUBS     r6,r6,#1              ;2970
0004ae  f01606ff          ANDS     r6,r6,#0xff           ;2970
0004b2  d1ee              BNE      |L17.1170|
0004b4  2f03              CMP      r7,#3                 ;2973
0004b6  d13b              BNE      |L17.1328|
0004b8  2055              MOVS     r0,#0x55              ;2974
0004ba  f88401fe          STRB     r0,[r4,#0x1fe]        ;2974
0004be  20aa              MOVS     r0,#0xaa              ;2974
0004c0  f88401ff          STRB     r0,[r4,#0x1ff]        ;2974
0004c4  2052              MOVS     r0,#0x52              ;2975
0004c6  7020              STRB     r0,[r4,#0]            ;2975
0004c8  7060              STRB     r0,[r4,#1]            ;2975
0004ca  2261              MOVS     r2,#0x61              ;2975
0004cc  70a2              STRB     r2,[r4,#2]            ;2975
0004ce  2141              MOVS     r1,#0x41              ;2975
0004d0  70e1              STRB     r1,[r4,#3]            ;2975
0004d2  2072              MOVS     r0,#0x72              ;2976
0004d4  f88401e4          STRB     r0,[r4,#0x1e4]        ;2976
0004d8  f88401e5          STRB     r0,[r4,#0x1e5]        ;2976
0004dc  f88411e6          STRB     r1,[r4,#0x1e6]        ;2976
0004e0  f88421e7          STRB     r2,[r4,#0x1e7]        ;2976
0004e4  9800              LDR      r0,[sp,#0]            ;2977
0004e6  2301              MOVS     r3,#1                 ;2979
0004e8  1e40              SUBS     r0,r0,#1              ;2977
0004ea  f88401e8          STRB     r0,[r4,#0x1e8]        ;2977
0004ee  0a01              LSRS     r1,r0,#8              ;2977
0004f0  f88411e9          STRB     r1,[r4,#0x1e9]        ;2977
0004f4  0c01              LSRS     r1,r0,#16             ;2977
0004f6  f88411ea          STRB     r1,[r4,#0x1ea]        ;2977
0004fa  0e00              LSRS     r0,r0,#24             ;2977
0004fc  f88401eb          STRB     r0,[r4,#0x1eb]        ;2977
000500  20ff              MOVS     r0,#0xff              ;2978
000502  f88401ec          STRB     r0,[r4,#0x1ec]        ;2978
000506  f88401ed          STRB     r0,[r4,#0x1ed]        ;2978
00050a  f88401ee          STRB     r0,[r4,#0x1ee]        ;2978
00050e  f88401ef          STRB     r0,[r4,#0x1ef]        ;2978
000512  f1080201          ADD      r2,r8,#1              ;2979
000516  4621              MOV      r1,r4                 ;2979
000518  9804              LDR      r0,[sp,#0x10]         ;2979
00051a  f7fffffe          BL       disk_write
00051e  2301              MOVS     r3,#1                 ;2980
000520  e000              B        |L17.1316|
                  |L17.1314|
000522  e00d              B        |L17.1344|
                  |L17.1316|
000524  f1080207          ADD      r2,r8,#7              ;2980
000528  4621              MOV      r1,r4                 ;2980
00052a  9804              LDR      r0,[sp,#0x10]         ;2980
00052c  f7fffffe          BL       disk_write
                  |L17.1328|
000530  2200              MOVS     r2,#0                 ;2983
000532  4611              MOV      r1,r2                 ;2983
000534  9804              LDR      r0,[sp,#0x10]         ;2983
000536  f7fffffe          BL       disk_ioctl
00053a  2800              CMP      r0,#0                 ;2983
00053c  f43fad77          BEQ      |L17.46|
                  |L17.1344|
000540  2001              MOVS     r0,#1                 ;2983
000542  e565              B        |L17.16|
;;;2985   
                          ENDP


                          AREA ||i.f_mount||, CODE, READONLY, ALIGN=2

                  f_mount PROC
;;;1627   
;;;1628   FRESULT f_mount (
000000  b108              CBZ      r0,|L18.6|
;;;1629   	BYTE vol,		/* Logical drive number to be mounted/unmounted */
;;;1630   	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
;;;1631   )
;;;1632   {
;;;1633   	FATFS *rfs;
;;;1634   
;;;1635   
;;;1636   	if (vol >= _DRIVES)				/* Check if the drive number is valid */
;;;1637   		return FR_INVALID_DRIVE;
000002  200b              MOVS     r0,#0xb
;;;1638   	rfs = FatFs[vol];				/* Get current fs object */
;;;1639   
;;;1640   	if (rfs) {
;;;1641   #if _FS_REENTRANT					/* Discard sync object of the current volume */
;;;1642   		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
;;;1643   #endif
;;;1644   		rfs->fs_type = 0;			/* Clear old fs object */
;;;1645   	}
;;;1646   
;;;1647   	if (fs) {
;;;1648   		fs->fs_type = 0;			/* Clear new fs object */
;;;1649   #if _FS_REENTRANT					/* Create sync object for the new volume */
;;;1650   		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
;;;1651   #endif
;;;1652   	}
;;;1653   	FatFs[vol] = fs;				/* Register new fs object */
;;;1654   
;;;1655   	return FR_OK;
;;;1656   }
000004  4770              BX       lr
                  |L18.6|
000006  4b05              LDR      r3,|L18.28|
000008  2200              MOVS     r2,#0                 ;1638
00000a  6818              LDR      r0,[r3,#0]            ;1640
00000c  b100              CBZ      r0,|L18.16|
00000e  7002              STRB     r2,[r0,#0]            ;1644
                  |L18.16|
000010  b101              CBZ      r1,|L18.20|
000012  700a              STRB     r2,[r1,#0]            ;1648
                  |L18.20|
000014  2000              MOVS     r0,#0                 ;1655
000016  6019              STR      r1,[r3,#0]            ;1655
000018  4770              BX       lr
;;;1657   
                          ENDP

00001a  0000              DCW      0x0000
                  |L18.28|
                          DCD      ||.data||+0x4

                          AREA ||i.f_open||, CODE, READONLY, ALIGN=1

                  f_open PROC
;;;1664   
;;;1665   FRESULT f_open (
000000  e92d47f7          PUSH     {r0-r2,r4-r10,lr}
;;;1666   	FIL *fp,			/* Pointer to the blank file object */
;;;1667   	const XCHAR *path,	/* Pointer to the file name */
;;;1668   	BYTE mode			/* Access mode and file open mode flags */
;;;1669   )
;;;1670   {
000004  b08b              SUB      sp,sp,#0x2c
;;;1671   	FRESULT res;
;;;1672   	DIR dj;
;;;1673   	NAMEBUF(sfn, lfn);
;;;1674   	BYTE *dir;
;;;1675   
;;;1676   
;;;1677   	fp->fs = NULL;		/* Clear file object */
000006  f04f0800          MOV      r8,#0
00000a  4606              MOV      r6,r0                 ;1670
;;;1678   #if !_FS_READONLY
;;;1679   	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
00000c  f002051f          AND      r5,r2,#0x1f
;;;1680   	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
000010  f8c08000          STR      r8,[r0,#0]
000014  f005021e          AND      r2,r5,#0x1e
000018  4669              MOV      r1,sp
00001a  a80c              ADD      r0,sp,#0x30
00001c  f7fffffe          BL       chk_mounted
;;;1681   #else
;;;1682   	mode &= FA_READ;
;;;1683   	res = chk_mounted(&path, &dj.fs, 0);
;;;1684   #endif
;;;1685   	if (res != FR_OK) LEAVE_FF(dj.fs, res);
000020  2800              CMP      r0,#0
000022  d11b              BNE      |L19.92|
;;;1686   	INITBUF(dj, sfn, lfn);
000024  a807              ADD      r0,sp,#0x1c
;;;1687   	res = follow_path(&dj, path);	/* Follow the file path */
000026  9006              STR      r0,[sp,#0x18]
000028  4668              MOV      r0,sp
00002a  990c              LDR      r1,[sp,#0x30]
00002c  f7fffffe          BL       follow_path
;;;1688   
;;;1689   #if !_FS_READONLY
;;;1690   	/* Create or Open a file */
;;;1691   	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
000030  f0150f1c          TST      r5,#0x1c
000034  d05d              BEQ      |L19.242|
;;;1692   		DWORD ps, cl;
;;;1693   
;;;1694   		if (res != FR_OK) {			/* No file, create new */
;;;1695   			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
;;;1696   				res = dir_register(&dj);
;;;1697   			if (res != FR_OK) LEAVE_FF(dj.fs, res);
;;;1698   			mode |= FA_CREATE_ALWAYS;
;;;1699   			dir = dj.dir;			/* Created entry (SFN entry) */
;;;1700   		}
;;;1701   		else {						/* Any object is already existing */
;;;1702   			if (mode & FA_CREATE_NEW)			/* Cannot create new */
;;;1703   				LEAVE_FF(dj.fs, FR_EXIST);
;;;1704   			dir = dj.dir;
;;;1705   			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
;;;1706   				LEAVE_FF(dj.fs, FR_DENIED);
;;;1707   			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
;;;1708   				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
;;;1709   				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
;;;1710   				ST_WORD(dir+DIR_FstClusLO, 0);
;;;1711   				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
;;;1712   				dj.fs->wflag = 1;
000036  f04f0901          MOV      r9,#1
00003a  b160              CBZ      r0,|L19.86|
00003c  2804              CMP      r0,#4                 ;1695
00003e  d10d              BNE      |L19.92|
000040  4668              MOV      r0,sp                 ;1696
000042  f7fffffe          BL       dir_register
000046  2800              CMP      r0,#0                 ;1696
000048  d108              BNE      |L19.92|
00004a  f0450508          ORR      r5,r5,#8              ;1698
;;;1713   				ps = dj.fs->winsect;			/* Remove the cluster chain */
;;;1714   				if (cl) {
;;;1715   					res = remove_chain(dj.fs, cl);
;;;1716   					if (res) LEAVE_FF(dj.fs, res);
;;;1717   					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
;;;1718   				}
;;;1719   				res = move_window(dj.fs, ps);
;;;1720   				if (res != FR_OK) LEAVE_FF(dj.fs, res);
;;;1721   			}
;;;1722   		}
;;;1723   		if (mode & FA_CREATE_ALWAYS) {
00004e  9c05              LDR      r4,[sp,#0x14]
000050  0728              LSLS     r0,r5,#28
000052  d438              BMI      |L19.198|
000054  e05c              B        |L19.272|
                  |L19.86|
000056  0768              LSLS     r0,r5,#29             ;1702
000058  d503              BPL      |L19.98|
00005a  2008              MOVS     r0,#8                 ;1703
                  |L19.92|
;;;1724   			dir[DIR_Attr] = 0;					/* Reset attribute */
;;;1725   			ps = get_fattime();
;;;1726   			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
;;;1727   			dj.fs->wflag = 1;
;;;1728   			mode |= FA__WRITTEN;				/* Set file changed flag */
;;;1729   		}
;;;1730   	}
;;;1731   	/* Open an existing file */
;;;1732   	else {
;;;1733   #endif /* !_FS_READONLY */
;;;1734   		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
;;;1735   		dir = dj.dir;
;;;1736   		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
;;;1737   			LEAVE_FF(dj.fs, FR_NO_FILE);
;;;1738   #if !_FS_READONLY
;;;1739   		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
;;;1740   			LEAVE_FF(dj.fs, FR_DENIED);
;;;1741   	}
;;;1742   	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
;;;1743   	fp->dir_ptr = dj.dir;
;;;1744   #endif
;;;1745   	fp->flag = mode;					/* File access mode */
;;;1746   	fp->org_clust =						/* File start cluster */
;;;1747   		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
;;;1748   	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
;;;1749   	fp->fptr = 0; fp->csect = 255;		/* File pointer */
;;;1750   	fp->dsect = 0;
;;;1751   	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
;;;1752   
;;;1753   	LEAVE_FF(dj.fs, FR_OK);
;;;1754   }
00005c  b00e              ADD      sp,sp,#0x38
00005e  e8bd87f0          POP      {r4-r10,pc}
                  |L19.98|
000062  9c05              LDR      r4,[sp,#0x14]         ;1705
000064  b3f4              CBZ      r4,|L19.228|
000066  7ae0              LDRB     r0,[r4,#0xb]          ;1705
000068  f0100f11          TST      r0,#0x11              ;1705
00006c  d14e              BNE      |L19.268|
00006e  0728              LSLS     r0,r5,#28             ;1707
000070  d54e              BPL      |L19.272|
000072  8aa0              LDRH     r0,[r4,#0x14]         ;1708
000074  8b67              LDRH     r7,[r4,#0x1a]         ;1708
000076  f8848014          STRB     r8,[r4,#0x14]         ;1709
00007a  f8848015          STRB     r8,[r4,#0x15]         ;1709
00007e  f884801a          STRB     r8,[r4,#0x1a]         ;1710
000082  f884801b          STRB     r8,[r4,#0x1b]         ;1710
000086  f884801c          STRB     r8,[r4,#0x1c]         ;1711
00008a  f884801d          STRB     r8,[r4,#0x1d]         ;1711
00008e  f884801e          STRB     r8,[r4,#0x1e]         ;1711
000092  f884801f          STRB     r8,[r4,#0x1f]         ;1711
000096  9900              LDR      r1,[sp,#0]            ;1712
000098  f360471f          BFI      r7,r0,#16,#16         ;1708
00009c  f8819004          STRB     r9,[r1,#4]            ;1712
0000a0  9800              LDR      r0,[sp,#0]            ;1713
0000a2  f8d0a02c          LDR      r10,[r0,#0x2c]        ;1714
0000a6  b147              CBZ      r7,|L19.186|
0000a8  4639              MOV      r1,r7                 ;1715
0000aa  9800              LDR      r0,[sp,#0]            ;1715
0000ac  f7fffffe          BL       remove_chain
0000b0  2800              CMP      r0,#0                 ;1716
0000b2  d1d3              BNE      |L19.92|
0000b4  9800              LDR      r0,[sp,#0]            ;1717
0000b6  1e7f              SUBS     r7,r7,#1              ;1717
0000b8  60c7              STR      r7,[r0,#0xc]          ;1717
                  |L19.186|
0000ba  4651              MOV      r1,r10                ;1719
0000bc  9800              LDR      r0,[sp,#0]            ;1719
0000be  f7fffffe          BL       move_window
0000c2  2800              CMP      r0,#0                 ;1720
0000c4  d1ca              BNE      |L19.92|
                  |L19.198|
0000c6  f884800b          STRB     r8,[r4,#0xb]          ;1724
0000ca  f7fffffe          BL       get_fattime
0000ce  73a0              STRB     r0,[r4,#0xe]          ;1726
0000d0  ea4f2110          LSR      r1,r0,#8              ;1726
0000d4  73e1              STRB     r1,[r4,#0xf]          ;1726
0000d6  ea4f4110          LSR      r1,r0,#16             ;1726
0000da  7421              STRB     r1,[r4,#0x10]         ;1726
0000dc  ea4f6010          LSR      r0,r0,#24             ;1726
0000e0  7460              STRB     r0,[r4,#0x11]         ;1726
0000e2  e000              B        |L19.230|
                  |L19.228|
0000e4  e012              B        |L19.268|
                  |L19.230|
0000e6  9900              LDR      r1,[sp,#0]            ;1727
0000e8  f0450520          ORR      r5,r5,#0x20           ;1728
0000ec  f8819004          STRB     r9,[r1,#4]            ;1727
0000f0  e00e              B        |L19.272|
                  |L19.242|
0000f2  2800              CMP      r0,#0                 ;1734
0000f4  d1b2              BNE      |L19.92|
0000f6  9c05              LDR      r4,[sp,#0x14]         ;1736
0000f8  b114              CBZ      r4,|L19.256|
0000fa  7ae0              LDRB     r0,[r4,#0xb]          ;1736
0000fc  06c1              LSLS     r1,r0,#27             ;1736
0000fe  d501              BPL      |L19.260|
                  |L19.256|
000100  2004              MOVS     r0,#4                 ;1737
000102  e7ab              B        |L19.92|
                  |L19.260|
000104  07a9              LSLS     r1,r5,#30             ;1739
000106  d503              BPL      |L19.272|
000108  07c0              LSLS     r0,r0,#31             ;1739
00010a  d001              BEQ      |L19.272|
                  |L19.268|
00010c  2007              MOVS     r0,#7                 ;1740
00010e  e7a5              B        |L19.92|
                  |L19.272|
000110  9800              LDR      r0,[sp,#0]            ;1742
000112  6ac0              LDR      r0,[r0,#0x2c]         ;1742
000114  61f0              STR      r0,[r6,#0x1c]         ;1743
000116  9805              LDR      r0,[sp,#0x14]         ;1743
000118  6230              STR      r0,[r6,#0x20]         ;1745
00011a  71b5              STRB     r5,[r6,#6]            ;1745
00011c  8aa1              LDRH     r1,[r4,#0x14]         ;1746
00011e  8b60              LDRH     r0,[r4,#0x1a]         ;1746
000120  f361401f          BFI      r0,r1,#16,#16         ;1746
000124  6130              STR      r0,[r6,#0x10]         ;1748
000126  7f20              LDRB     r0,[r4,#0x1c]         ;1748
000128  f8d4101d          LDR      r1,[r4,#0x1d]         ;1748
00012c  ea402001          ORR      r0,r0,r1,LSL #8       ;1748
000130  e9c68002          STRD     r8,r0,[r6,#8]         ;1749
000134  21ff              MOVS     r1,#0xff              ;1749
000136  71f1              STRB     r1,[r6,#7]            ;1749
000138  f8c68018          STR      r8,[r6,#0x18]         ;1751
00013c  9800              LDR      r0,[sp,#0]            ;1751
00013e  6030              STR      r0,[r6,#0]            ;1751
000140  9800              LDR      r0,[sp,#0]            ;1751
000142  88c0              LDRH     r0,[r0,#6]            ;1751
000144  80b0              STRH     r0,[r6,#4]            ;1751
000146  2000              MOVS     r0,#0                 ;1753
000148  e788              B        |L19.92|
;;;1755   
                          ENDP


                          AREA ||i.f_opendir||, CODE, READONLY, ALIGN=1

                  f_opendir PROC
;;;2200   
;;;2201   FRESULT f_opendir (
000000  b513              PUSH     {r0,r1,r4,lr}
;;;2202   	DIR *dj,			/* Pointer to directory object to create */
;;;2203   	const XCHAR *path	/* Pointer to the directory path */
;;;2204   )
;;;2205   {
000002  b084              SUB      sp,sp,#0x10
000004  4604              MOV      r4,r0
;;;2206   	FRESULT res;
;;;2207   	NAMEBUF(sfn, lfn);
;;;2208   	BYTE *dir;
;;;2209   
;;;2210   	res = chk_mounted(&path, &dj->fs, 0);
000006  4601              MOV      r1,r0
000008  2200              MOVS     r2,#0
00000a  a805              ADD      r0,sp,#0x14
00000c  f7fffffe          BL       chk_mounted
;;;2211   	if (res == FR_OK) {
000010  2800              CMP      r0,#0
000012  d11a              BNE      |L20.74|
;;;2212   		INITBUF((*dj), sfn, lfn);
000014  f8c4d018          STR      sp,[r4,#0x18]
;;;2213   		res = follow_path(dj, path);			/* Follow the path to the directory */
000018  4620              MOV      r0,r4
00001a  9905              LDR      r1,[sp,#0x14]
00001c  f7fffffe          BL       follow_path
;;;2214   		if (res == FR_OK) {						/* Follow completed */
000020  b980              CBNZ     r0,|L20.68|
;;;2215   			dir = dj->dir;
;;;2216   			if (dir) {							/* It is not the root dir */
000022  6960              LDR      r0,[r4,#0x14]
000024  b138              CBZ      r0,|L20.54|
;;;2217   				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
000026  7ac1              LDRB     r1,[r0,#0xb]
000028  06c9              LSLS     r1,r1,#27
00002a  d50d              BPL      |L20.72|
;;;2218   					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
00002c  8a81              LDRH     r1,[r0,#0x14]
00002e  8b40              LDRH     r0,[r0,#0x1a]
000030  f361401f          BFI      r0,r1,#16,#16
000034  60a0              STR      r0,[r4,#8]
                  |L20.54|
;;;2219   				} else {						/* The object is not a directory */
;;;2220   					res = FR_NO_PATH;
;;;2221   				}
;;;2222   			}
;;;2223   			if (res == FR_OK) {
;;;2224   				dj->id = dj->fs->id;
000036  6820              LDR      r0,[r4,#0]
;;;2225   				res = dir_seek(dj, 0);			/* Rewind dir */
000038  2100              MOVS     r1,#0
00003a  88c0              LDRH     r0,[r0,#6]            ;2224
00003c  80a0              STRH     r0,[r4,#4]            ;2224
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       dir_seek
                  |L20.68|
;;;2226   			}
;;;2227   		}
;;;2228   		if (res == FR_NO_FILE) res = FR_NO_PATH;
000044  2804              CMP      r0,#4
000046  d100              BNE      |L20.74|
                  |L20.72|
000048  2005              MOVS     r0,#5
                  |L20.74|
;;;2229   	}
;;;2230   
;;;2231   	LEAVE_FF(dj->fs, res);
;;;2232   }
00004a  b006              ADD      sp,sp,#0x18
00004c  bd10              POP      {r4,pc}
;;;2233   
                          ENDP


                          AREA ||i.f_printf||, CODE, READONLY, ALIGN=1

                  f_printf PROC
;;;3072   /*-----------------------------------------------------------------------*/
;;;3073   int f_printf (
000000  b40f              PUSH     {r0-r3}
;;;3074   	FIL* fil,			/* Pointer to the file object */
;;;3075   	const char* str,	/* Pointer to the format string */
;;;3076   	...					/* Optional arguments... */
;;;3077   )
;;;3078   {
000002  e92d47ff          PUSH     {r0-r10,lr}
;;;3079   	va_list arp;
;;;3080   	UCHAR c, f, r;
;;;3081   	ULONG val;
;;;3082   	char s[16];
;;;3083   	int i, w, res, cc;
;;;3084   
;;;3085   
;;;3086   	va_start(arp, str);
;;;3087   
;;;3088   	for (cc = res = 0; cc != EOF; res += cc) {
000006  2500              MOVS     r5,#0
000008  4681              MOV      r9,r0                 ;3078
00000a  ac0e              ADD      r4,sp,#0x38           ;3086
00000c  462f              MOV      r7,r5
00000e  46a8              MOV      r8,r5
000010  466e              MOV      r6,sp                 ;3082
000012  e078              B        |L21.262|
                  |L21.20|
;;;3089   		c = *str++;
000014  9a0d              LDR      r2,[sp,#0x34]
000016  f8120b01          LDRB     r0,[r2],#1
;;;3090   		if (c == 0) break;			/* End of string */
00001a  920d              STR      r2,[sp,#0x34]
00001c  2800              CMP      r0,#0
00001e  d074              BEQ      |L21.266|
;;;3091   		if (c != '%') {				/* Non escape character */
000020  2825              CMP      r0,#0x25
000022  d007              BEQ      |L21.52|
                  |L21.36|
;;;3092   			cc = f_putc(c, fil);
000024  4649              MOV      r1,r9
000026  f7fffffe          BL       f_putc
00002a  4607              MOV      r7,r0
;;;3093   			if (cc != EOF) cc = 1;
00002c  1c40              ADDS     r0,r0,#1
00002e  d069              BEQ      |L21.260|
;;;3094   			continue;
;;;3095   		}
;;;3096   		w = f = 0;
;;;3097   		c = *str++;
;;;3098   		if (c == '0') {				/* Flag: '0' padding */
;;;3099   			f = 1; c = *str++;
;;;3100   		}
;;;3101   		while (c >= '0' && c <= '9') {	/* Precision */
;;;3102   			w = w * 10 + (c - '0');
;;;3103   			c = *str++;
;;;3104   		}
;;;3105   		if (c == 'l') {				/* Prefix: Size is long int */
;;;3106   			f |= 2; c = *str++;
;;;3107   		}
;;;3108   		if (c == 's') {				/* Type is string */
;;;3109   			cc = f_puts(va_arg(arp, char*), fil);
;;;3110   			continue;
;;;3111   		}
;;;3112   		if (c == 'c') {				/* Type is character */
;;;3113   			cc = f_putc(va_arg(arp, int), fil);
;;;3114   			if (cc != EOF) cc = 1;
000030  2701              MOVS     r7,#1
000032  e067              B        |L21.260|
                  |L21.52|
000034  2000              MOVS     r0,#0                 ;3096
000036  f8121b01          LDRB     r1,[r2],#1            ;3097
00003a  4603              MOV      r3,r0                 ;3096
00003c  920d              STR      r2,[sp,#0x34]         ;3098
00003e  2930              CMP      r1,#0x30              ;3098
000040  d10a              BNE      |L21.88|
000042  2001              MOVS     r0,#1                 ;3099
000044  e005              B        |L21.82|
                  |L21.70|
000046  eb030283          ADD      r2,r3,r3,LSL #2       ;3102
00004a  eb010342          ADD      r3,r1,r2,LSL #1       ;3102
00004e  9a0d              LDR      r2,[sp,#0x34]         ;3103
000050  3b30              SUBS     r3,r3,#0x30           ;3102
                  |L21.82|
000052  f8121b01          LDRB     r1,[r2],#1            ;3099
000056  920d              STR      r2,[sp,#0x34]         ;3099
                  |L21.88|
000058  f1a10230          SUB      r2,r1,#0x30           ;3101
00005c  2a09              CMP      r2,#9                 ;3101
00005e  d9f2              BLS      |L21.70|
000060  296c              CMP      r1,#0x6c              ;3105
000062  d105              BNE      |L21.112|
000064  9a0d              LDR      r2,[sp,#0x34]         ;3106
000066  f0400002          ORR      r0,r0,#2              ;3106
00006a  f8121b01          LDRB     r1,[r2],#1            ;3106
00006e  920d              STR      r2,[sp,#0x34]         ;3106
                  |L21.112|
000070  2973              CMP      r1,#0x73              ;3108
000072  d00e              BEQ      |L21.146|
000074  2963              CMP      r1,#0x63              ;3112
000076  d00e              BEQ      |L21.150|
;;;3115   			continue;
;;;3116   		}
;;;3117   		r = 0;
000078  2200              MOVS     r2,#0
;;;3118   		if (c == 'd') r = 10;		/* Type is signed decimal */
00007a  2964              CMP      r1,#0x64
00007c  d00d              BEQ      |L21.154|
;;;3119   		if (c == 'u') r = 10;		/* Type is unsigned decimal */
00007e  2975              CMP      r1,#0x75
000080  d00b              BEQ      |L21.154|
;;;3120   		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
000082  2958              CMP      r1,#0x58
000084  d00b              BEQ      |L21.158|
;;;3121   		if (r == 0) break;			/* Unknown type */
000086  b38a              CBZ      r2,|L21.236|
                  |L21.136|
;;;3122   		if (f & 2) {				/* Get the value */
000088  0787              LSLS     r7,r0,#30
;;;3123   			val = (ULONG)va_arg(arp, long);
;;;3124   		} else {
;;;3125   			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
00008a  cc80              LDM      r4!,{r7}
;;;3126   		}
;;;3127   		/* Put numeral string */
;;;3128   		if (c == 'd') {
00008c  2964              CMP      r1,#0x64
00008e  d008              BEQ      |L21.162|
000090  e00c              B        |L21.172|
                  |L21.146|
000092  cc01              LDM      r4!,{r0}              ;3109
000094  e032              B        |L21.252|
                  |L21.150|
000096  cc01              LDM      r4!,{r0}              ;3113
000098  e7c4              B        |L21.36|
                  |L21.154|
00009a  220a              MOVS     r2,#0xa               ;3119
00009c  e7f4              B        |L21.136|
                  |L21.158|
00009e  2210              MOVS     r2,#0x10              ;3120
0000a0  e7f2              B        |L21.136|
                  |L21.162|
;;;3129   			if (val & 0x80000000) {
0000a2  2f00              CMP      r7,#0
0000a4  da02              BGE      |L21.172|
;;;3130   				val = 0 - val;
0000a6  427f              RSBS     r7,r7,#0
;;;3131   				f |= 4;
0000a8  f0400004          ORR      r0,r0,#4
                  |L21.172|
;;;3132   			}
;;;3133   		}
;;;3134   		i = sizeof(s) - 1; s[i] = 0;
0000ac  210f              MOVS     r1,#0xf
0000ae  f88d800f          STRB     r8,[sp,#0xf]
                  |L21.178|
;;;3135   		do {
;;;3136   			c = (UCHAR)(val % r + '0');
0000b2  fbb7fcf2          UDIV     r12,r7,r2
0000b6  fb02771c          MLS      r7,r2,r12,r7
0000ba  3730              ADDS     r7,r7,#0x30
0000bc  b2ff              UXTB     r7,r7
;;;3137   			if (c > '9') c += 7;
0000be  2f39              CMP      r7,#0x39
0000c0  d902              BLS      |L21.200|
0000c2  f1070707          ADD      r7,r7,#7
0000c6  b2ff              UXTB     r7,r7
                  |L21.200|
;;;3138   			s[--i] = c;
0000c8  1e49              SUBS     r1,r1,#1
0000ca  5477              STRB     r7,[r6,r1]
0000cc  4667              MOV      r7,r12
;;;3139   			val /= r;
;;;3140   		} while (i && val);
0000ce  d006              BEQ      |L21.222|
0000d0  2f00              CMP      r7,#0
0000d2  d1ee              BNE      |L21.178|
;;;3141   		if (i && (f & 4)) s[--i] = '-';
0000d4  0742              LSLS     r2,r0,#29
0000d6  d502              BPL      |L21.222|
0000d8  222d              MOVS     r2,#0x2d
0000da  1e49              SUBS     r1,r1,#1
0000dc  5472              STRB     r2,[r6,r1]
                  |L21.222|
;;;3142   		w = sizeof(s) - 1 - w;
0000de  f1c3030f          RSB      r3,r3,#0xf
;;;3143   		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
0000e2  e007              B        |L21.244|
                  |L21.228|
0000e4  07c2              LSLS     r2,r0,#31
0000e6  d002              BEQ      |L21.238|
0000e8  2230              MOVS     r2,#0x30
0000ea  e001              B        |L21.240|
                  |L21.236|
0000ec  e00d              B        |L21.266|
                  |L21.238|
0000ee  2220              MOVS     r2,#0x20
                  |L21.240|
0000f0  1e49              SUBS     r1,r1,#1
0000f2  5472              STRB     r2,[r6,r1]
                  |L21.244|
0000f4  b109              CBZ      r1,|L21.250|
0000f6  4299              CMP      r1,r3
0000f8  dcf4              BGT      |L21.228|
                  |L21.250|
;;;3144   		cc = f_puts(&s[i], fil);
0000fa  1870              ADDS     r0,r6,r1
                  |L21.252|
0000fc  4649              MOV      r1,r9
0000fe  f7fffffe          BL       f_puts
000102  4607              MOV      r7,r0
                  |L21.260|
000104  443d              ADD      r5,r5,r7              ;3088
                  |L21.262|
000106  1c78              ADDS     r0,r7,#1              ;3088
000108  d184              BNE      |L21.20|
                  |L21.266|
;;;3145   	}
;;;3146   
;;;3147   	va_end(arp);
;;;3148   	return (cc == EOF) ? cc : res;
00010a  1c78              ADDS     r0,r7,#1
00010c  d005              BEQ      |L21.282|
00010e  4628              MOV      r0,r5
                  |L21.272|
;;;3149   }
000110  b004              ADD      sp,sp,#0x10
000112  e8bd07f0          POP      {r4-r10}
000116  f85dfb14          LDR      pc,[sp],#0x14
                  |L21.282|
00011a  4638              MOV      r0,r7                 ;3148
00011c  e7f8              B        |L21.272|
;;;3150   
                          ENDP


                          AREA ||i.f_putc||, CODE, READONLY, ALIGN=1

                  f_putc PROC
;;;3025   /*-----------------------------------------------------------------------*/
;;;3026   int f_putc (
000000  b57c              PUSH     {r2-r6,lr}
;;;3027   	int chr,	/* A character to be output */
;;;3028   	FIL* fil	/* Pointer to the file object */
;;;3029   )
;;;3030   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3031   	UINT bw;
;;;3032   	char c;
;;;3033   
;;;3034   
;;;3035   #if _USE_STRFUNC >= 2
;;;3036   	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
000006  280a              CMP      r0,#0xa
000008  d102              BNE      |L22.16|
00000a  200d              MOVS     r0,#0xd
00000c  f7fffffe          BL       f_putc
                  |L22.16|
;;;3037   #endif
;;;3038   	if (!fil) {	/* Special value may be used to switch the destination to any other device */
000010  b14d              CBZ      r5,|L22.38|
;;;3039   	/*	put_console(chr);	*/
;;;3040   		return chr;
;;;3041   	}
;;;3042   	c = (char)chr;
000012  f88d4004          STRB     r4,[sp,#4]
;;;3043   	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
000016  466b              MOV      r3,sp
000018  2201              MOVS     r2,#1
00001a  a901              ADD      r1,sp,#4
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       f_write
;;;3044   	return bw ? chr : EOF;		/* Return the result */
000022  9800              LDR      r0,[sp,#0]
000024  b108              CBZ      r0,|L22.42|
                  |L22.38|
000026  4620              MOV      r0,r4
;;;3045   }
000028  bd7c              POP      {r2-r6,pc}
                  |L22.42|
00002a  f04f30ff          MOV      r0,#0xffffffff        ;3044
00002e  bd7c              POP      {r2-r6,pc}
;;;3046   
                          ENDP


                          AREA ||i.f_puts||, CODE, READONLY, ALIGN=1

                  f_puts PROC
;;;3052   /*-----------------------------------------------------------------------*/
;;;3053   int f_puts (
000000  b570              PUSH     {r4-r6,lr}
;;;3054   	const char* str,	/* Pointer to the string to be output */
;;;3055   	FIL* fil			/* Pointer to the file object */
;;;3056   )
;;;3057   {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;3058   	int n;
;;;3059   
;;;3060   
;;;3061   	for (n = 0; *str; str++, n++) {
000006  2500              MOVS     r5,#0
000008  e006              B        |L23.24|
                  |L23.10|
;;;3062   		if (f_putc(*str, fil) == EOF) return EOF;
00000a  4631              MOV      r1,r6
00000c  f7fffffe          BL       f_putc
000010  1c40              ADDS     r0,r0,#1
000012  d006              BEQ      |L23.34|
000014  1c64              ADDS     r4,r4,#1              ;3061
000016  1c6d              ADDS     r5,r5,#1              ;3061
                  |L23.24|
000018  7820              LDRB     r0,[r4,#0]            ;3061
00001a  2800              CMP      r0,#0                 ;3061
00001c  d1f5              BNE      |L23.10|
;;;3063   	}
;;;3064   	return n;
00001e  4628              MOV      r0,r5
;;;3065   }
000020  bd70              POP      {r4-r6,pc}
                  |L23.34|
000022  f04f30ff          MOV      r0,#0xffffffff        ;3062
000026  bd70              POP      {r4-r6,pc}
;;;3066   
                          ENDP


                          AREA ||i.f_read||, CODE, READONLY, ALIGN=1

                  f_read PROC
;;;1762   
;;;1763   FRESULT f_read (
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1764   	FIL *fp, 		/* Pointer to the file object */
;;;1765   	void *buff,		/* Pointer to data buffer */
;;;1766   	UINT btr,		/* Number of bytes to read */
;;;1767   	UINT *br		/* Pointer to number of bytes read */
;;;1768   )
;;;1769   {
;;;1770   	FRESULT res;
;;;1771   	DWORD clst, sect, remain;
;;;1772   	UINT rcnt, cc;
;;;1773   	BYTE *rbuff = buff;
;;;1774   
;;;1775   
;;;1776   	*br = 0;	/* Initialize bytes read */
000004  f04f0a00          MOV      r10,#0
000008  4688              MOV      r8,r1                 ;1773
;;;1777   
;;;1778   	res = validate(fp->fs, fp->id);					/* Check validity of the object */
00000a  f8c3a000          STR      r10,[r3,#0]
00000e  4604              MOV      r4,r0                 ;1769
000010  8881              LDRH     r1,[r0,#4]
000012  4699              MOV      r9,r3                 ;1769
000014  4616              MOV      r6,r2                 ;1769
000016  6800              LDR      r0,[r0,#0]
000018  f7fffffe          BL       validate
;;;1779   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00001c  2800              CMP      r0,#0
00001e  d103              BNE      |L24.40|
;;;1780   	if (fp->flag & FA__ERROR)						/* Check abort flag */
000020  79a0              LDRB     r0,[r4,#6]
000022  0601              LSLS     r1,r0,#24
000024  d502              BPL      |L24.44|
                  |L24.38|
;;;1781   		LEAVE_FF(fp->fs, FR_INT_ERR);
000026  2002              MOVS     r0,#2
                  |L24.40|
;;;1782   	if (!(fp->flag & FA_READ)) 						/* Check access mode */
;;;1783   		LEAVE_FF(fp->fs, FR_DENIED);
;;;1784   	remain = fp->fsize - fp->fptr;
;;;1785   	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
;;;1786   
;;;1787   	for ( ;  btr;									/* Repeat until all data transferred */
;;;1788   		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
;;;1789   		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
;;;1790   			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
;;;1791   				clst = (fp->fptr == 0) ?			/* On the top of the file? */
;;;1792   					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
;;;1793   				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
;;;1794   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;1795   				fp->curr_clust = clst;				/* Update current cluster */
;;;1796   				fp->csect = 0;						/* Reset sector offset in the cluster */
;;;1797   			}
;;;1798   			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
;;;1799   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;1800   			sect += fp->csect;
;;;1801   			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
;;;1802   			if (cc) {								/* Read maximum contiguous sectors directly */
;;;1803   				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;1804   					cc = fp->fs->csize - fp->csect;
;;;1805   				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
;;;1806   					ABORT(fp->fs, FR_DISK_ERR);
;;;1807   #if !_FS_READONLY && _FS_MINIMIZE <= 2
;;;1808   #if _FS_TINY
;;;1809   				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;1810   					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
;;;1811   #else
;;;1812   				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;1813   					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
;;;1814   #endif
;;;1815   #endif
;;;1816   				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
;;;1817   				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
;;;1818   				continue;
;;;1819   			}
;;;1820   #if !_FS_TINY
;;;1821   #if !_FS_READONLY
;;;1822   			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
;;;1823   				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
;;;1824   					ABORT(fp->fs, FR_DISK_ERR);
;;;1825   				fp->flag &= ~FA__DIRTY;
;;;1826   			}
;;;1827   #endif
;;;1828   			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
;;;1829   				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
;;;1830   					ABORT(fp->fs, FR_DISK_ERR);
;;;1831   			}
;;;1832   #endif
;;;1833   			fp->dsect = sect;
;;;1834   			fp->csect++;							/* Next sector address in the cluster */
;;;1835   		}
;;;1836   		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
;;;1837   		if (rcnt > btr) rcnt = btr;
;;;1838   #if _FS_TINY
;;;1839   		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
;;;1840   			ABORT(fp->fs, FR_DISK_ERR);
;;;1841   		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;1842   #else
;;;1843   		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;1844   #endif
;;;1845   	}
;;;1846   
;;;1847   	LEAVE_FF(fp->fs, FR_OK);
;;;1848   }
000028  e8bd9ff0          POP      {r4-r12,pc}
                  |L24.44|
00002c  07c0              LSLS     r0,r0,#31             ;1782
00002e  d008              BEQ      |L24.66|
000030  e9d41002          LDRD     r1,r0,[r4,#8]         ;1782
000034  1a40              SUBS     r0,r0,r1              ;1784
000036  f1040b24          ADD      r11,r4,#0x24          ;1813
00003a  4286              CMP      r6,r0                 ;1785
00003c  d900              BLS      |L24.64|
00003e  4606              MOV      r6,r0                 ;1785
                  |L24.64|
000040  e08e              B        |L24.352|
                  |L24.66|
000042  2007              MOVS     r0,#7                 ;1783
000044  e7f0              B        |L24.40|
                  |L24.70|
000046  6822              LDR      r2,[r4,#0]            ;1789
000048  68a0              LDR      r0,[r4,#8]            ;1789
00004a  8951              LDRH     r1,[r2,#0xa]          ;1789
00004c  fbb0f3f1          UDIV     r3,r0,r1              ;1789
000050  fb010113          MLS      r1,r1,r3,r0           ;1789
000054  2900              CMP      r1,#0                 ;1789
000056  d168              BNE      |L24.298|
000058  79e1              LDRB     r1,[r4,#7]            ;1790
00005a  7893              LDRB     r3,[r2,#2]            ;1790
00005c  4299              CMP      r1,r3                 ;1790
00005e  d30b              BCC      |L24.120|
000060  b318              CBZ      r0,|L24.170|
000062  4610              MOV      r0,r2                 ;1792
000064  6961              LDR      r1,[r4,#0x14]         ;1792
000066  f7fffffe          BL       get_fat
                  |L24.106|
00006a  2801              CMP      r0,#1                 ;1793
00006c  d91f              BLS      |L24.174|
00006e  1c41              ADDS     r1,r0,#1              ;1794
000070  d051              BEQ      |L24.278|
000072  6160              STR      r0,[r4,#0x14]         ;1796
000074  f884a007          STRB     r10,[r4,#7]           ;1796
                  |L24.120|
000078  6961              LDR      r1,[r4,#0x14]         ;1798
00007a  6820              LDR      r0,[r4,#0]            ;1798
00007c  f7fffffe          BL       clust2sect
000080  b1a8              CBZ      r0,|L24.174|
000082  79e1              LDRB     r1,[r4,#7]            ;1800
000084  180f              ADDS     r7,r1,r0              ;1800
000086  6820              LDR      r0,[r4,#0]            ;1801
000088  8942              LDRH     r2,[r0,#0xa]          ;1801
00008a  fbb6f5f2          UDIV     r5,r6,r2              ;1801
00008e  b34d              CBZ      r5,|L24.228|
000090  7882              LDRB     r2,[r0,#2]            ;1803
000092  194b              ADDS     r3,r1,r5              ;1803
000094  4293              CMP      r3,r2                 ;1803
000096  d900              BLS      |L24.154|
000098  1a55              SUBS     r5,r2,r1              ;1804
                  |L24.154|
00009a  b2eb              UXTB     r3,r5                 ;1805
00009c  7840              LDRB     r0,[r0,#1]            ;1805
00009e  463a              MOV      r2,r7                 ;1805
0000a0  4641              MOV      r1,r8                 ;1805
0000a2  f7fffffe          BL       disk_read
0000a6  bbb0              CBNZ     r0,|L24.278|
0000a8  e006              B        |L24.184|
                  |L24.170|
0000aa  6920              LDR      r0,[r4,#0x10]         ;1792
0000ac  e7dd              B        |L24.106|
                  |L24.174|
0000ae  79a0              LDRB     r0,[r4,#6]            ;1799
0000b0  f0400080          ORR      r0,r0,#0x80           ;1799
0000b4  71a0              STRB     r0,[r4,#6]            ;1799
0000b6  e7b6              B        |L24.38|
                  |L24.184|
0000b8  79a0              LDRB     r0,[r4,#6]            ;1812
0000ba  0640              LSLS     r0,r0,#25             ;1812
0000bc  d50a              BPL      |L24.212|
0000be  69a0              LDR      r0,[r4,#0x18]         ;1812
0000c0  1bc0              SUBS     r0,r0,r7              ;1812
0000c2  42a8              CMP      r0,r5                 ;1812
0000c4  d206              BCS      |L24.212|
0000c6  6821              LDR      r1,[r4,#0]            ;1813
0000c8  894a              LDRH     r2,[r1,#0xa]          ;1813
0000ca  4659              MOV      r1,r11                ;1813
0000cc  fb008002          MLA      r0,r0,r2,r8           ;1813
0000d0  f7fffffe          BL       mem_cpy
                  |L24.212|
0000d4  79e0              LDRB     r0,[r4,#7]            ;1816
0000d6  4428              ADD      r0,r0,r5              ;1816
0000d8  71e0              STRB     r0,[r4,#7]            ;1816
0000da  6820              LDR      r0,[r4,#0]            ;1817
0000dc  8940              LDRH     r0,[r0,#0xa]          ;1817
0000de  fb05f500          MUL      r5,r5,r0              ;1817
0000e2  e033              B        |L24.332|
                  |L24.228|
0000e4  79a1              LDRB     r1,[r4,#6]            ;1822
0000e6  0649              LSLS     r1,r1,#25             ;1822
0000e8  d50a              BPL      |L24.256|
0000ea  7840              LDRB     r0,[r0,#1]            ;1823
0000ec  2301              MOVS     r3,#1                 ;1823
0000ee  4659              MOV      r1,r11                ;1823
0000f0  69a2              LDR      r2,[r4,#0x18]         ;1823
0000f2  f7fffffe          BL       disk_write
0000f6  b970              CBNZ     r0,|L24.278|
0000f8  79a0              LDRB     r0,[r4,#6]            ;1825
0000fa  f0200040          BIC      r0,r0,#0x40           ;1825
0000fe  71a0              STRB     r0,[r4,#6]            ;1825
                  |L24.256|
000100  69a0              LDR      r0,[r4,#0x18]         ;1828
000102  42b8              CMP      r0,r7                 ;1828
000104  d00d              BEQ      |L24.290|
000106  6820              LDR      r0,[r4,#0]            ;1829
000108  2301              MOVS     r3,#1                 ;1829
00010a  463a              MOV      r2,r7                 ;1829
00010c  7840              LDRB     r0,[r0,#1]            ;1829
00010e  4659              MOV      r1,r11                ;1829
000110  f7fffffe          BL       disk_read
000114  b128              CBZ      r0,|L24.290|
                  |L24.278|
000116  79a0              LDRB     r0,[r4,#6]            ;1830
000118  f0400080          ORR      r0,r0,#0x80           ;1830
00011c  71a0              STRB     r0,[r4,#6]            ;1830
00011e  2001              MOVS     r0,#1                 ;1830
000120  e782              B        |L24.40|
                  |L24.290|
000122  61a7              STR      r7,[r4,#0x18]         ;1834
000124  79e0              LDRB     r0,[r4,#7]            ;1834
000126  1c40              ADDS     r0,r0,#1              ;1834
000128  71e0              STRB     r0,[r4,#7]            ;1834
                  |L24.298|
00012a  6820              LDR      r0,[r4,#0]            ;1836
00012c  68a1              LDR      r1,[r4,#8]            ;1836
00012e  8940              LDRH     r0,[r0,#0xa]          ;1836
000130  fbb1f2f0          UDIV     r2,r1,r0              ;1836
000134  fb001112          MLS      r1,r0,r2,r1           ;1836
000138  1a45              SUBS     r5,r0,r1              ;1836
00013a  42b5              CMP      r5,r6                 ;1837
00013c  d900              BLS      |L24.320|
00013e  4635              MOV      r5,r6                 ;1837
                  |L24.320|
000140  4421              ADD      r1,r1,r4              ;1843
000142  3124              ADDS     r1,r1,#0x24           ;1843
000144  462a              MOV      r2,r5                 ;1843
000146  4640              MOV      r0,r8                 ;1843
000148  f7fffffe          BL       mem_cpy
                  |L24.332|
00014c  68a0              LDR      r0,[r4,#8]            ;1788
00014e  44a8              ADD      r8,r8,r5              ;1788
000150  4428              ADD      r0,r0,r5              ;1788
000152  60a0              STR      r0,[r4,#8]            ;1788
000154  f8d90000          LDR      r0,[r9,#0]            ;1788
000158  1941              ADDS     r1,r0,r5              ;1788
00015a  1b76              SUBS     r6,r6,r5              ;1788
00015c  f8c91000          STR      r1,[r9,#0]            ;1788
                  |L24.352|
000160  2e00              CMP      r6,#0                 ;1787
000162  f47faf70          BNE      |L24.70|
000166  2000              MOVS     r0,#0                 ;1847
000168  e75e              B        |L24.40|
;;;1849   
                          ENDP


                          AREA ||i.f_readdir||, CODE, READONLY, ALIGN=1

                  f_readdir PROC
;;;2240   
;;;2241   FRESULT f_readdir (
000000  b5fe              PUSH     {r1-r7,lr}
;;;2242   	DIR *dj,			/* Pointer to the open directory object */
;;;2243   	FILINFO *fno		/* Pointer to file information to return */
;;;2244   )
;;;2245   {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;2246   	FRESULT res;
;;;2247   	NAMEBUF(sfn, lfn);
;;;2248   
;;;2249   
;;;2250   	res = validate(dj->fs, dj->id);			/* Check validity of the object */
000006  8881              LDRH     r1,[r0,#4]
000008  6800              LDR      r0,[r0,#0]
00000a  f7fffffe          BL       validate
;;;2251   	if (res == FR_OK) {
00000e  2800              CMP      r0,#0
000010  d116              BNE      |L25.64|
;;;2252   		INITBUF((*dj), sfn, lfn);
000012  f8c4d018          STR      sp,[r4,#0x18]
;;;2253   		if (!fno) {
000016  b1a5              CBZ      r5,|L25.66|
;;;2254   			res = dir_seek(dj, 0);
;;;2255   		} else {
;;;2256   			res = dir_read(dj);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       dir_read
00001e  2600              MOVS     r6,#0
;;;2257   			if (res == FR_NO_FILE) {
000020  2804              CMP      r0,#4
000022  d013              BEQ      |L25.76|
;;;2258   				dj->sect = 0;
;;;2259   				res = FR_OK;
;;;2260   			}
;;;2261   			if (res == FR_OK) {				/* A valid entry is found */
000024  2800              CMP      r0,#0
000026  d10b              BNE      |L25.64|
                  |L25.40|
;;;2262   				get_fileinfo(dj, fno);		/* Get the object information */
000028  4629              MOV      r1,r5
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       get_fileinfo
;;;2263   				res = dir_next(dj, FALSE);	/* Increment index for next */
000030  2100              MOVS     r1,#0
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       dir_next
;;;2264   				if (res == FR_NO_FILE) {
000038  2804              CMP      r0,#4
00003a  d101              BNE      |L25.64|
;;;2265   					dj->sect = 0;
;;;2266   					res = FR_OK;
00003c  2000              MOVS     r0,#0
00003e  6126              STR      r6,[r4,#0x10]
                  |L25.64|
;;;2267   				}
;;;2268   			}
;;;2269   		}
;;;2270   	}
;;;2271   
;;;2272   	LEAVE_FF(dj->fs, res);
;;;2273   }
000040  bdfe              POP      {r1-r7,pc}
                  |L25.66|
000042  2100              MOVS     r1,#0                 ;2254
000044  4620              MOV      r0,r4                 ;2254
000046  f7fffffe          BL       dir_seek
00004a  bdfe              POP      {r1-r7,pc}
                  |L25.76|
00004c  6126              STR      r6,[r4,#0x10]         ;2259
00004e  e7eb              B        |L25.40|
;;;2274   
                          ENDP


                          AREA ||i.f_rename||, CODE, READONLY, ALIGN=1

                  f_rename PROC
;;;2640   
;;;2641   FRESULT f_rename (
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;2642   	const XCHAR *path_old,	/* Pointer to the old name */
;;;2643   	const XCHAR *path_new	/* Pointer to the new name */
;;;2644   )
;;;2645   {
000002  b097              SUB      sp,sp,#0x5c
;;;2646   	FRESULT res;
;;;2647   	DIR dj_old, dj_new;
;;;2648   	NAMEBUF(sfn, lfn);
;;;2649   	BYTE buf[21], *dir;
;;;2650   	DWORD dw;
;;;2651   
;;;2652   
;;;2653   	INITBUF(dj_old, sfn, lfn);
000004  a814              ADD      r0,sp,#0x50
000006  460c              MOV      r4,r1                 ;2645
;;;2654   	res = chk_mounted(&path_old, &dj_old.fs, 1);
000008  900d              STR      r0,[sp,#0x34]
00000a  2201              MOVS     r2,#1
00000c  a907              ADD      r1,sp,#0x1c
00000e  a817              ADD      r0,sp,#0x5c
000010  f7fffffe          BL       chk_mounted
;;;2655   	if (res == FR_OK) {
000014  2800              CMP      r0,#0
000016  d149              BNE      |L26.172|
;;;2656   		dj_new.fs = dj_old.fs;
000018  9807              LDR      r0,[sp,#0x1c]
;;;2657   		res = follow_path(&dj_old, path_old);	/* Check old object */
00001a  9000              STR      r0,[sp,#0]
00001c  a807              ADD      r0,sp,#0x1c
00001e  9917              LDR      r1,[sp,#0x5c]
000020  f7fffffe          BL       follow_path
;;;2658   		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
000024  2800              CMP      r0,#0
000026  d141              BNE      |L26.172|
;;;2659   			res = FR_INVALID_NAME;
;;;2660   	}
;;;2661   	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
;;;2662   
;;;2663   	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
000028  980c              LDR      r0,[sp,#0x30]
00002a  b3e0              CBZ      r0,|L26.166|
;;;2664   	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */
00002c  f100010b          ADD      r1,r0,#0xb
000030  2215              MOVS     r2,#0x15
000032  a80e              ADD      r0,sp,#0x38
000034  f7fffffe          BL       mem_cpy
;;;2665   
;;;2666   	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
000038  221c              MOVS     r2,#0x1c
00003a  a907              ADD      r1,sp,#0x1c
00003c  4668              MOV      r0,sp
00003e  f7fffffe          BL       mem_cpy
;;;2667   	res = follow_path(&dj_new, path_new);		/* Check new object */
000042  4621              MOV      r1,r4
000044  4668              MOV      r0,sp
000046  f7fffffe          BL       follow_path
;;;2668   	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
00004a  b368              CBZ      r0,|L26.168|
;;;2669   	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
00004c  2804              CMP      r0,#4
00004e  d12d              BNE      |L26.172|
;;;2670   		res = dir_register(&dj_new);			/* Register the new object */
000050  4668              MOV      r0,sp
000052  f7fffffe          BL       dir_register
;;;2671   		if (res == FR_OK) {
000056  2800              CMP      r0,#0
000058  d128              BNE      |L26.172|
;;;2672   			dir = dj_new.dir;					/* Copy object information into new entry */
;;;2673   			mem_cpy(dir+13, buf+2, 19);
00005a  9c05              LDR      r4,[sp,#0x14]
00005c  2213              MOVS     r2,#0x13
00005e  f10d013a          ADD      r1,sp,#0x3a
000062  f104000d          ADD      r0,r4,#0xd
000066  f7fffffe          BL       mem_cpy
;;;2674   			dir[DIR_Attr] = buf[0] | AM_ARC;
00006a  f89d0038          LDRB     r0,[sp,#0x38]
;;;2675   			dj_old.fs->wflag = 1;
00006e  2501              MOVS     r5,#1
000070  f0400020          ORR      r0,r0,#0x20           ;2674
000074  72e0              STRB     r0,[r4,#0xb]          ;2674
000076  9807              LDR      r0,[sp,#0x1c]
000078  7105              STRB     r5,[r0,#4]
;;;2676   			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
00007a  7ae0              LDRB     r0,[r4,#0xb]
00007c  06c0              LSLS     r0,r0,#27
00007e  d530              BPL      |L26.226|
;;;2677   				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
000080  8aa1              LDRH     r1,[r4,#0x14]
000082  8b60              LDRH     r0,[r4,#0x1a]
000084  4301              ORRS     r1,r1,r0
000086  9800              LDR      r0,[sp,#0]
000088  f7fffffe          BL       clust2sect
00008c  0001              MOVS     r1,r0
;;;2678   				if (!dw) {
00008e  d011              BEQ      |L26.180|
;;;2679   					res = FR_INT_ERR;
;;;2680   				} else {
;;;2681   					res = move_window(dj_new.fs, dw);
000090  9800              LDR      r0,[sp,#0]
000092  f7fffffe          BL       move_window
;;;2682   					dir = dj_new.fs->win+32;
000096  9900              LDR      r1,[sp,#0]
000098  3150              ADDS     r1,r1,#0x50
;;;2683   					if (res == FR_OK && dir[1] == '.') {
00009a  2800              CMP      r0,#0
00009c  d106              BNE      |L26.172|
00009e  7848              LDRB     r0,[r1,#1]
0000a0  282e              CMP      r0,#0x2e
0000a2  d009              BEQ      |L26.184|
0000a4  e01d              B        |L26.226|
                  |L26.166|
0000a6  e000              B        |L26.170|
                  |L26.168|
0000a8  e002              B        |L26.176|
                  |L26.170|
0000aa  2004              MOVS     r0,#4                 ;2663
                  |L26.172|
;;;2684   						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
;;;2685   						ST_WORD(dir+DIR_FstClusLO, dw);
;;;2686   						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
;;;2687   						dj_new.fs->wflag = 1;
;;;2688   					}
;;;2689   				}
;;;2690   			}
;;;2691   			if (res == FR_OK) {
;;;2692   				res = dir_remove(&dj_old);			/* Remove old entry */
;;;2693   				if (res == FR_OK)
;;;2694   					res = sync(dj_old.fs);
;;;2695   			}
;;;2696   		}
;;;2697   	}
;;;2698   
;;;2699   	LEAVE_FF(dj_old.fs, res);
;;;2700   }
0000ac  b019              ADD      sp,sp,#0x64
0000ae  bd30              POP      {r4,r5,pc}
                  |L26.176|
0000b0  2008              MOVS     r0,#8                 ;2668
0000b2  e7fb              B        |L26.172|
                  |L26.180|
0000b4  2002              MOVS     r0,#2                 ;2679
0000b6  e7f9              B        |L26.172|
                  |L26.184|
0000b8  9800              LDR      r0,[sp,#0]            ;2684
0000ba  7800              LDRB     r0,[r0,#0]            ;2684
0000bc  2803              CMP      r0,#3                 ;2684
0000be  d106              BNE      |L26.206|
0000c0  9a00              LDR      r2,[sp,#0]            ;2684
0000c2  9802              LDR      r0,[sp,#8]            ;2684
0000c4  6a52              LDR      r2,[r2,#0x24]         ;2684
0000c6  4290              CMP      r0,r2                 ;2684
0000c8  d101              BNE      |L26.206|
0000ca  2000              MOVS     r0,#0                 ;2684
0000cc  e000              B        |L26.208|
                  |L26.206|
0000ce  9802              LDR      r0,[sp,#8]            ;2684
                  |L26.208|
0000d0  7688              STRB     r0,[r1,#0x1a]         ;2685
0000d2  0a02              LSRS     r2,r0,#8              ;2685
0000d4  76ca              STRB     r2,[r1,#0x1b]         ;2685
0000d6  0c02              LSRS     r2,r0,#16             ;2686
0000d8  750a              STRB     r2,[r1,#0x14]         ;2686
0000da  0e00              LSRS     r0,r0,#24             ;2686
0000dc  7548              STRB     r0,[r1,#0x15]         ;2686
0000de  9800              LDR      r0,[sp,#0]            ;2687
0000e0  7105              STRB     r5,[r0,#4]            ;2687
                  |L26.226|
0000e2  a807              ADD      r0,sp,#0x1c           ;2692
0000e4  f7fffffe          BL       dir_remove
0000e8  2800              CMP      r0,#0                 ;2693
0000ea  d1df              BNE      |L26.172|
0000ec  9807              LDR      r0,[sp,#0x1c]         ;2694
0000ee  f7fffffe          BL       sync
0000f2  e7db              B        |L26.172|
;;;2701   
                          ENDP


                          AREA ||i.f_stat||, CODE, READONLY, ALIGN=1

                  f_stat PROC
;;;2281   
;;;2282   FRESULT f_stat (
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;2283   	const XCHAR *path,	/* Pointer to the file path */
;;;2284   	FILINFO *fno		/* Pointer to file information to return */
;;;2285   )
;;;2286   {
000002  b08b              SUB      sp,sp,#0x2c
000004  460d              MOV      r5,r1
;;;2287   	FRESULT res;
;;;2288   	DIR dj;
;;;2289   	NAMEBUF(sfn, lfn);
;;;2290   
;;;2291   
;;;2292   	res = chk_mounted(&path, &dj.fs, 0);
000006  2200              MOVS     r2,#0
000008  4669              MOV      r1,sp
00000a  a80b              ADD      r0,sp,#0x2c
00000c  f7fffffe          BL       chk_mounted
000010  0004              MOVS     r4,r0
;;;2293   	if (res == FR_OK) {
000012  d10f              BNE      |L27.52|
;;;2294   		INITBUF(dj, sfn, lfn);
000014  a807              ADD      r0,sp,#0x1c
;;;2295   		res = follow_path(&dj, path);	/* Follow the file path */
000016  9006              STR      r0,[sp,#0x18]
000018  4668              MOV      r0,sp
00001a  990b              LDR      r1,[sp,#0x2c]
00001c  f7fffffe          BL       follow_path
000020  0004              MOVS     r4,r0
;;;2296   		if (res == FR_OK) {				/* Follow completed */
000022  d107              BNE      |L27.52|
;;;2297   			if (dj.dir)	/* Found an object */
000024  9805              LDR      r0,[sp,#0x14]
000026  b120              CBZ      r0,|L27.50|
;;;2298   				get_fileinfo(&dj, fno);
000028  4629              MOV      r1,r5
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       get_fileinfo
000030  e000              B        |L27.52|
                  |L27.50|
;;;2299   			else		/* It is root dir */
;;;2300   				res = FR_INVALID_NAME;
000032  2406              MOVS     r4,#6
                  |L27.52|
;;;2301   		}
;;;2302   	}
;;;2303   
;;;2304   	LEAVE_FF(dj.fs, res);
;;;2305   }
000034  b00d              ADD      sp,sp,#0x34
000036  4620              MOV      r0,r4                 ;2304
000038  bd30              POP      {r4,r5,pc}
;;;2306   
                          ENDP


                          AREA ||i.f_sync||, CODE, READONLY, ALIGN=1

                  f_sync PROC
;;;1972   
;;;1973   FRESULT f_sync (
000000  b570              PUSH     {r4-r6,lr}
;;;1974   	FIL *fp		/* Pointer to the file object */
;;;1975   )
;;;1976   {
000002  4604              MOV      r4,r0
;;;1977   	FRESULT res;
;;;1978   	DWORD tim;
;;;1979   	BYTE *dir;
;;;1980   
;;;1981   
;;;1982   	res = validate(fp->fs, fp->id);		/* Check validity of the object */
000004  8881              LDRH     r1,[r0,#4]
000006  6800              LDR      r0,[r0,#0]
000008  f7fffffe          BL       validate
;;;1983   	if (res == FR_OK) {
00000c  2800              CMP      r0,#0
00000e  d10e              BNE      |L28.46|
;;;1984   		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
000010  79a1              LDRB     r1,[r4,#6]
000012  068a              LSLS     r2,r1,#26
000014  d50b              BPL      |L28.46|
;;;1985   #if !_FS_TINY	/* Write-back dirty buffer */
;;;1986   			if (fp->flag & FA__DIRTY) {
000016  0648              LSLS     r0,r1,#25
000018  d50e              BPL      |L28.56|
;;;1987   				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
00001a  6820              LDR      r0,[r4,#0]
00001c  2301              MOVS     r3,#1
00001e  f1040124          ADD      r1,r4,#0x24
000022  7840              LDRB     r0,[r0,#1]
000024  69a2              LDR      r2,[r4,#0x18]
000026  f7fffffe          BL       disk_write
00002a  b108              CBZ      r0,|L28.48|
;;;1988   					LEAVE_FF(fp->fs, FR_DISK_ERR);
00002c  2001              MOVS     r0,#1
                  |L28.46|
;;;1989   				fp->flag &= ~FA__DIRTY;
;;;1990   			}
;;;1991   #endif
;;;1992   			/* Update the directory entry */
;;;1993   			res = move_window(fp->fs, fp->dir_sect);
;;;1994   			if (res == FR_OK) {
;;;1995   				dir = fp->dir_ptr;
;;;1996   				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
;;;1997   				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
;;;1998   				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
;;;1999   				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
;;;2000   				tim = get_fattime();			/* Updated time */
;;;2001   				ST_DWORD(dir+DIR_WrtTime, tim);
;;;2002   				fp->flag &= ~FA__WRITTEN;
;;;2003   				fp->fs->wflag = 1;
;;;2004   				res = sync(fp->fs);
;;;2005   			}
;;;2006   		}
;;;2007   	}
;;;2008   
;;;2009   	LEAVE_FF(fp->fs, res);
;;;2010   }
00002e  bd70              POP      {r4-r6,pc}
                  |L28.48|
000030  79a0              LDRB     r0,[r4,#6]            ;1989
000032  f0200040          BIC      r0,r0,#0x40           ;1989
000036  71a0              STRB     r0,[r4,#6]            ;1989
                  |L28.56|
000038  69e1              LDR      r1,[r4,#0x1c]         ;1993
00003a  6820              LDR      r0,[r4,#0]            ;1993
00003c  f7fffffe          BL       move_window
000040  2800              CMP      r0,#0                 ;1994
000042  d1f4              BNE      |L28.46|
000044  6a25              LDR      r5,[r4,#0x20]         ;1996
000046  7ae8              LDRB     r0,[r5,#0xb]          ;1996
000048  f0400020          ORR      r0,r0,#0x20           ;1996
00004c  72e8              STRB     r0,[r5,#0xb]          ;1996
00004e  7b20              LDRB     r0,[r4,#0xc]          ;1997
000050  7728              STRB     r0,[r5,#0x1c]         ;1997
000052  89a0              LDRH     r0,[r4,#0xc]          ;1997
000054  0a00              LSRS     r0,r0,#8              ;1997
000056  7768              STRB     r0,[r5,#0x1d]         ;1997
000058  68e0              LDR      r0,[r4,#0xc]          ;1997
00005a  0c00              LSRS     r0,r0,#16             ;1997
00005c  77a8              STRB     r0,[r5,#0x1e]         ;1997
00005e  68e0              LDR      r0,[r4,#0xc]          ;1997
000060  0e00              LSRS     r0,r0,#24             ;1997
000062  77e8              STRB     r0,[r5,#0x1f]         ;1997
000064  7c20              LDRB     r0,[r4,#0x10]         ;1998
000066  76a8              STRB     r0,[r5,#0x1a]         ;1998
000068  8a20              LDRH     r0,[r4,#0x10]         ;1998
00006a  0a00              LSRS     r0,r0,#8              ;1998
00006c  76e8              STRB     r0,[r5,#0x1b]         ;1998
00006e  6920              LDR      r0,[r4,#0x10]         ;1999
000070  0c00              LSRS     r0,r0,#16             ;1999
000072  7528              STRB     r0,[r5,#0x14]         ;1999
000074  6920              LDR      r0,[r4,#0x10]         ;1999
000076  0e00              LSRS     r0,r0,#24             ;1999
000078  7568              STRB     r0,[r5,#0x15]         ;1999
00007a  f7fffffe          BL       get_fattime
00007e  75a8              STRB     r0,[r5,#0x16]         ;2001
000080  0a01              LSRS     r1,r0,#8              ;2001
000082  75e9              STRB     r1,[r5,#0x17]         ;2001
000084  0c01              LSRS     r1,r0,#16             ;2001
000086  7629              STRB     r1,[r5,#0x18]         ;2001
000088  0e00              LSRS     r0,r0,#24             ;2001
00008a  7668              STRB     r0,[r5,#0x19]         ;2001
00008c  79a0              LDRB     r0,[r4,#6]            ;2002
00008e  f0200020          BIC      r0,r0,#0x20           ;2002
000092  71a0              STRB     r0,[r4,#6]            ;2002
000094  6821              LDR      r1,[r4,#0]            ;2003
000096  2001              MOVS     r0,#1                 ;2003
000098  7108              STRB     r0,[r1,#4]            ;2003
00009a  6820              LDR      r0,[r4,#0]            ;2004
00009c  e8bd4070          POP      {r4-r6,lr}            ;2004
0000a0  f7ffbffe          B.W      sync
;;;2011   
                          ENDP


                          AREA ||i.f_truncate||, CODE, READONLY, ALIGN=1

                  f_truncate PROC
;;;2381   
;;;2382   FRESULT f_truncate (
000000  b570              PUSH     {r4-r6,lr}
;;;2383   	FIL *fp		/* Pointer to the file object */
;;;2384   )
;;;2385   {
000002  4604              MOV      r4,r0
;;;2386   	FRESULT res;
;;;2387   	DWORD ncl;
;;;2388   
;;;2389   
;;;2390   	res = validate(fp->fs, fp->id);		/* Check validity of the object */
000004  8881              LDRH     r1,[r0,#4]
000006  6800              LDR      r0,[r0,#0]
000008  f7fffffe          BL       validate
00000c  0005              MOVS     r5,r0
;;;2391   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00000e  d103              BNE      |L29.24|
;;;2392   	if (fp->flag & FA__ERROR)			/* Check abort flag */
000010  79a1              LDRB     r1,[r4,#6]
000012  0608              LSLS     r0,r1,#24
000014  d501              BPL      |L29.26|
;;;2393   		LEAVE_FF(fp->fs, FR_INT_ERR);
000016  2002              MOVS     r0,#2
                  |L29.24|
;;;2394   	if (!(fp->flag & FA_WRITE))			/* Check access mode */
;;;2395   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2396   
;;;2397   	if (fp->fsize > fp->fptr) {
;;;2398   		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
;;;2399   		fp->flag |= FA__WRITTEN;
;;;2400   		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
;;;2401   			res = remove_chain(fp->fs, fp->org_clust);
;;;2402   			fp->org_clust = 0;
;;;2403   		} else {				/* When truncate a part of the file, remove remaining clusters */
;;;2404   			ncl = get_fat(fp->fs, fp->curr_clust);
;;;2405   			res = FR_OK;
;;;2406   			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
;;;2407   			if (ncl == 1) res = FR_INT_ERR;
;;;2408   			if (res == FR_OK && ncl < fp->fs->max_clust) {
;;;2409   				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
;;;2410   				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
;;;2411   			}
;;;2412   		}
;;;2413   	}
;;;2414   	if (res != FR_OK) fp->flag |= FA__ERROR;
;;;2415   
;;;2416   	LEAVE_FF(fp->fs, res);
;;;2417   }
000018  bd70              POP      {r4-r6,pc}
                  |L29.26|
00001a  0788              LSLS     r0,r1,#30             ;2394
00001c  d401              BMI      |L29.34|
00001e  2007              MOVS     r0,#7                 ;2395
000020  bd70              POP      {r4-r6,pc}
                  |L29.34|
000022  e9d40202          LDRD     r0,r2,[r4,#8]
000026  4282              CMP      r2,r0                 ;2397
000028  d930              BLS      |L29.140|
00002a  f0410120          ORR      r1,r1,#0x20           ;2399
00002e  60e0              STR      r0,[r4,#0xc]          ;2399
000030  71a1              STRB     r1,[r4,#6]            ;2399
000032  b150              CBZ      r0,|L29.74|
000034  6961              LDR      r1,[r4,#0x14]         ;2404
000036  6820              LDR      r0,[r4,#0]            ;2404
000038  f7fffffe          BL       get_fat
00003c  4606              MOV      r6,r0                 ;2404
00003e  1c40              ADDS     r0,r0,#1              ;2406
000040  d00b              BEQ      |L29.90|
000042  2e01              CMP      r6,#1                 ;2407
000044  d00b              BEQ      |L29.94|
000046  b165              CBZ      r5,|L29.98|
000048  e01c              B        |L29.132|
                  |L29.74|
00004a  6921              LDR      r1,[r4,#0x10]         ;2401
00004c  6820              LDR      r0,[r4,#0]            ;2401
00004e  f7fffffe          BL       remove_chain
000052  4605              MOV      r5,r0                 ;2401
000054  2000              MOVS     r0,#0                 ;2402
000056  6120              STR      r0,[r4,#0x10]         ;2402
000058  e013              B        |L29.130|
                  |L29.90|
00005a  2501              MOVS     r5,#1                 ;2406
00005c  e012              B        |L29.132|
                  |L29.94|
00005e  2502              MOVS     r5,#2                 ;2407
000060  e010              B        |L29.132|
                  |L29.98|
000062  6820              LDR      r0,[r4,#0]            ;2408
000064  69c1              LDR      r1,[r0,#0x1c]         ;2408
000066  42b1              CMP      r1,r6                 ;2408
000068  d910              BLS      |L29.140|
00006a  f06f4270          MVN      r2,#0xf0000000        ;2409
00006e  6961              LDR      r1,[r4,#0x14]         ;2409
000070  f7fffffe          BL       put_fat
000074  0005              MOVS     r5,r0                 ;2409
000076  d105              BNE      |L29.132|
000078  4631              MOV      r1,r6                 ;2410
00007a  6820              LDR      r0,[r4,#0]            ;2410
00007c  f7fffffe          BL       remove_chain
000080  4605              MOV      r5,r0                 ;2410
                  |L29.130|
000082  b11d              CBZ      r5,|L29.140|
                  |L29.132|
000084  79a0              LDRB     r0,[r4,#6]            ;2414
000086  f0400080          ORR      r0,r0,#0x80           ;2414
00008a  71a0              STRB     r0,[r4,#6]            ;2414
                  |L29.140|
00008c  4628              MOV      r0,r5                 ;2416
00008e  bd70              POP      {r4-r6,pc}
;;;2418   
                          ENDP


                          AREA ||i.f_unlink||, CODE, READONLY, ALIGN=1

                  f_unlink PROC
;;;2425   
;;;2426   FRESULT f_unlink (
000000  b511              PUSH     {r0,r4,lr}
;;;2427   	const XCHAR *path		/* Pointer to the file or directory path */
;;;2428   )
;;;2429   {
000002  b091              SUB      sp,sp,#0x44
;;;2430   	FRESULT res;
;;;2431   	DIR dj, sdj;
;;;2432   	NAMEBUF(sfn, lfn);
;;;2433   	BYTE *dir;
;;;2434   	DWORD dclst;
;;;2435   
;;;2436   
;;;2437   	res = chk_mounted(&path, &dj.fs, 1);
000004  2201              MOVS     r2,#1
000006  4669              MOV      r1,sp
000008  a811              ADD      r0,sp,#0x44
00000a  f7fffffe          BL       chk_mounted
;;;2438   	if (res != FR_OK) LEAVE_FF(dj.fs, res);
00000e  2800              CMP      r0,#0
000010  d10e              BNE      |L30.48|
;;;2439   
;;;2440   	INITBUF(dj, sfn, lfn);
000012  a80e              ADD      r0,sp,#0x38
;;;2441   	res = follow_path(&dj, path);			/* Follow the file path */
000014  9006              STR      r0,[sp,#0x18]
000016  4668              MOV      r0,sp
000018  9911              LDR      r1,[sp,#0x44]
00001a  f7fffffe          BL       follow_path
;;;2442   	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
;;;2443   		res = FR_INVALID_NAME;
;;;2444   	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
00001e  2800              CMP      r0,#0
000020  d106              BNE      |L30.48|
;;;2445   
;;;2446   	dir = dj.dir;
;;;2447   	if (!dir)								/* Is it the root directory? */
000022  9805              LDR      r0,[sp,#0x14]
000024  b118              CBZ      r0,|L30.46|
;;;2448   		LEAVE_FF(dj.fs, FR_INVALID_NAME);
;;;2449   	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
000026  7ac1              LDRB     r1,[r0,#0xb]
000028  07ca              LSLS     r2,r1,#31
00002a  d12f              BNE      |L30.140|
00002c  e002              B        |L30.52|
                  |L30.46|
00002e  2006              MOVS     r0,#6                 ;2448
                  |L30.48|
;;;2450   		LEAVE_FF(dj.fs, FR_DENIED);
;;;2451   	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
;;;2452   
;;;2453   	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
;;;2454   		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
;;;2455   		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
;;;2456   		sdj.sclust = dclst;
;;;2457   		res = dir_seek(&sdj, 2);
;;;2458   		if (res != FR_OK) LEAVE_FF(dj.fs, res);
;;;2459   		res = dir_read(&sdj);
;;;2460   		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
;;;2461   		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
;;;2462   	}
;;;2463   
;;;2464   	res = dir_remove(&dj);					/* Remove directory entry */
;;;2465   	if (res == FR_OK) {
;;;2466   		if (dclst)
;;;2467   			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
;;;2468   		if (res == FR_OK) res = sync(dj.fs);
;;;2469   	}
;;;2470   
;;;2471   	LEAVE_FF(dj.fs, res);
;;;2472   }
000030  b012              ADD      sp,sp,#0x48
000032  bd10              POP      {r4,pc}
                  |L30.52|
000034  8a82              LDRH     r2,[r0,#0x14]         ;2451
000036  8b44              LDRH     r4,[r0,#0x1a]         ;2451
000038  06c8              LSLS     r0,r1,#27             ;2453
00003a  f362441f          BFI      r4,r2,#16,#16         ;2451
00003e  d515              BPL      |L30.108|
000040  2c02              CMP      r4,#2                 ;2454
000042  d201              BCS      |L30.72|
000044  2002              MOVS     r0,#2                 ;2454
000046  e7f3              B        |L30.48|
                  |L30.72|
000048  221c              MOVS     r2,#0x1c              ;2455
00004a  4669              MOV      r1,sp                 ;2455
00004c  a807              ADD      r0,sp,#0x1c           ;2455
00004e  f7fffffe          BL       mem_cpy
000052  2102              MOVS     r1,#2                 ;2457
000054  a807              ADD      r0,sp,#0x1c           ;2457
000056  9409              STR      r4,[sp,#0x24]         ;2457
000058  f7fffffe          BL       dir_seek
00005c  2800              CMP      r0,#0                 ;2458
00005e  d1e7              BNE      |L30.48|
000060  a807              ADD      r0,sp,#0x1c           ;2459
000062  f7fffffe          BL       dir_read
000066  b188              CBZ      r0,|L30.140|
000068  2804              CMP      r0,#4                 ;2461
00006a  d1e1              BNE      |L30.48|
                  |L30.108|
00006c  4668              MOV      r0,sp                 ;2464
00006e  f7fffffe          BL       dir_remove
000072  2800              CMP      r0,#0                 ;2465
000074  d1dc              BNE      |L30.48|
000076  b12c              CBZ      r4,|L30.132|
000078  4621              MOV      r1,r4                 ;2467
00007a  9800              LDR      r0,[sp,#0]            ;2467
00007c  f7fffffe          BL       remove_chain
000080  2800              CMP      r0,#0                 ;2467
000082  d1d5              BNE      |L30.48|
                  |L30.132|
000084  9800              LDR      r0,[sp,#0]            ;2468
000086  f7fffffe          BL       sync
00008a  e7d1              B        |L30.48|
                  |L30.140|
00008c  2007              MOVS     r0,#7                 ;2460
00008e  e7cf              B        |L30.48|
;;;2473   
                          ENDP


                          AREA ||i.f_utime||, CODE, READONLY, ALIGN=1

                  f_utime PROC
;;;2600   
;;;2601   FRESULT f_utime (
000000  b513              PUSH     {r0,r1,r4,lr}
;;;2602   	const XCHAR *path,	/* Pointer to the file/directory name */
;;;2603   	const FILINFO *fno	/* Pointer to the time-stamp to be set */
;;;2604   )
;;;2605   {
000002  b08a              SUB      sp,sp,#0x28
000004  460c              MOV      r4,r1
;;;2606   	FRESULT res;
;;;2607   	DIR dj;
;;;2608   	NAMEBUF(sfn, lfn);
;;;2609   	BYTE *dir;
;;;2610   
;;;2611   
;;;2612   	res = chk_mounted(&path, &dj.fs, 1);
000006  2201              MOVS     r2,#1
000008  4669              MOV      r1,sp
00000a  a80a              ADD      r0,sp,#0x28
00000c  f7fffffe          BL       chk_mounted
;;;2613   	if (res == FR_OK) {
000010  2800              CMP      r0,#0
000012  d119              BNE      |L31.72|
;;;2614   		INITBUF(dj, sfn, lfn);
000014  a807              ADD      r0,sp,#0x1c
;;;2615   		res = follow_path(&dj, path);	/* Follow the file path */
000016  9006              STR      r0,[sp,#0x18]
000018  4668              MOV      r0,sp
00001a  990a              LDR      r1,[sp,#0x28]
00001c  f7fffffe          BL       follow_path
;;;2616   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
;;;2617   			res = FR_INVALID_NAME;
;;;2618   		if (res == FR_OK) {
000020  2800              CMP      r0,#0
000022  d111              BNE      |L31.72|
;;;2619   			dir = dj.dir;
;;;2620   			if (!dir) {				/* Root directory */
000024  9805              LDR      r0,[sp,#0x14]
000026  b188              CBZ      r0,|L31.76|
;;;2621   				res = FR_INVALID_NAME;
;;;2622   			} else {				/* File or sub-directory */
;;;2623   				ST_WORD(dir+DIR_WrtTime, fno->ftime);
000028  79a1              LDRB     r1,[r4,#6]
00002a  7581              STRB     r1,[r0,#0x16]
00002c  88e1              LDRH     r1,[r4,#6]
00002e  0a09              LSRS     r1,r1,#8
000030  75c1              STRB     r1,[r0,#0x17]
;;;2624   				ST_WORD(dir+DIR_WrtDate, fno->fdate);
000032  7921              LDRB     r1,[r4,#4]
000034  7601              STRB     r1,[r0,#0x18]
000036  88a1              LDRH     r1,[r4,#4]
000038  0a09              LSRS     r1,r1,#8
00003a  7641              STRB     r1,[r0,#0x19]
;;;2625   				dj.fs->wflag = 1;
00003c  9900              LDR      r1,[sp,#0]
00003e  2001              MOVS     r0,#1
000040  7108              STRB     r0,[r1,#4]
;;;2626   				res = sync(dj.fs);
000042  9800              LDR      r0,[sp,#0]
000044  f7fffffe          BL       sync
                  |L31.72|
;;;2627   			}
;;;2628   		}
;;;2629   	}
;;;2630   
;;;2631   	LEAVE_FF(dj.fs, res);
;;;2632   }
000048  b00c              ADD      sp,sp,#0x30
00004a  bd10              POP      {r4,pc}
                  |L31.76|
00004c  2006              MOVS     r0,#6                 ;2621
00004e  e7fb              B        |L31.72|
;;;2633   
                          ENDP


                          AREA ||i.f_write||, CODE, READONLY, ALIGN=1

                  f_write PROC
;;;1857   
;;;1858   FRESULT f_write (
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1859   	FIL *fp,			/* Pointer to the file object */
;;;1860   	const void *buff,	/* Pointer to the data to be written */
;;;1861   	UINT btw,			/* Number of bytes to write */
;;;1862   	UINT *bw			/* Pointer to number of bytes written */
;;;1863   )
;;;1864   {
;;;1865   	FRESULT res;
;;;1866   	DWORD clst, sect;
;;;1867   	UINT wcnt, cc;
;;;1868   	const BYTE *wbuff = buff;
;;;1869   
;;;1870   
;;;1871   	*bw = 0;	/* Initialize bytes written */
000004  f04f0a00          MOV      r10,#0
000008  4688              MOV      r8,r1                 ;1868
;;;1872   
;;;1873   	res = validate(fp->fs, fp->id);					/* Check validity of the object */
00000a  f8c3a000          STR      r10,[r3,#0]
00000e  4604              MOV      r4,r0                 ;1864
000010  8881              LDRH     r1,[r0,#4]
000012  4699              MOV      r9,r3                 ;1864
000014  4616              MOV      r6,r2                 ;1864
000016  6800              LDR      r0,[r0,#0]
000018  f7fffffe          BL       validate
;;;1874   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00001c  2800              CMP      r0,#0
00001e  d103              BNE      |L32.40|
;;;1875   	if (fp->flag & FA__ERROR)						/* Check abort flag */
000020  79a0              LDRB     r0,[r4,#6]
000022  0601              LSLS     r1,r0,#24
000024  d502              BPL      |L32.44|
                  |L32.38|
;;;1876   		LEAVE_FF(fp->fs, FR_INT_ERR);
000026  2002              MOVS     r0,#2
                  |L32.40|
;;;1877   	if (!(fp->flag & FA_WRITE))						/* Check access mode */
;;;1878   		LEAVE_FF(fp->fs, FR_DENIED);
;;;1879   	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
;;;1880   
;;;1881   	for ( ;  btw;									/* Repeat until all data transferred */
;;;1882   		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
;;;1883   		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
;;;1884   			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
;;;1885   				if (fp->fptr == 0) {				/* On the top of the file? */
;;;1886   					clst = fp->org_clust;			/* Follow from the origin */
;;;1887   					if (clst == 0)					/* When there is no cluster chain, */
;;;1888   						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
;;;1889   				} else {							/* Middle or end of the file */
;;;1890   					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or stretch cluster chain */
;;;1891   				}
;;;1892   				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
;;;1893   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;1894   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;1895   				fp->curr_clust = clst;				/* Update current cluster */
;;;1896   				fp->csect = 0;						/* Reset sector address in the cluster */
;;;1897   			}
;;;1898   #if _FS_TINY
;;;1899   			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
;;;1900   				ABORT(fp->fs, FR_DISK_ERR);
;;;1901   #else
;;;1902   			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
;;;1903   				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
;;;1904   					ABORT(fp->fs, FR_DISK_ERR);
;;;1905   				fp->flag &= ~FA__DIRTY;
;;;1906   			}
;;;1907   #endif
;;;1908   			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
;;;1909   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;1910   			sect += fp->csect;
;;;1911   			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
;;;1912   			if (cc) {								/* Write maximum contiguous sectors directly */
;;;1913   				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;1914   					cc = fp->fs->csize - fp->csect;
;;;1915   				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
;;;1916   					ABORT(fp->fs, FR_DISK_ERR);
;;;1917   #if _FS_TINY
;;;1918   				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
;;;1919   					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;1920   					fp->fs->wflag = 0;
;;;1921   				}
;;;1922   #else
;;;1923   				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
;;;1924   					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;1925   					fp->flag &= ~FA__DIRTY;
;;;1926   				}
;;;1927   #endif
;;;1928   				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
;;;1929   				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
;;;1930   				continue;
;;;1931   			}
;;;1932   #if _FS_TINY
;;;1933   			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
;;;1934   				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
;;;1935   				fp->fs->winsect = sect;
;;;1936   			}
;;;1937   #else
;;;1938   			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
;;;1939   				if (fp->fptr < fp->fsize &&
;;;1940   					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
;;;1941   						ABORT(fp->fs, FR_DISK_ERR);
;;;1942   			}
;;;1943   #endif
;;;1944   			fp->dsect = sect;
;;;1945   			fp->csect++;							/* Next sector address in the cluster */
;;;1946   		}
;;;1947   		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
;;;1948   		if (wcnt > btw) wcnt = btw;
;;;1949   #if _FS_TINY
;;;1950   		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
;;;1951   			ABORT(fp->fs, FR_DISK_ERR);
;;;1952   		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;1953   		fp->fs->wflag = 1;
;;;1954   #else
;;;1955   		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;1956   		fp->flag |= FA__DIRTY;
;;;1957   #endif
;;;1958   	}
;;;1959   
;;;1960   	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
;;;1961   	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
;;;1962   
;;;1963   	LEAVE_FF(fp->fs, FR_OK);
;;;1964   }
000028  e8bd9ff0          POP      {r4-r12,pc}
                  |L32.44|
00002c  0780              LSLS     r0,r0,#30             ;1877
00002e  d401              BMI      |L32.52|
000030  2007              MOVS     r0,#7                 ;1878
000032  e7f9              B        |L32.40|
                  |L32.52|
000034  68e0              LDR      r0,[r4,#0xc]          ;1879
000036  f1040b24          ADD      r11,r4,#0x24          ;1903
00003a  1982              ADDS     r2,r0,r6              ;1879
00003c  4282              CMP      r2,r0                 ;1879
00003e  d366              BCC      |L32.270|
000040  e0a3              B        |L32.394|
                  |L32.66|
000042  6822              LDR      r2,[r4,#0]            ;1883
000044  68a0              LDR      r0,[r4,#8]            ;1883
000046  8951              LDRH     r1,[r2,#0xa]          ;1883
000048  fbb0f3f1          UDIV     r3,r0,r1              ;1883
00004c  fb010113          MLS      r1,r1,r3,r0           ;1883
000050  2900              CMP      r1,#0                 ;1883
000052  d17b              BNE      |L32.332|
000054  79e1              LDRB     r1,[r4,#7]            ;1884
000056  7893              LDRB     r3,[r2,#2]            ;1884
000058  4299              CMP      r1,r3                 ;1884
00005a  d30d              BCC      |L32.120|
00005c  b1c0              CBZ      r0,|L32.144|
00005e  4610              MOV      r0,r2                 ;1890
000060  6961              LDR      r1,[r4,#0x14]         ;1890
000062  f7fffffe          BL       create_chain
                  |L32.102|
000066  2800              CMP      r0,#0                 ;1892
000068  d051              BEQ      |L32.270|
                  |L32.106|
00006a  2801              CMP      r0,#1                 ;1893
00006c  d036              BEQ      |L32.220|
00006e  1c41              ADDS     r1,r0,#1              ;1894
000070  d061              BEQ      |L32.310|
000072  6160              STR      r0,[r4,#0x14]         ;1896
000074  f884a007          STRB     r10,[r4,#7]           ;1896
                  |L32.120|
000078  79a0              LDRB     r0,[r4,#6]            ;1902
00007a  0640              LSLS     r0,r0,#25             ;1902
00007c  d515              BPL      |L32.170|
00007e  6820              LDR      r0,[r4,#0]            ;1903
000080  2301              MOVS     r3,#1                 ;1903
000082  4659              MOV      r1,r11                ;1903
000084  7840              LDRB     r0,[r0,#1]            ;1903
000086  69a2              LDR      r2,[r4,#0x18]         ;1903
000088  f7fffffe          BL       disk_write
00008c  bbf0              CBNZ     r0,|L32.268|
00008e  e008              B        |L32.162|
                  |L32.144|
000090  6920              LDR      r0,[r4,#0x10]         ;1887
000092  2800              CMP      r0,#0                 ;1887
000094  d1e9              BNE      |L32.106|
000096  2100              MOVS     r1,#0                 ;1888
000098  4610              MOV      r0,r2                 ;1888
00009a  f7fffffe          BL       create_chain
00009e  6120              STR      r0,[r4,#0x10]         ;1888
0000a0  e7e1              B        |L32.102|
                  |L32.162|
0000a2  79a0              LDRB     r0,[r4,#6]            ;1905
0000a4  f0200040          BIC      r0,r0,#0x40           ;1905
0000a8  71a0              STRB     r0,[r4,#6]            ;1905
                  |L32.170|
0000aa  6961              LDR      r1,[r4,#0x14]         ;1908
0000ac  6820              LDR      r0,[r4,#0]            ;1908
0000ae  f7fffffe          BL       clust2sect
0000b2  b198              CBZ      r0,|L32.220|
0000b4  79e1              LDRB     r1,[r4,#7]            ;1910
0000b6  180f              ADDS     r7,r1,r0              ;1910
0000b8  6820              LDR      r0,[r4,#0]            ;1911
0000ba  8942              LDRH     r2,[r0,#0xa]          ;1911
0000bc  fbb6f5f2          UDIV     r5,r6,r2              ;1911
0000c0  b335              CBZ      r5,|L32.272|
0000c2  7882              LDRB     r2,[r0,#2]            ;1913
0000c4  194b              ADDS     r3,r1,r5              ;1913
0000c6  4293              CMP      r3,r2                 ;1913
0000c8  d900              BLS      |L32.204|
0000ca  1a55              SUBS     r5,r2,r1              ;1914
                  |L32.204|
0000cc  b2eb              UXTB     r3,r5                 ;1915
0000ce  7840              LDRB     r0,[r0,#1]            ;1915
0000d0  463a              MOV      r2,r7                 ;1915
0000d2  4641              MOV      r1,r8                 ;1915
0000d4  f7fffffe          BL       disk_write
0000d8  b9c0              CBNZ     r0,|L32.268|
0000da  e004              B        |L32.230|
                  |L32.220|
0000dc  79a0              LDRB     r0,[r4,#6]            ;1909
0000de  f0400080          ORR      r0,r0,#0x80           ;1909
0000e2  71a0              STRB     r0,[r4,#6]            ;1909
0000e4  e79f              B        |L32.38|
                  |L32.230|
0000e6  69a0              LDR      r0,[r4,#0x18]         ;1923
0000e8  1bc0              SUBS     r0,r0,r7              ;1923
0000ea  42a8              CMP      r0,r5                 ;1923
0000ec  d20a              BCS      |L32.260|
0000ee  6821              LDR      r1,[r4,#0]            ;1924
0000f0  894a              LDRH     r2,[r1,#0xa]          ;1924
0000f2  fb008102          MLA      r1,r0,r2,r8           ;1924
0000f6  4658              MOV      r0,r11                ;1924
0000f8  f7fffffe          BL       mem_cpy
0000fc  79a0              LDRB     r0,[r4,#6]            ;1925
0000fe  f0200040          BIC      r0,r0,#0x40           ;1925
000102  71a0              STRB     r0,[r4,#6]            ;1925
                  |L32.260|
000104  79e0              LDRB     r0,[r4,#7]            ;1928
000106  4428              ADD      r0,r0,r5              ;1928
000108  71e0              STRB     r0,[r4,#7]            ;1928
00010a  e002              B        |L32.274|
                  |L32.268|
00010c  e013              B        |L32.310|
                  |L32.270|
00010e  e03f              B        |L32.400|
                  |L32.272|
000110  e003              B        |L32.282|
                  |L32.274|
000112  6820              LDR      r0,[r4,#0]            ;1929
000114  8940              LDRH     r0,[r0,#0xa]          ;1929
000116  4345              MULS     r5,r0,r5              ;1929
000118  e02d              B        |L32.374|
                  |L32.282|
00011a  69a1              LDR      r1,[r4,#0x18]         ;1938
00011c  42b9              CMP      r1,r7                 ;1938
00011e  d011              BEQ      |L32.324|
000120  e9d41202          LDRD     r1,r2,[r4,#8]         ;1938
000124  4291              CMP      r1,r2                 ;1939
000126  d20d              BCS      |L32.324|
000128  7840              LDRB     r0,[r0,#1]            ;1940
00012a  2301              MOVS     r3,#1                 ;1940
00012c  463a              MOV      r2,r7                 ;1940
00012e  4659              MOV      r1,r11                ;1940
000130  f7fffffe          BL       disk_read
000134  b130              CBZ      r0,|L32.324|
                  |L32.310|
000136  79a0              LDRB     r0,[r4,#6]            ;1941
000138  f0400080          ORR      r0,r0,#0x80           ;1941
00013c  71a0              STRB     r0,[r4,#6]            ;1941
00013e  2001              MOVS     r0,#1                 ;1941
000140  e772              B        |L32.40|
000142  e003              B        |L32.332|
                  |L32.324|
000144  61a7              STR      r7,[r4,#0x18]         ;1945
000146  79e0              LDRB     r0,[r4,#7]            ;1945
000148  1c40              ADDS     r0,r0,#1              ;1945
00014a  71e0              STRB     r0,[r4,#7]            ;1945
                  |L32.332|
00014c  6820              LDR      r0,[r4,#0]            ;1947
00014e  68a1              LDR      r1,[r4,#8]            ;1947
000150  8940              LDRH     r0,[r0,#0xa]          ;1947
000152  fbb1f2f0          UDIV     r2,r1,r0              ;1947
000156  fb001112          MLS      r1,r0,r2,r1           ;1947
00015a  1a45              SUBS     r5,r0,r1              ;1947
00015c  42b5              CMP      r5,r6                 ;1948
00015e  d900              BLS      |L32.354|
000160  4635              MOV      r5,r6                 ;1948
                  |L32.354|
000162  1908              ADDS     r0,r1,r4              ;1955
000164  3024              ADDS     r0,r0,#0x24           ;1955
000166  462a              MOV      r2,r5                 ;1955
000168  4641              MOV      r1,r8                 ;1955
00016a  f7fffffe          BL       mem_cpy
00016e  79a0              LDRB     r0,[r4,#6]            ;1956
000170  f0400040          ORR      r0,r0,#0x40           ;1956
000174  71a0              STRB     r0,[r4,#6]            ;1956
                  |L32.374|
000176  68a0              LDR      r0,[r4,#8]            ;1882
000178  44a8              ADD      r8,r8,r5              ;1882
00017a  4428              ADD      r0,r0,r5              ;1882
00017c  60a0              STR      r0,[r4,#8]            ;1882
00017e  f8d90000          LDR      r0,[r9,#0]            ;1882
000182  1941              ADDS     r1,r0,r5              ;1882
000184  1b76              SUBS     r6,r6,r5              ;1882
000186  f8c91000          STR      r1,[r9,#0]            ;1882
                  |L32.394|
00018a  2e00              CMP      r6,#0                 ;1881
00018c  f47faf59          BNE      |L32.66|
                  |L32.400|
000190  e9d40102          LDRD     r0,r1,[r4,#8]         ;1881
000194  4288              CMP      r0,r1                 ;1960
000196  d900              BLS      |L32.410|
000198  60e0              STR      r0,[r4,#0xc]          ;1960
                  |L32.410|
00019a  79a0              LDRB     r0,[r4,#6]            ;1961
00019c  f0400020          ORR      r0,r0,#0x20           ;1961
0001a0  71a0              STRB     r0,[r4,#6]            ;1961
0001a2  2000              MOVS     r0,#0                 ;1963
0001a4  e740              B        |L32.40|
;;;1965   
                          ENDP


                          AREA ||i.follow_path||, CODE, READONLY, ALIGN=1

                  follow_path PROC
;;;1381   static
;;;1382   FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;1383   	DIR *dj,			/* Directory object to return last directory and found object */
;;;1384   	const XCHAR *path	/* Full-path string to find a file or directory */
;;;1385   )
;;;1386   {
000002  4604              MOV      r4,r0
000004  9801              LDR      r0,[sp,#4]
000006  e001              B        |L33.12|
                  |L33.8|
;;;1387   	FRESULT res;
;;;1388   	BYTE *dir, last;
;;;1389   
;;;1390   	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
000008  1c40              ADDS     r0,r0,#1
00000a  9001              STR      r0,[sp,#4]
                  |L33.12|
00000c  7801              LDRB     r1,[r0,#0]
00000e  2920              CMP      r1,#0x20
000010  d0fa              BEQ      |L33.8|
;;;1391   #if _FS_RPATH
;;;1392   	if (*path == '/' || *path == '\\') { /* There is a heading separator */
;;;1393   		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
;;;1394   	} else {							/* No heading separator */
;;;1395   		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
;;;1396   	}
;;;1397   #else
;;;1398   	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
000012  7801              LDRB     r1,[r0,#0]
000014  292f              CMP      r1,#0x2f
000016  d001              BEQ      |L33.28|
000018  295c              CMP      r1,#0x5c
00001a  d101              BNE      |L33.32|
                  |L33.28|
;;;1399   		path++;
00001c  1c40              ADDS     r0,r0,#1
00001e  9001              STR      r0,[sp,#4]
                  |L33.32|
;;;1400   	dj->sclust = 0;						/* Start from the root dir */
000020  2500              MOVS     r5,#0
;;;1401   #endif
;;;1402   
;;;1403   	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
000022  60a5              STR      r5,[r4,#8]
000024  9801              LDR      r0,[sp,#4]
000026  7800              LDRB     r0,[r0,#0]
000028  2820              CMP      r0,#0x20
00002a  d205              BCS      |L33.56|
;;;1404   		res = dir_seek(dj, 0);
00002c  2100              MOVS     r1,#0
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       dir_seek
;;;1405   		dj->dir = NULL;
000034  6165              STR      r5,[r4,#0x14]
                  |L33.54|
;;;1406   
;;;1407   	} else {							/* Follow path */
;;;1408   		for (;;) {
;;;1409   			res = create_name(dj, &path);	/* Get a segment */
;;;1410   			if (res != FR_OK) break;
;;;1411   			res = dir_find(dj);				/* Find it */
;;;1412   			last = *(dj->fn+NS) & NS_LAST;
;;;1413   			if (res != FR_OK) {				/* Could not find the object */
;;;1414   				if (res == FR_NO_FILE && !last)
;;;1415   					res = FR_NO_PATH;
;;;1416   				break;
;;;1417   			}
;;;1418   			if (last) break;				/* Last segment match. Function completed. */
;;;1419   			dir = dj->dir;					/* There is next segment. Follow the sub directory */
;;;1420   			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
;;;1421   				res = FR_NO_PATH; break;
;;;1422   			}
;;;1423   			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
;;;1424   		}
;;;1425   	}
;;;1426   
;;;1427   	return res;
;;;1428   }
000036  bd7c              POP      {r2-r6,pc}
                  |L33.56|
000038  a901              ADD      r1,sp,#4              ;1409
00003a  4620              MOV      r0,r4                 ;1409
00003c  f7fffffe          BL       create_name
000040  2800              CMP      r0,#0                 ;1410
000042  d1f8              BNE      |L33.54|
000044  2100              MOVS     r1,#0                 ;1410
000046  4620              MOV      r0,r4                 ;1410
000048  f7fffffe          BL       dir_seek
00004c  b9f8              CBNZ     r0,|L33.142|
                  |L33.78|
00004e  6921              LDR      r1,[r4,#0x10]         ;1410
000050  6820              LDR      r0,[r4,#0]            ;1410
000052  f7fffffe          BL       move_window
000056  b9d0              CBNZ     r0,|L33.142|
000058  6961              LDR      r1,[r4,#0x14]         ;1410
00005a  780a              LDRB     r2,[r1,#0]            ;1410
00005c  b172              CBZ      r2,|L33.124|
00005e  7aca              LDRB     r2,[r1,#0xb]          ;1410
000060  0712              LSLS     r2,r2,#28             ;1410
000062  d40e              BMI      |L33.130|
000064  230b              MOVS     r3,#0xb               ;1410
000066  69a2              LDR      r2,[r4,#0x18]         ;1410
000068  2500              MOVS     r5,#0                 ;1410
                  |L33.106|
00006a  1e5b              SUBS     r3,r3,#1              ;1410
00006c  d308              BCC      |L33.128|
00006e  f8115b01          LDRB     r5,[r1],#1            ;1410
000072  f8126b01          LDRB     r6,[r2],#1            ;1410
000076  1bad              SUBS     r5,r5,r6              ;1410
000078  d0f7              BEQ      |L33.106|
00007a  e002              B        |L33.130|
                  |L33.124|
00007c  2004              MOVS     r0,#4                 ;1410
00007e  e006              B        |L33.142|
                  |L33.128|
000080  b12d              CBZ      r5,|L33.142|
                  |L33.130|
000082  2100              MOVS     r1,#0                 ;1410
000084  4620              MOV      r0,r4                 ;1410
000086  f7fffffe          BL       dir_next
00008a  2800              CMP      r0,#0                 ;1410
00008c  d0df              BEQ      |L33.78|
                  |L33.142|
00008e  69a1              LDR      r1,[r4,#0x18]         ;1412
000090  7ac9              LDRB     r1,[r1,#0xb]          ;1412
000092  f0010104          AND      r1,r1,#4              ;1412
000096  b128              CBZ      r0,|L33.164|
000098  2804              CMP      r0,#4                 ;1414
00009a  d1cc              BNE      |L33.54|
00009c  2900              CMP      r1,#0                 ;1414
00009e  d1ca              BNE      |L33.54|
                  |L33.160|
0000a0  2005              MOVS     r0,#5                 ;1415
                  |L33.162|
0000a2  bd7c              POP      {r2-r6,pc}
                  |L33.164|
0000a4  2900              CMP      r1,#0                 ;1418
0000a6  d1fc              BNE      |L33.162|
0000a8  6960              LDR      r0,[r4,#0x14]         ;1420
0000aa  7ac1              LDRB     r1,[r0,#0xb]          ;1420
0000ac  06c9              LSLS     r1,r1,#27             ;1420
0000ae  d5f7              BPL      |L33.160|
0000b0  8a81              LDRH     r1,[r0,#0x14]         ;1423
0000b2  8b40              LDRH     r0,[r0,#0x1a]         ;1423
0000b4  f361401f          BFI      r0,r1,#16,#16         ;1423
0000b8  60a0              STR      r0,[r4,#8]            ;1423
0000ba  e7bd              B        |L33.56|
;;;1429   
                          ENDP


                          AREA ||i.get_fat||, CODE, READONLY, ALIGN=1

                  get_fat PROC
;;;323    
;;;324    DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;325    	FATFS *fs,	/* File system object */
;;;326    	DWORD clst	/* Cluster# to get the link information */
;;;327    )
;;;328    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;329    	UINT wc, bc;
;;;330    	DWORD fsect;
;;;331    
;;;332    
;;;333    	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
000008  2902              CMP      r1,#2
00000a  d302              BCC      |L34.18|
00000c  69e0              LDR      r0,[r4,#0x1c]
00000e  42a8              CMP      r0,r5
000010  d802              BHI      |L34.24|
                  |L34.18|
;;;334    		return 1;
000012  2001              MOVS     r0,#1
                  |L34.20|
;;;335    
;;;336    	fsect = fs->fatbase;
;;;337    	switch (fs->fs_type) {
;;;338    	case FS_FAT12 :
;;;339    		bc = clst; bc += bc / 2;
;;;340    		if (move_window(fs, fsect + (bc / SS(fs)))) break;
;;;341    		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
;;;342    		if (move_window(fs, fsect + (bc / SS(fs)))) break;
;;;343    		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
;;;344    		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
;;;345    
;;;346    	case FS_FAT16 :
;;;347    		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
;;;348    		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
;;;349    
;;;350    	case FS_FAT32 :
;;;351    		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
;;;352    		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
;;;353    	}
;;;354    
;;;355    	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
;;;356    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L34.24|
000018  7820              LDRB     r0,[r4,#0]            ;337
00001a  6a26              LDR      r6,[r4,#0x20]         ;337
00001c  2801              CMP      r0,#1                 ;337
00001e  d005              BEQ      |L34.44|
000020  b2af              UXTH     r7,r5                 ;348
000022  2802              CMP      r0,#2                 ;337
000024  d029              BEQ      |L34.122|
000026  2803              CMP      r0,#3                 ;337
000028  d140              BNE      |L34.172|
00002a  e036              B        |L34.154|
                  |L34.44|
00002c  8960              LDRH     r0,[r4,#0xa]          ;340
00002e  eb050755          ADD      r7,r5,r5,LSR #1       ;339
000032  fbb7f0f0          UDIV     r0,r7,r0              ;340
000036  1981              ADDS     r1,r0,r6              ;340
000038  4620              MOV      r0,r4                 ;340
00003a  f7fffffe          BL       move_window
00003e  bba8              CBNZ     r0,|L34.172|
000040  8960              LDRH     r0,[r4,#0xa]          ;341
000042  1e41              SUBS     r1,r0,#1              ;341
000044  4039              ANDS     r1,r1,r7              ;341
000046  1c7f              ADDS     r7,r7,#1              ;341
000048  fbb7f0f0          UDIV     r0,r7,r0              ;342
00004c  4421              ADD      r1,r1,r4              ;341
00004e  f8918030          LDRB     r8,[r1,#0x30]         ;341
000052  1981              ADDS     r1,r0,r6              ;342
000054  4620              MOV      r0,r4                 ;342
000056  f7fffffe          BL       move_window
00005a  bb38              CBNZ     r0,|L34.172|
00005c  8960              LDRH     r0,[r4,#0xa]          ;343
00005e  1e40              SUBS     r0,r0,#1              ;343
000060  4038              ANDS     r0,r0,r7              ;343
000062  4420              ADD      r0,r0,r4              ;343
000064  f8901030          LDRB     r1,[r0,#0x30]         ;343
000068  ea482001          ORR      r0,r8,r1,LSL #8       ;343
00006c  07e9              LSLS     r1,r5,#31             ;344
00006e  d001              BEQ      |L34.116|
000070  0900              LSRS     r0,r0,#4              ;344
000072  e7cf              B        |L34.20|
                  |L34.116|
000074  f3c0000b          UBFX     r0,r0,#0,#12          ;344
000078  e7cc              B        |L34.20|
                  |L34.122|
00007a  8960              LDRH     r0,[r4,#0xa]          ;347
00007c  0840              LSRS     r0,r0,#1              ;347
00007e  fbb1f0f0          UDIV     r0,r1,r0              ;347
000082  1981              ADDS     r1,r0,r6              ;347
000084  4620              MOV      r0,r4                 ;347
000086  f7fffffe          BL       move_window
00008a  b978              CBNZ     r0,|L34.172|
00008c  8960              LDRH     r0,[r4,#0xa]          ;348
00008e  1e40              SUBS     r0,r0,#1              ;348
000090  ea000047          AND      r0,r0,r7,LSL #1       ;348
000094  4420              ADD      r0,r0,r4              ;348
000096  8e00              LDRH     r0,[r0,#0x30]         ;348
000098  e7bc              B        |L34.20|
                  |L34.154|
00009a  8960              LDRH     r0,[r4,#0xa]          ;351
00009c  0880              LSRS     r0,r0,#2              ;351
00009e  fbb1f0f0          UDIV     r0,r1,r0              ;351
0000a2  1981              ADDS     r1,r0,r6              ;351
0000a4  4620              MOV      r0,r4                 ;351
0000a6  f7fffffe          BL       move_window
0000aa  b110              CBZ      r0,|L34.178|
                  |L34.172|
0000ac  f04f30ff          MOV      r0,#0xffffffff        ;355
0000b0  e7b0              B        |L34.20|
                  |L34.178|
0000b2  8960              LDRH     r0,[r4,#0xa]          ;352
0000b4  1e40              SUBS     r0,r0,#1              ;352
0000b6  ea000087          AND      r0,r0,r7,LSL #2       ;352
0000ba  4420              ADD      r0,r0,r4              ;352
0000bc  f8901030          LDRB     r1,[r0,#0x30]         ;352
0000c0  f8d00031          LDR      r0,[r0,#0x31]         ;352
0000c4  ea412000          ORR      r0,r1,r0,LSL #8       ;352
0000c8  f0204070          BIC      r0,r0,#0xf0000000     ;352
0000cc  e7a2              B        |L34.20|
;;;357    
                          ENDP


                          AREA ||i.get_fileinfo||, CODE, READONLY, ALIGN=1

                  get_fileinfo PROC
;;;1311   static
;;;1312   void get_fileinfo (		/* No return code */
000000  b510              PUSH     {r4,lr}
;;;1313   	DIR *dj,			/* Pointer to the directory object */
;;;1314   	FILINFO *fno	 	/* Pointer to the file information to be filled */
;;;1315   )
;;;1316   {
000002  6903              LDR      r3,[r0,#0x10]
;;;1317   	int i;
;;;1318   	BYTE c, nt, *dir;
;;;1319   	char *p;
;;;1320   
;;;1321   
;;;1322   	p = fno->fname;
000004  f1010209          ADD      r2,r1,#9
000008  b33b              CBZ      r3,|L35.90|
;;;1323   	if (dj->sect) {
;;;1324   		dir = dj->dir;
00000a  6940              LDR      r0,[r0,#0x14]
;;;1325   		nt = dir[DIR_NTres];		/* NT flag */
;;;1326   		for (i = 0; i < 8; i++) {	/* Copy name body */
00000c  2400              MOVS     r4,#0
                  |L35.14|
;;;1327   			c = dir[i];
00000e  5d03              LDRB     r3,[r0,r4]
;;;1328   			if (c == ' ') break;
000010  2b20              CMP      r3,#0x20
000012  d007              BEQ      |L35.36|
;;;1329   			if (c == 0x05) c = 0xE5;
000014  2b05              CMP      r3,#5
000016  d100              BNE      |L35.26|
000018  23e5              MOVS     r3,#0xe5
                  |L35.26|
00001a  1c64              ADDS     r4,r4,#1              ;1326
;;;1330   			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
;;;1331   			*p++ = c;
00001c  f8023b01          STRB     r3,[r2],#1
000020  2c08              CMP      r4,#8                 ;1326
000022  dbf4              BLT      |L35.14|
                  |L35.36|
;;;1332   		}
;;;1333   		if (dir[8] != ' ') {		/* Copy name extension */
000024  7a03              LDRB     r3,[r0,#8]
000026  2b20              CMP      r3,#0x20
000028  d00b              BEQ      |L35.66|
;;;1334   			*p++ = '.';
00002a  232e              MOVS     r3,#0x2e
00002c  f8023b01          STRB     r3,[r2],#1
;;;1335   			for (i = 8; i < 11; i++) {
000030  2308              MOVS     r3,#8
                  |L35.50|
;;;1336   				c = dir[i];
000032  5cc4              LDRB     r4,[r0,r3]
;;;1337   				if (c == ' ') break;
000034  2c20              CMP      r4,#0x20
000036  d004              BEQ      |L35.66|
000038  1c5b              ADDS     r3,r3,#1              ;1335
;;;1338   				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
;;;1339   				*p++ = c;
00003a  f8024b01          STRB     r4,[r2],#1
00003e  2b0b              CMP      r3,#0xb               ;1335
000040  dbf7              BLT      |L35.50|
                  |L35.66|
;;;1340   			}
;;;1341   		}
;;;1342   		fno->fattrib = dir[DIR_Attr];				/* Attribute */
000042  7ac3              LDRB     r3,[r0,#0xb]
000044  720b              STRB     r3,[r1,#8]
;;;1343   		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
000046  7f03              LDRB     r3,[r0,#0x1c]
000048  f8d0401d          LDR      r4,[r0,#0x1d]
00004c  ea432304          ORR      r3,r3,r4,LSL #8
;;;1344   		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
000050  600b              STR      r3,[r1,#0]
000052  8b03              LDRH     r3,[r0,#0x18]
000054  808b              STRH     r3,[r1,#4]
;;;1345   		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
000056  8ac0              LDRH     r0,[r0,#0x16]
000058  80c8              STRH     r0,[r1,#6]
                  |L35.90|
;;;1346   	}
;;;1347   	*p = 0;
00005a  2000              MOVS     r0,#0
00005c  7010              STRB     r0,[r2,#0]
;;;1348   
;;;1349   #if _USE_LFN
;;;1350   	if (fno->lfname) {
;;;1351   		XCHAR *tp = fno->lfname;
;;;1352   		WCHAR w, *lfn;
;;;1353   
;;;1354   		i = 0;
;;;1355   		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
;;;1356   			lfn = dj->lfn;
;;;1357   			while ((w = *lfn++) != 0) {			/* Get an LFN char */
;;;1358   #if !_LFN_UNICODE
;;;1359   				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
;;;1360   				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
;;;1361   				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC */
;;;1362   					tp[i++] = (XCHAR)(w >> 8);
;;;1363   #endif
;;;1364   				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overrun, no LFN */
;;;1365   				tp[i++] = (XCHAR)w;
;;;1366   			}
;;;1367   		}
;;;1368   		tp[i] = 0;	/* Terminator */
;;;1369   	}
;;;1370   #endif
;;;1371   }
00005e  bd10              POP      {r4,pc}
;;;1372   #endif /* _FS_MINIMIZE <= 1 */
                          ENDP


                          AREA ||i.mem_cpy||, CODE, READONLY, ALIGN=1

                  mem_cpy PROC
;;;176    static
;;;177    void mem_cpy (void* dst, const void* src, int cnt) {
000000  e003              B        |L36.10|
                  |L36.2|
;;;178    	char *d = (char*)dst;
;;;179    	const char *s = (const char *)src;
;;;180    	while (cnt--) *d++ = *s++;
000002  f8113b01          LDRB     r3,[r1],#1
000006  f8003b01          STRB     r3,[r0],#1
                  |L36.10|
00000a  1e52              SUBS     r2,r2,#1
00000c  d2f9              BCS      |L36.2|
;;;181    }
00000e  4770              BX       lr
;;;182    
                          ENDP


                          AREA ||i.mem_set||, CODE, READONLY, ALIGN=1

                  mem_set PROC
;;;184    static
;;;185    void mem_set (void* dst, int val, int cnt) {
000000  b2c9              UXTB     r1,r1
000002  e001              B        |L37.8|
                  |L37.4|
;;;186    	char *d = (char*)dst;
;;;187    	while (cnt--) *d++ = (char)val;
000004  f8001b01          STRB     r1,[r0],#1
                  |L37.8|
000008  1e52              SUBS     r2,r2,#1
00000a  d2fb              BCS      |L37.4|
;;;188    }
00000c  4770              BX       lr
;;;189    
                          ENDP


                          AREA ||i.move_window||, CODE, READONLY, ALIGN=1

                  move_window PROC
;;;243    static
;;;244    FRESULT move_window (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;245    	FATFS *fs,		/* File system object */
;;;246    	DWORD sector	/* Sector number to make appearance in the fs->win[] */
;;;247    )					/* Move to zero only writes back dirty window */
;;;248    {
;;;249    	DWORD wsect;
;;;250    
;;;251    
;;;252    	wsect = fs->winsect;
;;;253    	if (wsect != sector) {	/* Changed current window */
000004  6ac5              LDR      r5,[r0,#0x2c]
000006  460f              MOV      r7,r1                 ;248
000008  4604              MOV      r4,r0                 ;248
00000a  42bd              CMP      r5,r7
00000c  d02b              BEQ      |L38.102|
;;;254    #if !_FS_READONLY
;;;255    		if (fs->wflag) {	/* Write back dirty window if needed */
00000e  7921              LDRB     r1,[r4,#4]
;;;256    			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
000010  f1040830          ADD      r8,r4,#0x30
000014  b1d9              CBZ      r1,|L38.78|
000016  7860              LDRB     r0,[r4,#1]
000018  2301              MOVS     r3,#1
00001a  462a              MOV      r2,r5
00001c  4641              MOV      r1,r8
00001e  f7fffffe          BL       disk_write
000022  b9e0              CBNZ     r0,|L38.94|
;;;257    				return FR_DISK_ERR;
;;;258    			fs->wflag = 0;
000024  2000              MOVS     r0,#0
000026  7120              STRB     r0,[r4,#4]
;;;259    			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
000028  69a1              LDR      r1,[r4,#0x18]
00002a  6a20              LDR      r0,[r4,#0x20]
00002c  4408              ADD      r0,r0,r1
00002e  42a8              CMP      r0,r5
000030  d90d              BLS      |L38.78|
;;;260    				BYTE nf;
;;;261    				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
000032  78e6              LDRB     r6,[r4,#3]
000034  e009              B        |L38.74|
                  |L38.54|
;;;262    					wsect += fs->sects_fat;
000036  69a0              LDR      r0,[r4,#0x18]
;;;263    					disk_write(fs->drive, fs->win, wsect, 1);
000038  2301              MOVS     r3,#1
00003a  4405              ADD      r5,r5,r0              ;262
00003c  7860              LDRB     r0,[r4,#1]
00003e  462a              MOV      r2,r5
000040  4641              MOV      r1,r8
000042  f7fffffe          BL       disk_write
000046  1e76              SUBS     r6,r6,#1              ;261
000048  b2f6              UXTB     r6,r6                 ;261
                  |L38.74|
00004a  2e01              CMP      r6,#1                 ;261
00004c  d8f3              BHI      |L38.54|
                  |L38.78|
;;;264    				}
;;;265    			}
;;;266    		}
;;;267    #endif
;;;268    		if (sector) {
00004e  b157              CBZ      r7,|L38.102|
;;;269    			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
000050  7860              LDRB     r0,[r4,#1]
000052  2301              MOVS     r3,#1
000054  463a              MOV      r2,r7
000056  4641              MOV      r1,r8
000058  f7fffffe          BL       disk_read
00005c  b110              CBZ      r0,|L38.100|
                  |L38.94|
;;;270    				return FR_DISK_ERR;
00005e  2001              MOVS     r0,#1
                  |L38.96|
;;;271    			fs->winsect = sector;
;;;272    		}
;;;273    	}
;;;274    
;;;275    	return FR_OK;
;;;276    }
000060  e8bd81f0          POP      {r4-r8,pc}
                  |L38.100|
000064  62e7              STR      r7,[r4,#0x2c]         ;271
                  |L38.102|
000066  2000              MOVS     r0,#0                 ;275
000068  e7fa              B        |L38.96|
;;;277    
                          ENDP


                          AREA ||i.put_fat||, CODE, READONLY, ALIGN=1

                  put_fat PROC
;;;365    
;;;366    FRESULT put_fat (
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;367    	FATFS *fs,	/* File system object */
;;;368    	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
;;;369    	DWORD val	/* New value to mark the cluster */
;;;370    )
;;;371    {
000004  4617              MOV      r7,r2
000006  460d              MOV      r5,r1
000008  4604              MOV      r4,r0
;;;372    	UINT bc;
;;;373    	BYTE *p;
;;;374    	DWORD fsect;
;;;375    	FRESULT res;
;;;376    
;;;377    
;;;378    	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
00000a  2902              CMP      r1,#2
00000c  d302              BCC      |L39.20|
00000e  69e0              LDR      r0,[r4,#0x1c]
000010  42a8              CMP      r0,r5
000012  d802              BHI      |L39.26|
                  |L39.20|
;;;379    		res = FR_INT_ERR;
000014  2002              MOVS     r0,#2
                  |L39.22|
;;;380    
;;;381    	} else {
;;;382    		fsect = fs->fatbase;
;;;383    		switch (fs->fs_type) {
;;;384    		case FS_FAT12 :
;;;385    			bc = clst; bc += bc / 2;
;;;386    			res = move_window(fs, fsect + (bc / SS(fs)));
;;;387    			if (res != FR_OK) break;
;;;388    			p = &fs->win[bc & (SS(fs) - 1)];
;;;389    			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
;;;390    			bc++;
;;;391    			fs->wflag = 1;
;;;392    			res = move_window(fs, fsect + (bc / SS(fs)));
;;;393    			if (res != FR_OK) break;
;;;394    			p = &fs->win[bc & (SS(fs) - 1)];
;;;395    			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
;;;396    			break;
;;;397    
;;;398    		case FS_FAT16 :
;;;399    			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
;;;400    			if (res != FR_OK) break;
;;;401    			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
;;;402    			break;
;;;403    
;;;404    		case FS_FAT32 :
;;;405    			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
;;;406    			if (res != FR_OK) break;
;;;407    			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
;;;408    			break;
;;;409    
;;;410    		default :
;;;411    			res = FR_INT_ERR;
;;;412    		}
;;;413    		fs->wflag = 1;
;;;414    	}
;;;415    
;;;416    	return res;
;;;417    }
000016  e8bd9ff0          POP      {r4-r12,pc}
                  |L39.26|
00001a  7820              LDRB     r0,[r4,#0]            ;383
00001c  f8d48020          LDR      r8,[r4,#0x20]         ;383
000020  f00709ff          AND      r9,r7,#0xff           ;389
000024  f04f0b01          MOV      r11,#1                ;383
000028  2801              CMP      r0,#1                 ;383
00002a  d00a              BEQ      |L39.66|
00002c  f3c72a07          UBFX     r10,r7,#8,#8          ;401
000030  b2ae              UXTH     r6,r5                 ;401
000032  2802              CMP      r0,#2                 ;383
000034  d03b              BEQ      |L39.174|
000036  2803              CMP      r0,#3                 ;383
000038  d052              BEQ      |L39.224|
00003a  2002              MOVS     r0,#2                 ;411
                  |L39.60|
00003c  f884b004          STRB     r11,[r4,#4]           ;413
000040  e7e9              B        |L39.22|
                  |L39.66|
000042  8960              LDRH     r0,[r4,#0xa]          ;386
000044  eb050655          ADD      r6,r5,r5,LSR #1       ;385
000048  fbb6f1f0          UDIV     r1,r6,r0              ;386
00004c  4441              ADD      r1,r1,r8              ;386
00004e  4620              MOV      r0,r4                 ;386
000050  f7fffffe          BL       move_window
000054  2800              CMP      r0,#0                 ;387
000056  d1f1              BNE      |L39.60|
000058  8960              LDRH     r0,[r4,#0xa]          ;388
00005a  1e40              SUBS     r0,r0,#1              ;388
00005c  4030              ANDS     r0,r0,r6              ;388
00005e  4420              ADD      r0,r0,r4              ;388
000060  3030              ADDS     r0,r0,#0x30           ;388
000062  07e9              LSLS     r1,r5,#31             ;389
000064  d003              BEQ      |L39.110|
000066  7801              LDRB     r1,[r0,#0]            ;389
000068  f369111f          BFI      r1,r9,#4,#28          ;389
00006c  e000              B        |L39.112|
                  |L39.110|
00006e  4639              MOV      r1,r7                 ;389
                  |L39.112|
000070  7001              STRB     r1,[r0,#0]            ;389
000072  f884b004          STRB     r11,[r4,#4]           ;391
000076  8960              LDRH     r0,[r4,#0xa]          ;392
000078  1c76              ADDS     r6,r6,#1              ;390
00007a  fbb6f1f0          UDIV     r1,r6,r0              ;392
00007e  4441              ADD      r1,r1,r8              ;392
000080  4620              MOV      r0,r4                 ;392
000082  f7fffffe          BL       move_window
000086  2800              CMP      r0,#0                 ;393
000088  d1d8              BNE      |L39.60|
00008a  8961              LDRH     r1,[r4,#0xa]          ;394
00008c  1e49              SUBS     r1,r1,#1              ;394
00008e  4031              ANDS     r1,r1,r6              ;394
000090  4421              ADD      r1,r1,r4              ;394
000092  3130              ADDS     r1,r1,#0x30           ;394
000094  07ea              LSLS     r2,r5,#31             ;395
000096  d002              BEQ      |L39.158|
000098  f3c71207          UBFX     r2,r7,#4,#8           ;395
00009c  e005              B        |L39.170|
                  |L39.158|
00009e  780a              LDRB     r2,[r1,#0]            ;395
0000a0  f3c72303          UBFX     r3,r7,#8,#4           ;395
0000a4  f00202f0          AND      r2,r2,#0xf0           ;395
0000a8  431a              ORRS     r2,r2,r3              ;395
                  |L39.170|
0000aa  700a              STRB     r2,[r1,#0]            ;395
0000ac  e7c6              B        |L39.60|
                  |L39.174|
0000ae  8960              LDRH     r0,[r4,#0xa]          ;399
0000b0  0840              LSRS     r0,r0,#1              ;399
0000b2  fbb5f1f0          UDIV     r1,r5,r0              ;399
0000b6  4441              ADD      r1,r1,r8              ;399
0000b8  4620              MOV      r0,r4                 ;399
0000ba  f7fffffe          BL       move_window
0000be  2800              CMP      r0,#0                 ;400
0000c0  d1bc              BNE      |L39.60|
0000c2  8961              LDRH     r1,[r4,#0xa]          ;401
0000c4  1e49              SUBS     r1,r1,#1              ;401
0000c6  ea010146          AND      r1,r1,r6,LSL #1       ;401
0000ca  4421              ADD      r1,r1,r4              ;401
0000cc  f8819030          STRB     r9,[r1,#0x30]         ;401
0000d0  8961              LDRH     r1,[r4,#0xa]          ;401
0000d2  1e49              SUBS     r1,r1,#1              ;401
0000d4  ea010146          AND      r1,r1,r6,LSL #1       ;401
0000d8  4421              ADD      r1,r1,r4              ;401
0000da  f881a031          STRB     r10,[r1,#0x31]        ;401
0000de  e7ad              B        |L39.60|
                  |L39.224|
0000e0  8960              LDRH     r0,[r4,#0xa]          ;405
0000e2  0880              LSRS     r0,r0,#2              ;405
0000e4  fbb5f1f0          UDIV     r1,r5,r0              ;405
0000e8  4441              ADD      r1,r1,r8              ;405
0000ea  4620              MOV      r0,r4                 ;405
0000ec  f7fffffe          BL       move_window
0000f0  2800              CMP      r0,#0                 ;406
0000f2  d1a3              BNE      |L39.60|
0000f4  8962              LDRH     r2,[r4,#0xa]          ;407
0000f6  1e52              SUBS     r2,r2,#1              ;407
0000f8  ea020286          AND      r2,r2,r6,LSL #2       ;407
0000fc  4422              ADD      r2,r2,r4              ;407
0000fe  f8829030          STRB     r9,[r2,#0x30]         ;407
000102  8962              LDRH     r2,[r4,#0xa]          ;407
000104  1e52              SUBS     r2,r2,#1              ;407
000106  ea020286          AND      r2,r2,r6,LSL #2       ;407
00010a  4422              ADD      r2,r2,r4              ;407
00010c  f882a031          STRB     r10,[r2,#0x31]        ;407
000110  8961              LDRH     r1,[r4,#0xa]          ;407
000112  0c3a              LSRS     r2,r7,#16             ;407
000114  1e49              SUBS     r1,r1,#1              ;407
000116  ea010186          AND      r1,r1,r6,LSL #2       ;407
00011a  4421              ADD      r1,r1,r4              ;407
00011c  f8812032          STRB     r2,[r1,#0x32]         ;407
000120  8961              LDRH     r1,[r4,#0xa]          ;407
000122  0e3a              LSRS     r2,r7,#24             ;407
000124  1e49              SUBS     r1,r1,#1              ;407
000126  ea010186          AND      r1,r1,r6,LSL #2       ;407
00012a  4421              ADD      r1,r1,r4              ;407
00012c  f8812033          STRB     r2,[r1,#0x33]         ;407
000130  e784              B        |L39.60|
;;;418    #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.remove_chain||, CODE, READONLY, ALIGN=1

                  remove_chain PROC
;;;427    static
;;;428    FRESULT remove_chain (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;429    	FATFS *fs,			/* File system object */
;;;430    	DWORD clst			/* Cluster# to remove a chain from */
;;;431    )
;;;432    {
000004  460f              MOV      r7,r1
000006  4605              MOV      r5,r0
;;;433    	FRESULT res;
;;;434    	DWORD nxt;
;;;435    
;;;436    
;;;437    	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
000008  2902              CMP      r1,#2
00000a  d318              BCC      |L40.62|
00000c  69e8              LDR      r0,[r5,#0x1c]
00000e  42b8              CMP      r0,r7
000010  d915              BLS      |L40.62|
;;;438    		res = FR_INT_ERR;
;;;439    
;;;440    	} else {
;;;441    		res = FR_OK;
000012  2600              MOVS     r6,#0
000014  f04f0801          MOV      r8,#1                 ;434
;;;442    		while (clst < fs->max_clust) {			/* Not a last link? */
000018  e01d              B        |L40.86|
                  |L40.26|
;;;443    			nxt = get_fat(fs, clst);			/* Get cluster status */
00001a  4639              MOV      r1,r7
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       get_fat
000022  0004              MOVS     r4,r0
;;;444    			if (nxt == 0) break;				/* Empty cluster? */
000024  d01a              BEQ      |L40.92|
;;;445    			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
000026  2c01              CMP      r4,#1
000028  d009              BEQ      |L40.62|
;;;446    			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
00002a  1c60              ADDS     r0,r4,#1
00002c  d009              BEQ      |L40.66|
;;;447    			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
00002e  2200              MOVS     r2,#0
000030  4639              MOV      r1,r7
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       put_fat
000038  0006              MOVS     r6,r0
;;;448    			if (res != FR_OK) break;
00003a  d10f              BNE      |L40.92|
00003c  e003              B        |L40.70|
                  |L40.62|
00003e  2602              MOVS     r6,#2                 ;445
000040  e00c              B        |L40.92|
                  |L40.66|
000042  2601              MOVS     r6,#1                 ;446
000044  e00a              B        |L40.92|
                  |L40.70|
;;;449    			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
000046  6928              LDR      r0,[r5,#0x10]
000048  1c41              ADDS     r1,r0,#1
00004a  d003              BEQ      |L40.84|
;;;450    				fs->free_clust++;
00004c  1c40              ADDS     r0,r0,#1
;;;451    				fs->fsi_flag = 1;
00004e  6128              STR      r0,[r5,#0x10]
000050  f8858005          STRB     r8,[r5,#5]
                  |L40.84|
;;;452    			}
;;;453    			clst = nxt;	/* Next cluster */
000054  4627              MOV      r7,r4
                  |L40.86|
000056  69e8              LDR      r0,[r5,#0x1c]         ;442
000058  42b8              CMP      r0,r7                 ;442
00005a  d8de              BHI      |L40.26|
                  |L40.92|
;;;454    		}
;;;455    	}
;;;456    
;;;457    	return res;
00005c  4630              MOV      r0,r6
;;;458    }
00005e  e8bd81f0          POP      {r4-r8,pc}
;;;459    #endif
                          ENDP


                          AREA ||i.sync||, CODE, READONLY, ALIGN=1

                  sync PROC
;;;285    static
;;;286    FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;287    	FATFS *fs	/* File system object */
;;;288    )
;;;289    {
000004  4604              MOV      r4,r0
;;;290    	FRESULT res;
;;;291    
;;;292    
;;;293    	res = move_window(fs, 0);
000006  2100              MOVS     r1,#0
000008  f7fffffe          BL       move_window
00000c  0005              MOVS     r5,r0
;;;294    	if (res == FR_OK) {
00000e  d150              BNE      |L41.178|
;;;295    		/* Update FSInfo sector if needed */
;;;296    		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
000010  7820              LDRB     r0,[r4,#0]
000012  2803              CMP      r0,#3
000014  d146              BNE      |L41.164|
000016  7960              LDRB     r0,[r4,#5]
000018  b3f0              CBZ      r0,|L41.152|
;;;297    			fs->winsect = 0;
00001a  2600              MOVS     r6,#0
;;;298    			mem_set(fs->win, 0, 512);
00001c  f1040030          ADD      r0,r4,#0x30
000020  f44f7200          MOV      r2,#0x200
000024  4631              MOV      r1,r6
000026  4607              MOV      r7,r0
000028  62e6              STR      r6,[r4,#0x2c]
00002a  f7fffffe          BL       mem_set
;;;299    			ST_WORD(fs->win+BS_55AA, 0xAA55);
00002e  2055              MOVS     r0,#0x55
000030  f884022e          STRB     r0,[r4,#0x22e]
000034  20aa              MOVS     r0,#0xaa
000036  f884022f          STRB     r0,[r4,#0x22f]
;;;300    			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
00003a  2052              MOVS     r0,#0x52
00003c  f8840030          STRB     r0,[r4,#0x30]
000040  f8840031          STRB     r0,[r4,#0x31]
000044  2261              MOVS     r2,#0x61
000046  f8842032          STRB     r2,[r4,#0x32]
00004a  2041              MOVS     r0,#0x41
00004c  f8840033          STRB     r0,[r4,#0x33]
;;;301    			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
000050  2172              MOVS     r1,#0x72
000052  f8841214          STRB     r1,[r4,#0x214]
000056  f8841215          STRB     r1,[r4,#0x215]
00005a  f8840216          STRB     r0,[r4,#0x216]
00005e  f8842217          STRB     r2,[r4,#0x217]
;;;302    			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
000062  6920              LDR      r0,[r4,#0x10]
000064  f8840218          STRB     r0,[r4,#0x218]
000068  0a01              LSRS     r1,r0,#8
00006a  f8841219          STRB     r1,[r4,#0x219]
00006e  0c01              LSRS     r1,r0,#16
000070  f884121a          STRB     r1,[r4,#0x21a]
000074  0e00              LSRS     r0,r0,#24
000076  f884021b          STRB     r0,[r4,#0x21b]
;;;303    			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
00007a  68e0              LDR      r0,[r4,#0xc]
00007c  f884021c          STRB     r0,[r4,#0x21c]
000080  0a01              LSRS     r1,r0,#8
000082  f884121d          STRB     r1,[r4,#0x21d]
000086  0c01              LSRS     r1,r0,#16
000088  0e00              LSRS     r0,r0,#24
00008a  f884121e          STRB     r1,[r4,#0x21e]
00008e  f884021f          STRB     r0,[r4,#0x21f]
;;;304    			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
000092  7860              LDRB     r0,[r4,#1]
000094  2301              MOVS     r3,#1
000096  e000              B        |L41.154|
                  |L41.152|
000098  e004              B        |L41.164|
                  |L41.154|
00009a  4639              MOV      r1,r7
00009c  6962              LDR      r2,[r4,#0x14]
00009e  f7fffffe          BL       disk_write
;;;305    			fs->fsi_flag = 0;
0000a2  7166              STRB     r6,[r4,#5]
                  |L41.164|
;;;306    		}
;;;307    		/* Make sure that no pending write process in the physical drive */
;;;308    		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
0000a4  2200              MOVS     r2,#0
0000a6  7860              LDRB     r0,[r4,#1]
0000a8  4611              MOV      r1,r2
0000aa  f7fffffe          BL       disk_ioctl
0000ae  b100              CBZ      r0,|L41.178|
;;;309    			res = FR_DISK_ERR;
0000b0  2501              MOVS     r5,#1
                  |L41.178|
;;;310    	}
;;;311    
;;;312    	return res;
0000b2  4628              MOV      r0,r5
;;;313    }
0000b4  e8bd81f0          POP      {r4-r8,pc}
;;;314    #endif
                          ENDP


                          AREA ||i.validate||, CODE, READONLY, ALIGN=1

                  validate PROC
;;;1596   static
;;;1597   FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
000000  b510              PUSH     {r4,lr}
;;;1598   	FATFS *fs,		/* Pointer to the file system object */
;;;1599   	WORD id			/* Member id of the target object to be checked */
;;;1600   )
;;;1601   {
000002  b120              CBZ      r0,|L42.14|
;;;1602   	if (!fs || !fs->fs_type || fs->id != id)
000004  7802              LDRB     r2,[r0,#0]
000006  b112              CBZ      r2,|L42.14|
000008  88c2              LDRH     r2,[r0,#6]
00000a  428a              CMP      r2,r1
00000c  d001              BEQ      |L42.18|
                  |L42.14|
;;;1603   		return FR_INVALID_OBJECT;
00000e  2009              MOVS     r0,#9
                  |L42.16|
;;;1604   
;;;1605   	ENTER_FF(fs);		/* Lock file system */
;;;1606   
;;;1607   	if (disk_status(fs->drive) & STA_NOINIT)
;;;1608   		return FR_NOT_READY;
;;;1609   
;;;1610   	return FR_OK;
;;;1611   }
000010  bd10              POP      {r4,pc}
                  |L42.18|
000012  7840              LDRB     r0,[r0,#1]            ;1607
000014  f7fffffe          BL       disk_status
000018  07c0              LSLS     r0,r0,#31             ;1607
00001a  d0f9              BEQ      |L42.16|
00001c  2003              MOVS     r0,#3                 ;1608
00001e  bd10              POP      {r4,pc}
;;;1612   
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  ||cvt||
000000  80818283          DCB      0x80,0x81,0x82,0x83
000004  84858687          DCB      0x84,0x85,0x86,0x87
000008  88898a8b          DCB      0x88,0x89,0x8a,0x8b
00000c  8c8d8e8f          DCB      0x8c,0x8d,0x8e,0x8f
000010  90919293          DCB      0x90,0x91,0x92,0x93
000014  94959697          DCB      0x94,0x95,0x96,0x97
000018  9899ad9b          DCB      0x98,0x99,0xad,0x9b
00001c  8c9dae9f          DCB      0x8c,0x9d,0xae,0x9f
000020  a021a2a3          DCB      0xa0,0x21,0xa2,0xa3
000024  a4a5a6a7          DCB      0xa4,0xa5,0xa6,0xa7
000028  a8a9aaab          DCB      0xa8,0xa9,0xaa,0xab
00002c  acadaeaf          DCB      0xac,0xad,0xae,0xaf
000030  b0b1b2b3          DCB      0xb0,0xb1,0xb2,0xb3
000034  b4b5b6b7          DCB      0xb4,0xb5,0xb6,0xb7
000038  b8b9babb          DCB      0xb8,0xb9,0xba,0xbb
00003c  bcbdbebf          DCB      0xbc,0xbd,0xbe,0xbf
000040  c0c1c2c3          DCB      0xc0,0xc1,0xc2,0xc3
000044  c4c5c6c7          DCB      0xc4,0xc5,0xc6,0xc7
000048  c8c9cacb          DCB      0xc8,0xc9,0xca,0xcb
00004c  cccdcecf          DCB      0xcc,0xcd,0xce,0xcf
000050  d0d1d2d3          DCB      0xd0,0xd1,0xd2,0xd3
000054  d4d5d6d7          DCB      0xd4,0xd5,0xd6,0xd7
000058  d8d9dadb          DCB      0xd8,0xd9,0xda,0xdb
00005c  dcdddedf          DCB      0xdc,0xdd,0xde,0xdf
000060  c0c1c2c3          DCB      0xc0,0xc1,0xc2,0xc3
000064  c4c5c6c7          DCB      0xc4,0xc5,0xc6,0xc7
000068  c8c9cacb          DCB      0xc8,0xc9,0xca,0xcb
00006c  cccdcecf          DCB      0xcc,0xcd,0xce,0xcf
000070  d0d1d2d3          DCB      0xd0,0xd1,0xd2,0xd3
000074  d4d5d6f7          DCB      0xd4,0xd5,0xd6,0xf7
000078  d8d9dadb          DCB      0xd8,0xd9,0xda,0xdb
00007c  dcddde9f          DCB      0xdc,0xdd,0xde,0x9f
                  sstbl
                          DCD      0x001f4000
                          DCD      0x000fa000
                          DCD      0x0007d000
                          DCD      0x0003e800
                          DCD      0x0001f400
                          DCD      0x0000fa00
                          DCD      0x00007d00
                          DCD      0x00003e80
                          DCD      0x00001f40
                          DCD      0x00000fa0
                          DCD      0x00000000
                  cstbl
0000ac  80004000          DCW      0x8000,0x4000
0000b0  20001000          DCW      0x2000,0x1000
0000b4  08004000          DCW      0x0800,0x4000
0000b8  20001000          DCW      0x2000,0x1000
0000bc  08000400          DCW      0x0800,0x0400
0000c0  0200              DCW      0x0200

                          AREA ||.data||, DATA, ALIGN=2

                  Fsid
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  FatFs
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Utilities\\Third_Party\\fat_fs\\ff.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___4_ff_c_get_fat____REV16|
#line 114 ".\\Libraries\\CMSIS\\core_cmInstr.h"
|__asm___4_ff_c_get_fat____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___4_ff_c_get_fat____REVSH|
#line 128
|__asm___4_ff_c_get_fat____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
