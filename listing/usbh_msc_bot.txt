; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\media_usb_key\usbh_msc_bot.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\media_usb_key\usbh_msc_bot.d --cpu=Cortex-M4 --apcs=interwork -I.\Libraries -I.\Utilities -I.\Libraries\CMSIS\ST\STM32F4xx\Include -I.\inc -I.\src -I.\Libraries\STM32F4xx_StdPeriph_Driver -I.\Libraries\STM32_USB_HOST_Library -I.\Libraries\STM32_USB_OTG_Driver -I.\Utilities\STM32F4-Discovery -I.\Libraries\CMSIS -I.\Utilities\Third_Party\fat_fs -IC:\Keil4\ARM\RV31\INC -IC:\Keil4\ARM\CMSIS\Include -IC:\Keil4\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DUSE_USB_OTG_FS -DSTM32F4XX -DMEDIA_USB_KEY -D__FPU_PRESENT=0 --omf_browse=.\media_usb_key\usbh_msc_bot.crf Libraries\STM32_USB_HOST_Library\usbh_msc_bot.c]
                          THUMB

                          AREA ||i.USBH_MSC_BOT_Abort||, CODE, READONLY, ALIGN=2

                  USBH_MSC_BOT_Abort PROC
;;;431    */
;;;432    USBH_Status USBH_MSC_BOT_Abort(USB_OTG_CORE_HANDLE *pdev, 
000000  b570              PUSH     {r4-r6,lr}
;;;433                                   USBH_HOST *phost,
;;;434                                   uint8_t direction)
;;;435    {
000002  4604              MOV      r4,r0
;;;436      USBH_Status status;
;;;437      
;;;438      status = USBH_BUSY;
;;;439      
;;;440      switch (direction)
;;;441      {
;;;442      case USBH_MSC_DIR_IN :
;;;443        /* send ClrFeture on Bulk IN endpoint */
;;;444        status = USBH_ClrFeature(pdev,
000004  4d0a              LDR      r5,|L1.48|
000006  2001              MOVS     r0,#1                 ;438
000008  b112              CBZ      r2,|L1.16|
00000a  2a01              CMP      r2,#1                 ;440
00000c  d108              BNE      |L1.32|
00000e  e002              B        |L1.22|
                  |L1.16|
000010  782b              LDRB     r3,[r5,#0]  ; MSC_Machine
000012  78ea              LDRB     r2,[r5,#3]  ; MSC_Machine
;;;445                                 phost,
;;;446                                 MSC_Machine.MSBulkInEp,
;;;447                                 MSC_Machine.hc_num_in);
;;;448        
;;;449        break;
000014  e001              B        |L1.26|
                  |L1.22|
;;;450        
;;;451      case USBH_MSC_DIR_OUT :
;;;452        /*send ClrFeature on Bulk OUT endpoint */
;;;453        status = USBH_ClrFeature(pdev, 
000016  786b              LDRB     r3,[r5,#1]  ; MSC_Machine
000018  78aa              LDRB     r2,[r5,#2]  ; MSC_Machine
                  |L1.26|
00001a  4620              MOV      r0,r4                 ;444
00001c  f7fffffe          BL       USBH_ClrFeature
                  |L1.32|
;;;454                                 phost,
;;;455                                 MSC_Machine.MSBulkOutEp,
;;;456                                 MSC_Machine.hc_num_out);
;;;457        break;
;;;458        
;;;459      default:
;;;460        break;
;;;461      }
;;;462      
;;;463      BOTStallErrorCount++; /* Check Continous Number of times, STALL has Occured */ 
000020  4a04              LDR      r2,|L1.52|
000022  68d1              LDR      r1,[r2,#0xc]  ; BOTStallErrorCount
000024  1c49              ADDS     r1,r1,#1
;;;464      if (BOTStallErrorCount > MAX_BULK_STALL_COUNT_LIMIT )
000026  60d1              STR      r1,[r2,#0xc]  ; BOTStallErrorCount
000028  2904              CMP      r1,#4
00002a  d900              BLS      |L1.46|
;;;465      {
;;;466        status = USBH_UNRECOVERED_ERROR;
00002c  2004              MOVS     r0,#4
                  |L1.46|
;;;467      }
;;;468      
;;;469      return status;
;;;470    }
00002e  bd70              POP      {r4-r6,pc}
;;;471    
                          ENDP

                  |L1.48|
                          DCD      MSC_Machine
                  |L1.52|
                          DCD      ||.data||

                          AREA ||i.USBH_MSC_DecodeCSW||, CODE, READONLY, ALIGN=2

                  USBH_MSC_DecodeCSW PROC
;;;486    
;;;487    uint8_t USBH_MSC_DecodeCSW(USB_OTG_CORE_HANDLE *pdev , USBH_HOST *phost)
000000  b570              PUSH     {r4-r6,lr}
;;;488    {
000002  4605              MOV      r5,r0
;;;489      uint8_t status;
;;;490      uint32_t dataXferCount = 0;
;;;491      status = USBH_MSC_FAIL;
000004  2401              MOVS     r4,#1
;;;492      
;;;493      if(HCD_IsDeviceConnected(pdev))
000006  f7fffffe          BL       HCD_IsDeviceConnected
00000a  b1d8              CBZ      r0,|L2.68|
;;;494      {
;;;495        /*Checking if the transfer length is diffrent than 13*/
;;;496        dataXferCount = HCD_GetXferCnt(pdev, MSC_Machine.hc_num_in); 
00000c  4810              LDR      r0,|L2.80|
00000e  7801              LDRB     r1,[r0,#0]  ; MSC_Machine
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       HCD_GetXferCnt
;;;497        
;;;498        if(dataXferCount != USBH_MSC_CSW_LENGTH)
000016  280d              CMP      r0,#0xd
000018  d113              BNE      |L2.66|
;;;499        {
;;;500          /*(4) Hi > Dn (Host expects to receive data from the device,
;;;501          Device intends to transfer no data)
;;;502          (5) Hi > Di (Host expects to receive data from the device,
;;;503          Device intends to send data to the host)
;;;504          (9) Ho > Dn (Host expects to send data to the device,
;;;505          Device intends to transfer no data)
;;;506          (11) Ho > Do  (Host expects to send data to the device,
;;;507          Device intends to receive data from the host)*/
;;;508          
;;;509          
;;;510          status = USBH_MSC_PHASE_ERROR;
;;;511        }
;;;512        else
;;;513        { /* CSW length is Correct */
;;;514          
;;;515          /* Check validity of the CSW Signature and CSWStatus */
;;;516          if(USBH_MSC_CSWData.field.CSWSignature == USBH_MSC_BOT_CSW_SIGNATURE)
00001a  480e              LDR      r0,|L2.84|
00001c  4a0e              LDR      r2,|L2.88|
00001e  6801              LDR      r1,[r0,#0]  ; USBH_MSC_CSWData
000020  4291              CMP      r1,r2
000022  d10e              BNE      |L2.66|
;;;517          {/* Check Condition 1. dCSWSignature is equal to 53425355h */
;;;518            
;;;519            if(USBH_MSC_CSWData.field.CSWTag == USBH_MSC_CBWData.field.CBWTag)
000024  f1a00220          SUB      r2,r0,#0x20
000028  6841              LDR      r1,[r0,#4]  ; USBH_MSC_CSWData
00002a  6852              LDR      r2,[r2,#4]  ; USBH_MSC_CBWData
00002c  4291              CMP      r1,r2
00002e  d109              BNE      |L2.68|
;;;520            {
;;;521              /* Check Condition 3. dCSWTag matches the dCBWTag from the 
;;;522              corresponding CBW */
;;;523              
;;;524              if(USBH_MSC_CSWData.field.CSWStatus == USBH_MSC_OK) 
000030  7b00              LDRB     r0,[r0,#0xc]  ; USBH_MSC_CSWData
000032  b120              CBZ      r0,|L2.62|
;;;525              {
;;;526                /* Refer to USB Mass-Storage Class : BOT (www.usb.org) 
;;;527                
;;;528                Hn Host expects no data transfers
;;;529                Hi Host expects to receive data from the device
;;;530                Ho Host expects to send data to the device
;;;531                
;;;532                Dn Device intends to transfer no data
;;;533                Di Device intends to send data to the host
;;;534                Do Device intends to receive data from the host
;;;535                
;;;536                Section 6.7 
;;;537                (1) Hn = Dn (Host expects no data transfers,
;;;538                Device intends to transfer no data)
;;;539                (6) Hi = Di (Host expects to receive data from the device,
;;;540                Device intends to send data to the host)
;;;541                (12) Ho = Do (Host expects to send data to the device, 
;;;542                Device intends to receive data from the host)
;;;543                
;;;544                */
;;;545                
;;;546                status = USBH_MSC_OK;
;;;547              }
;;;548              else if(USBH_MSC_CSWData.field.CSWStatus == USBH_MSC_FAIL)
000034  2801              CMP      r0,#1
000036  d005              BEQ      |L2.68|
;;;549              {
;;;550                status = USBH_MSC_FAIL;
;;;551              }
;;;552              
;;;553              else if(USBH_MSC_CSWData.field.CSWStatus == USBH_MSC_PHASE_ERROR)
000038  2802              CMP      r0,#2
00003a  d002              BEQ      |L2.66|
00003c  e002              B        |L2.68|
                  |L2.62|
00003e  2400              MOVS     r4,#0                 ;546
000040  e000              B        |L2.68|
                  |L2.66|
;;;554              { 
;;;555                /* Refer to USB Mass-Storage Class : BOT (www.usb.org) 
;;;556                Section 6.7 
;;;557                (2) Hn < Di ( Host expects no data transfers, 
;;;558                Device intends to send data to the host)
;;;559                (3) Hn < Do ( Host expects no data transfers, 
;;;560                Device intends to receive data from the host)
;;;561                (7) Hi < Di ( Host expects to receive data from the device, 
;;;562                Device intends to send data to the host)
;;;563                (8) Hi <> Do ( Host expects to receive data from the device, 
;;;564                Device intends to receive data from the host)
;;;565                (10) Ho <> Di (Host expects to send data to the device,
;;;566                Di Device intends to send data to the host)
;;;567                (13) Ho < Do (Host expects to send data to the device, 
;;;568                Device intends to receive data from the host)
;;;569                */
;;;570                
;;;571                status = USBH_MSC_PHASE_ERROR;
;;;572              }
;;;573            } /* CSW Tag Matching is Checked  */
;;;574          } /* CSW Signature Correct Checking */
;;;575          else
;;;576          {
;;;577            /* If the CSW Signature is not valid, We sall return the Phase Error to
;;;578            Upper Layers for Reset Recovery */
;;;579            
;;;580            status = USBH_MSC_PHASE_ERROR;
000042  2402              MOVS     r4,#2
                  |L2.68|
;;;581          }
;;;582        } /* CSW Length Check*/
;;;583      }
;;;584      
;;;585      USBH_MSC_BOTXferParam.BOTXferStatus  = status;
000044  4803              LDR      r0,|L2.84|
000046  3010              ADDS     r0,r0,#0x10
000048  73c4              STRB     r4,[r0,#0xf]
;;;586      return status;
00004a  4620              MOV      r0,r4
;;;587    }
00004c  bd70              POP      {r4-r6,pc}
;;;588    
                          ENDP

00004e  0000              DCW      0x0000
                  |L2.80|
                          DCD      MSC_Machine
                  |L2.84|
                          DCD      ||.bss||+0x20
                  |L2.88|
                          DCD      0x53425355

                          AREA ||i.USBH_MSC_HandleBOTXfer||, CODE, READONLY, ALIGN=2

                  USBH_MSC_HandleBOTXfer PROC
;;;146    */
;;;147    void USBH_MSC_HandleBOTXfer (USB_OTG_CORE_HANDLE *pdev ,USBH_HOST *phost)
000000  e92d5ff3          PUSH     {r0,r1,r4-r12,lr}
;;;148    {
;;;149      uint8_t xferDirection, index;
;;;150      static uint32_t remainingDataLength;
;;;151      static uint8_t *datapointer;
;;;152      static uint8_t error_direction;
;;;153      USBH_Status status;
;;;154      
;;;155      URB_STATE URB_Status = URB_IDLE;
;;;156      
;;;157      if(HCD_IsDeviceConnected(pdev))
000004  9800              LDR      r0,[sp,#0]
000006  f7fffffe          BL       HCD_IsDeviceConnected
00000a  2800              CMP      r0,#0
00000c  d021              BEQ      |L3.82|
;;;158      {  
;;;159        
;;;160        switch (USBH_MSC_BOTXferParam.BOTState)
00000e  4c7a              LDR      r4,|L3.504|
000010  2705              MOVS     r7,#5
;;;161        {
;;;162        case USBH_MSC_SEND_CBW:
;;;163          /* send CBW */    
;;;164          USBH_BulkSendData (pdev,
000012  4a7a              LDR      r2,|L3.508|
000014  7920              LDRB     r0,[r4,#4]            ;160  ; USBH_MSC_BOTXferParam
;;;165                             &USBH_MSC_CBWData.CBWArray[0], 
;;;166                             USBH_MSC_BOT_CBW_PACKET_LENGTH , 
;;;167                             MSC_Machine.hc_num_out);
;;;168          
;;;169          USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_SEND_CBW;
;;;170          USBH_MSC_BOTXferParam.BOTState = USBH_MSC_SENT_CBW;
;;;171          
;;;172          break;
;;;173          
;;;174        case USBH_MSC_SENT_CBW:
;;;175          URB_Status = HCD_GetURB_State(pdev , MSC_Machine.hc_num_out);
;;;176          
;;;177          if(URB_Status == URB_DONE)
;;;178          { 
;;;179            BOTStallErrorCount = 0;
000016  4d7a              LDR      r5,|L3.512|
000018  2600              MOVS     r6,#0
00001a  f04f0908          MOV      r9,#8                 ;160
00001e  f04f0b07          MOV      r11,#7                ;160
000022  f04f0802          MOV      r8,#2                 ;160
000026  f04f0a01          MOV      r10,#1                ;160
00002a  2809              CMP      r0,#9                 ;160
00002c  d211              BCS      |L3.82|
00002e  e8dff000          TBB      [pc,r0]               ;160
000032  1005              DCB      0x10,0x05
000034  1233609e          DCB      0x12,0x33,0x60,0x9e
000038  b3c9d500          DCB      0xb3,0xc9,0xd5,0x00
00003c  496e              LDR      r1,|L3.504|
00003e  7853              LDRB     r3,[r2,#1]            ;164  ; MSC_Machine
000040  221f              MOVS     r2,#0x1f              ;164
000042  3930              SUBS     r1,r1,#0x30           ;164
000044  9800              LDR      r0,[sp,#0]            ;164
000046  f7fffffe          BL       USBH_BulkSendData
00004a  f884a005          STRB     r10,[r4,#5]           ;169
00004e  f8848004          STRB     r8,[r4,#4]            ;170
                  |L3.82|
;;;180            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_SENT_CBW; 
;;;181            
;;;182            /* If the CBW Pkt is sent successful, then change the state */
;;;183            xferDirection = (USBH_MSC_CBWData.field.CBWFlags & USB_REQ_DIR_MASK);
;;;184            
;;;185            if ( USBH_MSC_CBWData.field.CBWTransferLength != 0 )
;;;186            {
;;;187              remainingDataLength = USBH_MSC_CBWData.field.CBWTransferLength ;
;;;188              datapointer = USBH_MSC_BOTXferParam.pRxTxBuff;
;;;189              
;;;190              /* If there is Data Transfer Stage */
;;;191              if (xferDirection == USB_D2H)
;;;192              {
;;;193                /* Data Direction is IN */
;;;194                USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOT_DATAIN_STATE;
;;;195              }
;;;196              else
;;;197              {
;;;198                /* Data Direction is OUT */
;;;199                USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOT_DATAOUT_STATE;
;;;200              } 
;;;201            }
;;;202            
;;;203            else
;;;204            {/* If there is NO Data Transfer Stage */
;;;205              USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
;;;206            }
;;;207            
;;;208          }   
;;;209          else if(URB_Status == URB_NOTREADY)
;;;210          {
;;;211            USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOTXferParam.BOTStateBkp;    
;;;212          }     
;;;213          else if(URB_Status == URB_STALL)
;;;214          {
;;;215            error_direction = USBH_MSC_DIR_OUT;
;;;216            USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_OUT;
;;;217          }
;;;218          break;
;;;219          
;;;220        case USBH_MSC_BOT_DATAIN_STATE:
;;;221          
;;;222          URB_Status =   HCD_GetURB_State(pdev , MSC_Machine.hc_num_in);
;;;223          /* BOT DATA IN stage */
;;;224          if((URB_Status == URB_DONE) ||(USBH_MSC_BOTXferParam.BOTStateBkp != USBH_MSC_BOT_DATAIN_STATE))
;;;225          {
;;;226            BOTStallErrorCount = 0;
;;;227            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_BOT_DATAIN_STATE;    
;;;228            
;;;229            if(remainingDataLength > USBH_MSC_MPS_SIZE)
;;;230            {
;;;231              USBH_BulkReceiveData (pdev,
;;;232    	                        datapointer, 
;;;233    			        USBH_MSC_MPS_SIZE , 
;;;234    			        MSC_Machine.hc_num_in);
;;;235              
;;;236              remainingDataLength -= USBH_MSC_MPS_SIZE;
;;;237              datapointer = datapointer + USBH_MSC_MPS_SIZE;
;;;238            }
;;;239            else if ( remainingDataLength == 0)
;;;240            {
;;;241              /* If value was 0, and successful transfer, then change the state */
;;;242              USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
;;;243            }
;;;244            else
;;;245            {       
;;;246              USBH_BulkReceiveData (pdev,
;;;247    	                        datapointer, 
;;;248    			        remainingDataLength , 
;;;249    			        MSC_Machine.hc_num_in);
;;;250              
;;;251              remainingDataLength = 0; /* Reset this value and keep in same state */
;;;252            }
;;;253          }
;;;254          else if(URB_Status == URB_STALL)
;;;255          {
;;;256            /* This is Data Stage STALL Condition */
;;;257            
;;;258            error_direction = USBH_MSC_DIR_IN;
;;;259            USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_IN;
;;;260            
;;;261            /* Refer to USB Mass-Storage Class : BOT (www.usb.org) 
;;;262            6.7.2 Host expects to receive data from the device
;;;263            3. On a STALL condition receiving data, then:
;;;264            The host shall accept the data received.
;;;265            The host shall clear the Bulk-In pipe.
;;;266            4. The host shall attempt to receive a CSW.
;;;267            
;;;268            USBH_MSC_BOTXferParam.BOTStateBkp is used to switch to the Original 
;;;269            state after the ClearFeature Command is issued.
;;;270            */
;;;271            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
;;;272            
;;;273          }     
;;;274          break;   
;;;275          
;;;276          
;;;277        case USBH_MSC_BOT_DATAOUT_STATE:
;;;278          /* BOT DATA OUT stage */
;;;279          URB_Status = HCD_GetURB_State(pdev , MSC_Machine.hc_num_out);       
;;;280          if(URB_Status == URB_DONE)
;;;281          {
;;;282            BOTStallErrorCount = 0;
;;;283            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_BOT_DATAOUT_STATE;    
;;;284            if(remainingDataLength > USBH_MSC_MPS_SIZE)
;;;285            {
;;;286              USBH_BulkSendData (pdev,
;;;287                                 datapointer, 
;;;288                                 USBH_MSC_MPS_SIZE , 
;;;289                                 MSC_Machine.hc_num_out);
;;;290              datapointer = datapointer + USBH_MSC_MPS_SIZE;
;;;291              remainingDataLength = remainingDataLength - USBH_MSC_MPS_SIZE;
;;;292            }
;;;293            else if ( remainingDataLength == 0)
;;;294            {
;;;295              /* If value was 0, and successful transfer, then change the state */
;;;296              USBH_MSC_BOTXferParam.BOTState = USBH_MSC_RECEIVE_CSW_STATE;
;;;297            }
;;;298            else
;;;299            {
;;;300              USBH_BulkSendData (pdev,
;;;301    	                     datapointer, 
;;;302    			     remainingDataLength , 
;;;303    			     MSC_Machine.hc_num_out);
;;;304              
;;;305              remainingDataLength = 0; /* Reset this value and keep in same state */   
;;;306            }      
;;;307          }
;;;308          
;;;309          else if(URB_Status == URB_NOTREADY)
;;;310          {
;;;311            USBH_BulkSendData (pdev,
;;;312    	                   (datapointer - USBH_MSC_MPS_SIZE), 
;;;313    			   USBH_MSC_MPS_SIZE , 
;;;314    			   MSC_Machine.hc_num_out);
;;;315          }
;;;316          
;;;317          else if(URB_Status == URB_STALL)
;;;318          {
;;;319            error_direction = USBH_MSC_DIR_OUT;
;;;320            USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_OUT;
;;;321            
;;;322            /* Refer to USB Mass-Storage Class : BOT (www.usb.org) 
;;;323            6.7.3 Ho - Host expects to send data to the device
;;;324            3. On a STALL condition sending data, then:
;;;325            " The host shall clear the Bulk-Out pipe.
;;;326            4. The host shall attempt to receive a CSW.
;;;327            
;;;328            The Above statement will do the clear the Bulk-Out pipe.
;;;329            The Below statement will help in Getting the CSW.  
;;;330            
;;;331            USBH_MSC_BOTXferParam.BOTStateBkp is used to switch to the Original 
;;;332            state after the ClearFeature Command is issued.
;;;333            */
;;;334            
;;;335            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
;;;336            
;;;337          }
;;;338          break;
;;;339          
;;;340        case USBH_MSC_RECEIVE_CSW_STATE:
;;;341          /* BOT CSW stage */     
;;;342            /* NOTE: We cannot reset the BOTStallErrorCount here as it may come from 
;;;343            the clearFeature from previous command */
;;;344            
;;;345            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
;;;346            
;;;347            USBH_MSC_BOTXferParam.pRxTxBuff = USBH_MSC_CSWData.CSWArray;
;;;348            USBH_MSC_BOTXferParam.DataLength = USBH_MSC_CSW_MAX_LENGTH;
;;;349            
;;;350            for(index = USBH_MSC_CSW_LENGTH; index != 0; index--)
;;;351            {
;;;352              USBH_MSC_CSWData.CSWArray[index] = 0;
;;;353            }
;;;354            
;;;355            USBH_MSC_CSWData.CSWArray[0] = 0;
;;;356            
;;;357            USBH_BulkReceiveData (pdev,
;;;358                                  USBH_MSC_BOTXferParam.pRxTxBuff, 
;;;359                                  USBH_MSC_CSW_MAX_LENGTH , 
;;;360                                  MSC_Machine.hc_num_in);
;;;361            USBH_MSC_BOTXferParam.BOTState = USBH_MSC_DECODE_CSW;    
;;;362    
;;;363          break;
;;;364          
;;;365        case USBH_MSC_DECODE_CSW:
;;;366          URB_Status = HCD_GetURB_State(pdev , MSC_Machine.hc_num_in);
;;;367          /* Decode CSW */
;;;368          if(URB_Status == URB_DONE)
;;;369          {
;;;370            BOTStallErrorCount = 0;
;;;371            USBH_MSC_BOTXferParam.BOTStateBkp = USBH_MSC_RECEIVE_CSW_STATE;
;;;372            
;;;373            USBH_MSC_BOTXferParam.MSCState = USBH_MSC_BOTXferParam.MSCStateCurrent ;
;;;374            
;;;375            USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_DecodeCSW(pdev , phost);
;;;376          }
;;;377          else if(URB_Status == URB_STALL)     
;;;378          {
;;;379            error_direction = USBH_MSC_DIR_IN;
;;;380            USBH_MSC_BOTXferParam.BOTState  = USBH_MSC_BOT_ERROR_IN;
;;;381          }
;;;382          break;
;;;383          
;;;384        case USBH_MSC_BOT_ERROR_IN: 
;;;385          status = USBH_MSC_BOT_Abort(pdev, phost, USBH_MSC_DIR_IN);
;;;386          if (status == USBH_OK)
;;;387          {
;;;388            /* Check if the error was due in Both the directions */
;;;389            if (error_direction == USBH_MSC_BOTH_DIR)
;;;390            {/* If Both directions are Needed, Switch to OUT Direction */
;;;391              USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOT_ERROR_OUT;
;;;392            }
;;;393            else
;;;394            {
;;;395              /* Switch Back to the Original State, In many cases this will be 
;;;396              USBH_MSC_RECEIVE_CSW_STATE state */
;;;397              USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOTXferParam.BOTStateBkp;
;;;398            }
;;;399          }
;;;400          else if (status == USBH_UNRECOVERED_ERROR)
;;;401          {
;;;402            /* This means that there is a STALL Error limit, Do Reset Recovery */
;;;403            USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
;;;404          }
;;;405          break;
;;;406          
;;;407        case USBH_MSC_BOT_ERROR_OUT: 
;;;408          status = USBH_MSC_BOT_Abort(pdev, phost, USBH_MSC_DIR_OUT);
;;;409          if ( status == USBH_OK)
;;;410          { /* Switch Back to the Original State */
;;;411            USBH_MSC_BOTXferParam.BOTState = USBH_MSC_BOTXferParam.BOTStateBkp;        
;;;412          }
;;;413          else if (status == USBH_UNRECOVERED_ERROR)
;;;414          {
;;;415            /* This means that there is a STALL Error limit, Do Reset Recovery */
;;;416            USBH_MSC_BOTXferParam.BOTXferStatus = USBH_MSC_PHASE_ERROR;
;;;417          }
;;;418          break;
;;;419          
;;;420        default:      
;;;421          break;
;;;422        }
;;;423      }
;;;424    }
000052  e8bd9ffc          POP      {r2-r12,pc}
000056  7851              LDRB     r1,[r2,#1]            ;175  ; MSC_Machine
000058  9800              LDR      r0,[sp,#0]            ;175
00005a  f7fffffe          BL       HCD_GetURB_State
00005e  2801              CMP      r0,#1                 ;177
000060  d006              BEQ      |L3.112|
000062  2802              CMP      r0,#2                 ;209
000064  d06b              BEQ      |L3.318|
000066  2804              CMP      r0,#4                 ;213
000068  d1f3              BNE      |L3.82|
00006a  f885a000          STRB     r10,[r5,#0]           ;215
00006e  e0b2              B        |L3.470|
                  |L3.112|
000070  4861              LDR      r0,|L3.504|
000072  60ee              STR      r6,[r5,#0xc]          ;180  ; BOTStallErrorCount
000074  3830              SUBS     r0,r0,#0x30           ;183
000076  f8848005          STRB     r8,[r4,#5]            ;180
00007a  7b01              LDRB     r1,[r0,#0xc]          ;183  ; USBH_MSC_CBWData
00007c  6880              LDR      r0,[r0,#8]            ;185  ; USBH_MSC_CBWData
00007e  f0010180          AND      r1,r1,#0x80           ;183
000082  2800              CMP      r0,#0                 ;185
000084  d066              BEQ      |L3.340|
000086  6068              STR      r0,[r5,#4]            ;188  ; remainingDataLength
000088  68a0              LDR      r0,[r4,#8]            ;188  ; USBH_MSC_BOTXferParam
00008a  60a8              STR      r0,[r5,#8]            ;191  ; datapointer
00008c  2980              CMP      r1,#0x80              ;191
00008e  d001              BEQ      |L3.148|
000090  2004              MOVS     r0,#4                 ;199
000092  e0af              B        |L3.500|
                  |L3.148|
000094  2003              MOVS     r0,#3                 ;194
000096  e0ad              B        |L3.500|
000098  4690              MOV      r8,r2                 ;222
00009a  7811              LDRB     r1,[r2,#0]            ;222  ; MSC_Machine
00009c  9800              LDR      r0,[sp,#0]            ;222
00009e  f7fffffe          BL       HCD_GetURB_State
0000a2  2801              CMP      r0,#1                 ;224
0000a4  d002              BEQ      |L3.172|
0000a6  7961              LDRB     r1,[r4,#5]            ;224  ; USBH_MSC_BOTXferParam
0000a8  2903              CMP      r1,#3                 ;224
0000aa  d01c              BEQ      |L3.230|
                  |L3.172|
0000ac  2003              MOVS     r0,#3                 ;227
0000ae  60ee              STR      r6,[r5,#0xc]          ;227  ; BOTStallErrorCount
0000b0  7160              STRB     r0,[r4,#5]            ;227
0000b2  6868              LDR      r0,[r5,#4]            ;229  ; remainingDataLength
0000b4  2840              CMP      r0,#0x40              ;229
0000b6  d90d              BLS      |L3.212|
0000b8  f8983000          LDRB     r3,[r8,#0]            ;231  ; MSC_Machine
0000bc  2240              MOVS     r2,#0x40              ;231
0000be  68a9              LDR      r1,[r5,#8]            ;231  ; datapointer
0000c0  9800              LDR      r0,[sp,#0]            ;231
0000c2  f7fffffe          BL       USBH_BulkReceiveData
0000c6  6868              LDR      r0,[r5,#4]            ;236  ; remainingDataLength
0000c8  3840              SUBS     r0,r0,#0x40           ;236
0000ca  6068              STR      r0,[r5,#4]            ;237  ; remainingDataLength
0000cc  68a8              LDR      r0,[r5,#8]            ;237  ; datapointer
0000ce  3040              ADDS     r0,r0,#0x40           ;237
0000d0  60a8              STR      r0,[r5,#8]            ;237  ; datapointer
                  |L3.210|
0000d2  e7be              B        |L3.82|
                  |L3.212|
0000d4  b390              CBZ      r0,|L3.316|
0000d6  b282              UXTH     r2,r0                 ;246
0000d8  f8983000          LDRB     r3,[r8,#0]            ;246  ; MSC_Machine
0000dc  68a9              LDR      r1,[r5,#8]            ;246  ; datapointer
0000de  9800              LDR      r0,[sp,#0]            ;246
0000e0  f7fffffe          BL       USBH_BulkReceiveData
0000e4  e034              B        |L3.336|
                  |L3.230|
0000e6  2804              CMP      r0,#4                 ;254
0000e8  d1b3              BNE      |L3.82|
0000ea  702e              STRB     r6,[r5,#0]            ;258
0000ec  f884b004          STRB     r11,[r4,#4]           ;259
0000f0  e00e              B        |L3.272|
0000f2  4690              MOV      r8,r2                 ;279
0000f4  7851              LDRB     r1,[r2,#1]            ;279  ; MSC_Machine
0000f6  9800              LDR      r0,[sp,#0]            ;279
0000f8  f7fffffe          BL       HCD_GetURB_State
0000fc  2801              CMP      r0,#1                 ;280
0000fe  d009              BEQ      |L3.276|
000100  2802              CMP      r0,#2                 ;309
000102  d029              BEQ      |L3.344|
000104  2804              CMP      r0,#4                 ;317
000106  d1a4              BNE      |L3.82|
000108  f885a000          STRB     r10,[r5,#0]           ;319
00010c  f8849004          STRB     r9,[r4,#4]            ;320
                  |L3.272|
000110  7167              STRB     r7,[r4,#5]            ;335
                  |L3.274|
000112  e79e              B        |L3.82|
                  |L3.276|
000114  2004              MOVS     r0,#4                 ;283
000116  60ee              STR      r6,[r5,#0xc]          ;283  ; BOTStallErrorCount
000118  7160              STRB     r0,[r4,#5]            ;283
00011a  6868              LDR      r0,[r5,#4]            ;284  ; remainingDataLength
00011c  2840              CMP      r0,#0x40              ;284
00011e  d90f              BLS      |L3.320|
000120  f8983001          LDRB     r3,[r8,#1]            ;286  ; MSC_Machine
000124  2240              MOVS     r2,#0x40              ;286
000126  68a9              LDR      r1,[r5,#8]            ;286  ; datapointer
000128  9800              LDR      r0,[sp,#0]            ;286
00012a  f7fffffe          BL       USBH_BulkSendData
00012e  68a8              LDR      r0,[r5,#8]            ;290  ; datapointer
000130  3040              ADDS     r0,r0,#0x40           ;290
000132  60a8              STR      r0,[r5,#8]            ;291  ; datapointer
000134  6868              LDR      r0,[r5,#4]            ;291  ; remainingDataLength
000136  3840              SUBS     r0,r0,#0x40           ;291
000138  6068              STR      r0,[r5,#4]            ;291  ; remainingDataLength
00013a  e78a              B        |L3.82|
                  |L3.316|
00013c  e00a              B        |L3.340|
                  |L3.318|
00013e  e058              B        |L3.498|
                  |L3.320|
000140  b140              CBZ      r0,|L3.340|
000142  b282              UXTH     r2,r0                 ;300
000144  f8983001          LDRB     r3,[r8,#1]            ;300  ; MSC_Machine
000148  68a9              LDR      r1,[r5,#8]            ;300  ; datapointer
00014a  9800              LDR      r0,[sp,#0]            ;300
00014c  f7fffffe          BL       USBH_BulkSendData
                  |L3.336|
000150  606e              STR      r6,[r5,#4]            ;305  ; remainingDataLength
000152  e77e              B        |L3.82|
                  |L3.340|
000154  7127              STRB     r7,[r4,#4]            ;296
000156  e77c              B        |L3.82|
                  |L3.344|
000158  68a9              LDR      r1,[r5,#8]            ;311  ; datapointer
00015a  f8983001          LDRB     r3,[r8,#1]            ;311  ; MSC_Machine
00015e  9800              LDR      r0,[sp,#0]            ;311
000160  b002              ADD      sp,sp,#8              ;311
000162  2240              MOVS     r2,#0x40              ;311
000164  e8bd5ff0          POP      {r4-r12,lr}           ;311
000168  3940              SUBS     r1,r1,#0x40           ;311
00016a  f7ffbffe          B.W      USBH_BulkSendData
00016e  4922              LDR      r1,|L3.504|
000170  7167              STRB     r7,[r4,#5]            ;345
000172  3910              SUBS     r1,r1,#0x10           ;347
000174  203f              MOVS     r0,#0x3f              ;348
000176  60a1              STR      r1,[r4,#8]            ;348  ; USBH_MSC_BOTXferParam
000178  81a0              STRH     r0,[r4,#0xc]          ;348
00017a  200d              MOVS     r0,#0xd               ;350
00017c  460d              MOV      r5,r1                 ;347
                  |L3.382|
00017e  542e              STRB     r6,[r5,r0]            ;352
000180  1e40              SUBS     r0,r0,#1              ;350
000182  f01000ff          ANDS     r0,r0,#0xff           ;350
000186  d1fa              BNE      |L3.382|
000188  702e              STRB     r6,[r5,#0]            ;355
00018a  7813              LDRB     r3,[r2,#0]            ;357  ; MSC_Machine
00018c  223f              MOVS     r2,#0x3f              ;357
00018e  9800              LDR      r0,[sp,#0]            ;357
000190  f7fffffe          BL       USBH_BulkReceiveData
000194  2006              MOVS     r0,#6                 ;361
000196  e02d              B        |L3.500|
000198  7811              LDRB     r1,[r2,#0]            ;366  ; MSC_Machine
00019a  9800              LDR      r0,[sp,#0]            ;366
00019c  f7fffffe          BL       HCD_GetURB_State
0001a0  2801              CMP      r0,#1                 ;368
0001a2  d005              BEQ      |L3.432|
0001a4  2804              CMP      r0,#4                 ;377
0001a6  d194              BNE      |L3.210|
0001a8  702e              STRB     r6,[r5,#0]            ;379
0001aa  f884b004          STRB     r11,[r4,#4]           ;380
0001ae  e750              B        |L3.82|
                  |L3.432|
0001b0  60ee              STR      r6,[r5,#0xc]          ;371  ; BOTStallErrorCount
0001b2  7167              STRB     r7,[r4,#5]            ;371
0001b4  78a0              LDRB     r0,[r4,#2]            ;373  ; USBH_MSC_BOTXferParam
0001b6  7020              STRB     r0,[r4,#0]            ;373
0001b8  e9dd0100          LDRD     r0,r1,[sp,#0]         ;373
0001bc  f7fffffe          BL       USBH_MSC_DecodeCSW
0001c0  73e0              STRB     r0,[r4,#0xf]          ;375
0001c2  e746              B        |L3.82|
0001c4  e9dd0100          LDRD     r0,r1,[sp,#0]         ;385
0001c8  2200              MOVS     r2,#0                 ;385
0001ca  f7fffffe          BL       USBH_MSC_BOT_Abort
0001ce  b958              CBNZ     r0,|L3.488|
0001d0  7828              LDRB     r0,[r5,#0]            ;389  ; error_direction
0001d2  2802              CMP      r0,#2                 ;389
0001d4  d10d              BNE      |L3.498|
                  |L3.470|
0001d6  f8849004          STRB     r9,[r4,#4]            ;391
0001da  e73a              B        |L3.82|
0001dc  e9dd0100          LDRD     r0,r1,[sp,#0]         ;408
0001e0  2201              MOVS     r2,#1                 ;408
0001e2  f7fffffe          BL       USBH_MSC_BOT_Abort
0001e6  b120              CBZ      r0,|L3.498|
                  |L3.488|
0001e8  2804              CMP      r0,#4                 ;413
0001ea  d192              BNE      |L3.274|
0001ec  f884800f          STRB     r8,[r4,#0xf]          ;416
0001f0  e72f              B        |L3.82|
                  |L3.498|
0001f2  7960              LDRB     r0,[r4,#5]            ;411  ; USBH_MSC_BOTXferParam
                  |L3.500|
0001f4  7120              STRB     r0,[r4,#4]            ;411
0001f6  e72c              B        |L3.82|
;;;425    
                          ENDP

                  |L3.504|
                          DCD      ||.bss||+0x30
                  |L3.508|
                          DCD      MSC_Machine
                  |L3.512|
                          DCD      ||.data||

                          AREA ||i.USBH_MSC_Init||, CODE, READONLY, ALIGN=2

                  USBH_MSC_Init PROC
;;;124    */
;;;125    void USBH_MSC_Init(USB_OTG_CORE_HANDLE *pdev )
000000  b510              PUSH     {r4,lr}
;;;126    {
;;;127      if(HCD_IsDeviceConnected(pdev))
000002  f7fffffe          BL       HCD_IsDeviceConnected
000006  2100              MOVS     r1,#0
000008  b148              CBZ      r0,|L4.30|
;;;128      {      
;;;129        USBH_MSC_CBWData.field.CBWSignature = USBH_MSC_BOT_CBW_SIGNATURE;
00000a  4808              LDR      r0,|L4.44|
00000c  4a06              LDR      r2,|L4.40|
;;;130        USBH_MSC_CBWData.field.CBWTag = USBH_MSC_BOT_CBW_TAG;
00000e  6002              STR      r2,[r0,#0]  ; USBH_MSC_CBWData
000010  4a07              LDR      r2,|L4.48|
;;;131        USBH_MSC_CBWData.field.CBWLUN = 0;  /*Only one LUN is supported*/
000012  6042              STR      r2,[r0,#4]  ; USBH_MSC_CBWData
000014  7341              STRB     r1,[r0,#0xd]
;;;132        USBH_MSC_BOTXferParam.CmdStateMachine = CMD_SEND_STATE;  
000016  4a05              LDR      r2,|L4.44|
000018  2001              MOVS     r0,#1
00001a  3230              ADDS     r2,r2,#0x30
00001c  70d0              STRB     r0,[r2,#3]
                  |L4.30|
;;;133      }
;;;134      
;;;135      BOTStallErrorCount = 0;
00001e  4805              LDR      r0,|L4.52|
;;;136      MSCErrorCount = 0;
000020  60c1              STR      r1,[r0,#0xc]  ; BOTStallErrorCount
000022  4805              LDR      r0,|L4.56|
000024  7001              STRB     r1,[r0,#0]
;;;137    }
000026  bd10              POP      {r4,pc}
;;;138    
                          ENDP

                  |L4.40|
                          DCD      0x43425355
                  |L4.44|
                          DCD      ||.bss||
                  |L4.48|
                          DCD      0x20304050
                  |L4.52|
                          DCD      ||.data||
                  |L4.56|
                          DCD      MSCErrorCount

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  USBH_MSC_CBWData
                          %        32
                  USBH_MSC_CSWData
                          %        16
                  USBH_MSC_BOTXferParam
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  error_direction
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  remainingDataLength
                          DCD      0x00000000
                  datapointer
                          DCD      0x00000000
                  BOTStallErrorCount
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Libraries\\STM32_USB_HOST_Library\\usbh_msc_bot.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_usbh_msc_bot_c_2abeb359____REV16|
#line 114 ".\\Libraries\\CMSIS\\core_cmInstr.h"
|__asm___14_usbh_msc_bot_c_2abeb359____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_usbh_msc_bot_c_2abeb359____REVSH|
#line 128
|__asm___14_usbh_msc_bot_c_2abeb359____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
