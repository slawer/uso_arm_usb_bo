; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\MEDIA_USB_KEY\usbh_usr.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\MEDIA_USB_KEY\usbh_usr.d --cpu=Cortex-M4 --apcs=interwork -I.\Libraries -I.\Utilities -I.\Libraries\CMSIS\ST\STM32F4xx\Include -I.\inc -I.\src -I.\Libraries\STM32F4xx_StdPeriph_Driver -I.\Libraries\STM32_USB_HOST_Library -I.\Libraries\STM32_USB_OTG_Driver -I.\Utilities\STM32F4-Discovery -I.\Libraries\CMSIS -I.\Utilities\Third_Party\fat_fs -IC:\Keil4\ARM\RV31\INC -IC:\Keil4\ARM\CMSIS\Include -IC:\Keil4\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DUSE_USB_OTG_FS -DSTM32F4XX -DMEDIA_USB_KEY -D__FPU_PRESENT=0 --omf_browse=.\MEDIA_USB_KEY\usbh_usr.crf src\usbh_usr.c]
                          THUMB

                          AREA ||i.COMMAND_AudioExecuteApplication||, CODE, READONLY, ALIGN=2

                  COMMAND_AudioExecuteApplication PROC
;;;394      */
;;;395    void COMMAND_AudioExecuteApplication(void)
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;396    {
;;;397      /* Execute the command switch the command index */
;;;398    	
;;;399    //	WaveRecorderUpdate();
;;;400    	/*
;;;401      switch (Command_index)
;;;402      {
;;;403      // Start Playing from USB Flash memory 
;;;404      case CMD_PLAY:
;;;405        if (RepeatState == 0)
;;;406    //      WavePlayerStart();
;;;407        break;
;;;408        // Start Recording in USB Flash memory  
;;;409      case CMD_RECORD:
;;;410        RepeatState = 0;
;;;411        WaveRecorderUpdate();
;;;412        break;  
;;;413      default:
;;;414        break;
;;;415      }
;;;416    	*/
;;;417    //	minute=12345;
;;;418    //	if (minute!=pred_minute)
;;;419    if (buffering)
000004  f8dfb23c          LDR      r11,|L1.580|
000008  f89b0000          LDRB     r0,[r11,#0]  ; buffering
00000c  2800              CMP      r0,#0                 ;396
00000e  d07d              BEQ      |L1.268|
;;;420    	{
;;;421    		TDateTime DT;
;;;422    		u8 tmp=0;
;;;423        
;;;424    	  rtc_Get(&DT);     	
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       rtc_Get
;;;425    		pred_minute=minute;
000016  488c              LDR      r0,|L1.584|
000018  498c              LDR      r1,|L1.588|
;;;426    //		minute=12345;
;;;427    		
;;;428    	//		dec_to_chr(minute,(uint8_t*) &Buf_zap[0]);
;;;429    		/*
;;;430    	Buf_zap[0]=0x32;
;;;431    	Buf_zap[1]=0x30;
;;;432    	
;;;433    	tmp=DT.Year/10;
;;;434    	Buf_zap[2]=(uint8_t)(tmp)+(uint8_t)0x30;
;;;435    	tmp%=10;
;;;436    	Buf_zap[3]=(uint8_t)(tmp)+(uint8_t)0x30;
;;;437    
;;;438    	Buf_zap[4]=95;
;;;439    	
;;;440    	tmp=DT.Month/10;
;;;441    	Buf_zap[5]=(uint8_t)(tmp)+(uint8_t)0x30;
;;;442    	tmp%=10;
;;;443    	Buf_zap[6]=(uint8_t)(tmp)+(uint8_t)0x30;
;;;444    
;;;445    	Buf_zap[7]=95;
;;;446    	
;;;447    	tmp=DT.Day/10;
;;;448    	Buf_zap[8]=(uint8_t)(tmp)+(uint8_t)0x30;
;;;449    	tmp%=10;
;;;450    	Buf_zap[9]=(uint8_t)(tmp)+(uint8_t)0x30;
;;;451    
;;;452    	Buf_zap[10]=95;
;;;453    	*/
;;;454    
;;;455    	Buf_zap[0]=(uint8_t)(DT_zap.Hours/10)+(uint8_t)0x30;
00001a  4a8d              LDR      r2,|L1.592|
00001c  8800              LDRH     r0,[r0,#0]            ;425  ; minute
00001e  8008              STRH     r0,[r1,#0]            ;425
000020  7911              LDRB     r1,[r2,#4]  ; DT_zap
000022  270a              MOVS     r7,#0xa
000024  fbb1f0f7          UDIV     r0,r1,r7
000028  f1000330          ADD      r3,r0,#0x30
00002c  4c89              LDR      r4,|L1.596|
;;;456    	Buf_zap[1]=(uint8_t)(DT_zap.Hours%10)+(uint8_t)0x30;
00002e  fb071010          MLS      r0,r7,r0,r1
000032  7023              STRB     r3,[r4,#0]            ;455
000034  3030              ADDS     r0,r0,#0x30
000036  7060              STRB     r0,[r4,#1]
;;;457    
;;;458    	Buf_zap[2]=0x3A; // :
000038  233a              MOVS     r3,#0x3a
00003a  70a3              STRB     r3,[r4,#2]
;;;459    
;;;460    
;;;461    	Buf_zap[3]=(uint8_t)(DT_zap.Minutes/10)+(uint8_t)0x30;
00003c  7951              LDRB     r1,[r2,#5]  ; DT_zap
;;;462    	Buf_zap[4]=(uint8_t)(DT_zap.Minutes%10)+(uint8_t)0x30;
;;;463    
;;;464    	Buf_zap[5]=0x3A;
;;;465    
;;;466    
;;;467    	Buf_zap[6]=(uint8_t)(DT_zap.Seconds/10)+(uint8_t)0x30;
;;;468    		Buf_zap[7]=(uint8_t)(DT_zap.Seconds%10)+(uint8_t)0x30;
;;;469    		
;;;470    		//	Buf_zap[8]=0x3B; //	;
;;;471    		//	Buf_zap[9]=0x0D; //	enter
;;;472    			
;;;473    	/*	
;;;474    			dec_to_chr(time_label,(uint8_t*) &Buf_zap[6]);
;;;475    			
;;;476    		  Buf_zap[11]=0x20;
;;;477    
;;;478    			sm=12;
;;;479    			
;;;480    			dec_to_chr(time_label,(uint8_t*) &Buf_zap[20]);
;;;481    			Buf_zap[25]=0x3B;
;;;482    			
;;;483    			*/
;;;484    			
;;;485    			sm=8;
00003e  4e86              LDR      r6,|L1.600|
000040  fbb1f0f7          UDIV     r0,r1,r7              ;461
000044  f1000530          ADD      r5,r0,#0x30           ;461
000048  fb071010          MLS      r0,r7,r0,r1           ;462
00004c  70e5              STRB     r5,[r4,#3]            ;461
00004e  3030              ADDS     r0,r0,#0x30           ;462
000050  7120              STRB     r0,[r4,#4]            ;462
000052  7163              STRB     r3,[r4,#5]            ;464
000054  7991              LDRB     r1,[r2,#6]            ;467  ; DT_zap
;;;486    
;;;487    			cnt=0;
;;;488    			kol_zap=0;
000056  4d82              LDR      r5,|L1.608|
000058  fbb1f0f7          UDIV     r0,r1,r7              ;467
00005c  f1000230          ADD      r2,r0,#0x30           ;467
000060  fb071010          MLS      r0,r7,r0,r1           ;468
000064  71a2              STRB     r2,[r4,#6]            ;467
000066  3030              ADDS     r0,r0,#0x30           ;468
000068  71e0              STRB     r0,[r4,#7]            ;468
00006a  2008              MOVS     r0,#8                 ;485
00006c  497b              LDR      r1,|L1.604|
00006e  7030              STRB     r0,[r6,#0]            ;485
000070  f04f0800          MOV      r8,#0                 ;487
;;;489    		
;;;490    			
;;;491    
;;;492    		if (number_buff)	
000074  487b              LDR      r0,|L1.612|
000076  f8a18000          STRH     r8,[r1,#0]            ;487
00007a  f8a58000          STRH     r8,[r5,#0]            ;488
00007e  7800              LDRB     r0,[r0,#0]  ; number_buff
;;;493    			while (kol_zap<600)
;;;494          {			
;;;495    			//	Buf_adc_zap1[kol_zap]=kol_zap;
;;;496    				Buf_zap[sm+kpl_simb_in_stroka*kol_zap]=0x3B; //	;
000080  f04f093b          MOV      r9,#0x3b
;;;497    			 dec_to_chr(Buf_adc_zap1[kol_zap],(uint8_t*) &Buf_zap[sm+kpl_simb_in_stroka*kol_zap+1]);			
;;;498    				kol_zap++;			
;;;499    				Buf_zap[sm+kpl_simb_in_stroka*kol_zap-1]=0x0D;	// enter
000084  f04f0a0d          MOV      r10,#0xd
000088  b3a0              CBZ      r0,|L1.244|
                  |L1.138|
00008a  882a              LDRH     r2,[r5,#0]            ;496  ; kol_zap
00008c  7833              LDRB     r3,[r6,#0]            ;496  ; sm
00008e  ebc200c2          RSB      r0,r2,r2,LSL #3       ;496
000092  4418              ADD      r0,r0,r3              ;496
000094  1901              ADDS     r1,r0,r4              ;497
000096  f8049000          STRB     r9,[r4,r0]            ;496
00009a  4873              LDR      r0,|L1.616|
00009c  1c49              ADDS     r1,r1,#1              ;497
00009e  f8300012          LDRH     r0,[r0,r2,LSL #1]     ;497
0000a2  f7fffffe          BL       dec_to_chr
0000a6  8828              LDRH     r0,[r5,#0]            ;498  ; kol_zap
0000a8  1c40              ADDS     r0,r0,#1              ;498
0000aa  b280              UXTH     r0,r0                 ;498
0000ac  8028              STRH     r0,[r5,#0]            ;498
0000ae  7833              LDRB     r3,[r6,#0]  ; sm
0000b0  ebc002c0          RSB      r2,r0,r0,LSL #3
0000b4  441a              ADD      r2,r2,r3
0000b6  4422              ADD      r2,r2,r4
0000b8  f5b07f16          CMP      r0,#0x258             ;493
0000bc  f802ac01          STRB     r10,[r2,#-1]
0000c0  d3e3              BCC      |L1.138|
0000c2  e01b              B        |L1.252|
                  |L1.196|
;;;500    			}
;;;501    		else
;;;502    			while (kol_zap<600)
;;;503          {			
;;;504    			while (kol_zap<600)
;;;505          {			
;;;506    			//	Buf_adc_zap2[kol_zap]=kol_zap+50000;
;;;507    				Buf_zap[sm+kpl_simb_in_stroka*kol_zap]=0x3B; //	;
0000c4  7833              LDRB     r3,[r6,#0]  ; sm
0000c6  ebc001c0          RSB      r1,r0,r0,LSL #3
0000ca  4419              ADD      r1,r1,r3
;;;508    			 dec_to_chr(Buf_adc_zap2[kol_zap],(uint8_t*) &Buf_zap[sm+kpl_simb_in_stroka*kol_zap+1]);			
0000cc  4a67              LDR      r2,|L1.620|
0000ce  f8049001          STRB     r9,[r4,r1]            ;507
0000d2  4421              ADD      r1,r1,r4
0000d4  1c49              ADDS     r1,r1,#1
0000d6  f8320010          LDRH     r0,[r2,r0,LSL #1]
0000da  f7fffffe          BL       dec_to_chr
;;;509    				kol_zap++;			
0000de  8828              LDRH     r0,[r5,#0]  ; kol_zap
0000e0  1c40              ADDS     r0,r0,#1
0000e2  b280              UXTH     r0,r0
0000e4  8028              STRH     r0,[r5,#0]
;;;510    				Buf_zap[sm+kpl_simb_in_stroka*kol_zap-1]=0x0D;	// enter
0000e6  7832              LDRB     r2,[r6,#0]  ; sm
0000e8  ebc000c0          RSB      r0,r0,r0,LSL #3
0000ec  4410              ADD      r0,r0,r2
0000ee  4420              ADD      r0,r0,r4
0000f0  f800ac01          STRB     r10,[r0,#-1]
                  |L1.244|
0000f4  8828              LDRH     r0,[r5,#0]            ;504  ; kol_zap
0000f6  f5b07f16          CMP      r0,#0x258             ;504
0000fa  d3e3              BCC      |L1.196|
                  |L1.252|
;;;511    			}		  	
;;;512    			}		
;;;513    			
;;;514    //			Buf_zap[sm+6*kol_zap]=13;
;;;515    			
;;;516    	//		por=0;
;;;517    			
;;;518    	//		f_unlink (REC_WAVE_NAME);
;;;519    	
;;;520    	//		f_open(&file, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE);
;;;521    	//		f_open(&file, REC_WAVE_NAME, FA_WRITE);
;;;522    			
;;;523    		/*
;;;524    			STM_EVAL_LEDOff(LED3);
;;;525    			STM_EVAL_LEDOff(LED4);
;;;526    			STM_EVAL_LEDOff(LED5);
;;;527    			STM_EVAL_LEDOff(LED6);
;;;528    		*/	
;;;529    				/* Set ON Red LED */ 
;;;530    			/*
;;;531    				while ((HCD_IsDeviceConnected(&USB_OTG_Core) != 1))
;;;532    				{
;;;533    					STM_EVAL_LEDOff(LED5);
;;;534    	//				Delay	(1000);		
;;;535    				}
;;;536    			*/	
;;;537    				if (HCD_IsDeviceConnected(&USB_OTG_Core) == 1)
0000fc  485c              LDR      r0,|L1.624|
0000fe  f7fffffe          BL       HCD_IsDeviceConnected
;;;538    				{
;;;539    		//			if (!file_cr)
;;;540    					{
;;;541    					if (f_open(&file,  (const XCHAR *)&file_name, FA_WRITE)== FR_OK)	
;;;542    				//		if (f_open(&file, (const XCHAR *)&file_name, FA_CREATE_ALWAYS)== FR_OK)
;;;543    						{
;;;544    							STM_EVAL_LEDOn(LED4);
;;;545    							f_lseek(&file, (DWORD)(file.fsize));
;;;546    							f_write (&file, (uint8_t*)Buf_zap, sm+kpl_simb_in_stroka*kol_zap, (void *)&bytesWritten); 				
;;;547    							f_close (&file);
;;;548    
;;;549    					//		if 	(DT.Minutes==0)
;;;550    					//			if (DT.Hours==0)
;;;551    									if (file_name[5]!=(DT.Day%10+0x30))
;;;552    									{
;;;553    										file_name[0]=(uint8_t)(DT.Year/10)+(uint8_t)0x30;
;;;554    										file_name[1]=(uint8_t)(DT.Year%10)+(uint8_t)0x30;
;;;555    									
;;;556    										file_name[2]=(uint8_t)(DT.Month/10)+(uint8_t)0x30;
;;;557    										file_name[3]=(uint8_t)(DT.Month%10)+(uint8_t)0x30;
;;;558    
;;;559    										file_name[4]=(uint8_t)(DT.Day/10)+(uint8_t)0x30;
;;;560    										file_name[5]=(uint8_t)(DT.Day%10)+(uint8_t)0x30;
;;;561    									}							
;;;562    						STM_EVAL_LEDOff(LED4);							
;;;563    						file_cr=1;
000102  f8dfa170          LDR      r10,|L1.628|
000106  2801              CMP      r0,#1                 ;537
000108  d007              BEQ      |L1.282|
;;;564    						}
;;;565    						else
;;;566    						{
;;;567    							if (f_open(&file, (const XCHAR *)&file_name, FA_CREATE_ALWAYS)== FR_OK)
;;;568    					//		if (f_open(&file,  (const XCHAR *)&file_name, FA_WRITE)== FR_OK)
;;;569    							{
;;;570    								
;;;571    								STM_EVAL_LEDOn(LED4);
;;;572    								f_lseek(&file,(DWORD) file.fsize);				
;;;573    								f_write (&file, (uint8_t*)Buf_zap, sm+kpl_simb_in_stroka*kol_zap, (void *)&bytesWritten); 				
;;;574    								f_close (&file);
;;;575    								
;;;576    										if (file_name[5]!=(DT.Day%10+0x30))
;;;577    										{
;;;578    										file_name[0]=(uint8_t)(DT.Year/10)+(uint8_t)0x30;
;;;579    										file_name[1]=(uint8_t)(DT.Year%10)+(uint8_t)0x30;
;;;580    									
;;;581    										file_name[2]=(uint8_t)(DT.Month/10)+(uint8_t)0x30;
;;;582    										file_name[3]=(uint8_t)(DT.Month%10)+(uint8_t)0x30;
;;;583    
;;;584    										file_name[4]=(uint8_t)(DT.Day/10)+(uint8_t)0x30;
;;;585    										file_name[5]=(uint8_t)(DT.Day%10)+(uint8_t)0x30;
;;;586    										}
;;;587    								
;;;588    								STM_EVAL_LEDOff(LED4);
;;;589    							}
;;;590    							else
;;;591    								STM_EVAL_LEDOn(LED5);
;;;592    									
;;;593    						}							
;;;594    					}
;;;595    				}
;;;596    				else
;;;597    					file_cr=0;
00010a  e000              B        |L1.270|
                  |L1.268|
00010c  e003              B        |L1.278|
                  |L1.270|
00010e  f88a8000          STRB     r8,[r10,#0]
                  |L1.274|
;;;598    				
;;;599    			buffering=0;
000112  f88b8000          STRB     r8,[r11,#0]
                  |L1.278|
;;;600    		}
;;;601    }
000116  e8bd9ffc          POP      {r2-r12,pc}
                  |L1.282|
00011a  2202              MOVS     r2,#2                 ;541
00011c  4956              LDR      r1,|L1.632|
00011e  4857              LDR      r0,|L1.636|
000120  f7fffffe          BL       f_open
000124  4c55              LDR      r4,|L1.636|
000126  f8df9150          LDR      r9,|L1.632|
00012a  b148              CBZ      r0,|L1.320|
00012c  2208              MOVS     r2,#8                 ;567
00012e  4649              MOV      r1,r9                 ;567
000130  4620              MOV      r0,r4                 ;567
000132  f7fffffe          BL       f_open
000136  b3e0              CBZ      r0,|L1.434|
000138  2002              MOVS     r0,#2                 ;591
00013a  f7fffffe          BL       STM_EVAL_LEDOn
00013e  e7e8              B        |L1.274|
                  |L1.320|
000140  2000              MOVS     r0,#0                 ;544
000142  f7fffffe          BL       STM_EVAL_LEDOn
000146  484d              LDR      r0,|L1.636|
000148  68e1              LDR      r1,[r4,#0xc]          ;545  ; file
00014a  f7fffffe          BL       f_lseek
00014e  8828              LDRH     r0,[r5,#0]            ;546  ; kol_zap
000150  7831              LDRB     r1,[r6,#0]            ;546  ; sm
000152  ebc000c0          RSB      r0,r0,r0,LSL #3       ;546
000156  1842              ADDS     r2,r0,r1              ;546
000158  4b49              LDR      r3,|L1.640|
00015a  493e              LDR      r1,|L1.596|
00015c  4847              LDR      r0,|L1.636|
00015e  f7fffffe          BL       f_write
000162  4846              LDR      r0,|L1.636|
000164  f7fffffe          BL       f_close
000168  f89d0002          LDRB     r0,[sp,#2]            ;551
00016c  f8991005          LDRB     r1,[r9,#5]            ;551  ; file_name
000170  fbb0f2f7          UDIV     r2,r0,r7              ;551
000174  fb070412          MLS      r4,r7,r2,r0           ;551
000178  3430              ADDS     r4,r4,#0x30           ;551
00017a  4648              MOV      r0,r9                 ;551
00017c  428c              CMP      r4,r1                 ;551
00017e  d01b              BEQ      |L1.440|
000180  f89d3000          LDRB     r3,[sp,#0]            ;553
000184  fbb3f1f7          UDIV     r1,r3,r7              ;553
000188  f1010530          ADD      r5,r1,#0x30           ;553
00018c  fb073111          MLS      r1,r7,r1,r3           ;554
000190  7005              STRB     r5,[r0,#0]            ;553
000192  3130              ADDS     r1,r1,#0x30           ;554
000194  7041              STRB     r1,[r0,#1]            ;554
000196  f89d1001          LDRB     r1,[sp,#1]            ;556
00019a  fbb1f3f7          UDIV     r3,r1,r7              ;556
00019e  fb071113          MLS      r1,r7,r3,r1           ;557
0001a2  f1030530          ADD      r5,r3,#0x30           ;556
0001a6  3130              ADDS     r1,r1,#0x30           ;557
0001a8  7085              STRB     r5,[r0,#2]            ;556
0001aa  70c1              STRB     r1,[r0,#3]            ;557
0001ac  3230              ADDS     r2,r2,#0x30           ;559
0001ae  7102              STRB     r2,[r0,#4]            ;559
0001b0  e000              B        |L1.436|
                  |L1.434|
0001b2  e008              B        |L1.454|
                  |L1.436|
0001b4  f8894005          STRB     r4,[r9,#5]            ;560
                  |L1.440|
0001b8  2000              MOVS     r0,#0                 ;562
0001ba  f7fffffe          BL       STM_EVAL_LEDOff
0001be  2101              MOVS     r1,#1                 ;563
0001c0  f88a1000          STRB     r1,[r10,#0]           ;563
0001c4  e7a5              B        |L1.274|
                  |L1.454|
0001c6  2000              MOVS     r0,#0                 ;571
0001c8  f7fffffe          BL       STM_EVAL_LEDOn
0001cc  482b              LDR      r0,|L1.636|
0001ce  68e1              LDR      r1,[r4,#0xc]          ;572  ; file
0001d0  f7fffffe          BL       f_lseek
0001d4  8828              LDRH     r0,[r5,#0]            ;573  ; kol_zap
0001d6  7831              LDRB     r1,[r6,#0]            ;573  ; sm
0001d8  ebc000c0          RSB      r0,r0,r0,LSL #3       ;573
0001dc  1842              ADDS     r2,r0,r1              ;573
0001de  4b28              LDR      r3,|L1.640|
0001e0  491c              LDR      r1,|L1.596|
0001e2  4826              LDR      r0,|L1.636|
0001e4  f7fffffe          BL       f_write
0001e8  4824              LDR      r0,|L1.636|
0001ea  f7fffffe          BL       f_close
0001ee  f89d0002          LDRB     r0,[sp,#2]            ;576
0001f2  f8991005          LDRB     r1,[r9,#5]            ;576  ; file_name
0001f6  fbb0f2f7          UDIV     r2,r0,r7              ;576
0001fa  fb070312          MLS      r3,r7,r2,r0           ;576
0001fe  3330              ADDS     r3,r3,#0x30           ;576
000200  4648              MOV      r0,r9                 ;576
000202  428b              CMP      r3,r1                 ;576
000204  d019              BEQ      |L1.570|
000206  f89d4000          LDRB     r4,[sp,#0]            ;578
00020a  fbb4f1f7          UDIV     r1,r4,r7              ;578
00020e  f1010530          ADD      r5,r1,#0x30           ;578
000212  fb074111          MLS      r1,r7,r1,r4           ;579
000216  7005              STRB     r5,[r0,#0]            ;578
000218  3130              ADDS     r1,r1,#0x30           ;579
00021a  7041              STRB     r1,[r0,#1]            ;579
00021c  f89d4001          LDRB     r4,[sp,#1]            ;581
000220  fbb4f1f7          UDIV     r1,r4,r7              ;581
000224  f1010530          ADD      r5,r1,#0x30           ;581
000228  fb074111          MLS      r1,r7,r1,r4           ;582
00022c  3130              ADDS     r1,r1,#0x30           ;582
00022e  7085              STRB     r5,[r0,#2]            ;581
000230  70c1              STRB     r1,[r0,#3]            ;582
000232  3230              ADDS     r2,r2,#0x30           ;584
000234  7102              STRB     r2,[r0,#4]            ;584
000236  f8893005          STRB     r3,[r9,#5]            ;585
                  |L1.570|
00023a  2000              MOVS     r0,#0                 ;588
00023c  f7fffffe          BL       STM_EVAL_LEDOff
000240  e767              B        |L1.274|
;;;602    
                          ENDP

000242  0000              DCW      0x0000
                  |L1.580|
                          DCD      buffering
                  |L1.584|
                          DCD      minute
                  |L1.588|
                          DCD      pred_minute
                  |L1.592|
                          DCD      DT_zap
                  |L1.596|
                          DCD      Buf_zap
                  |L1.600|
                          DCD      ||sm||
                  |L1.604|
                          DCD      ||cnt||
                  |L1.608|
                          DCD      kol_zap
                  |L1.612|
                          DCD      number_buff
                  |L1.616|
                          DCD      Buf_adc_zap1
                  |L1.620|
                          DCD      Buf_adc_zap2
                  |L1.624|
                          DCD      USB_OTG_Core
                  |L1.628|
                          DCD      file_cr
                  |L1.632|
                          DCD      ||.data||+0x1
                  |L1.636|
                          DCD      ||.bss||+0x430
                  |L1.640|
                          DCD      bytesWritten

                          AREA ||i.USBH_USR_Configuration_DescAvailable||, CODE, READONLY, ALIGN=1

                  USBH_USR_Configuration_DescAvailable PROC
;;;233      */
;;;234    void USBH_USR_Configuration_DescAvailable(USBH_CfgDesc_TypeDef * cfgDesc,
000000  4770              BX       lr
;;;235        USBH_InterfaceDesc_TypeDef *itfDesc,
;;;236        USBH_EpDesc_TypeDef *epDesc)
;;;237    {
;;;238      /* callback for configuration descriptor */
;;;239    }
;;;240    
                          ENDP


                          AREA ||i.USBH_USR_DeInit||, CODE, READONLY, ALIGN=2

                  USBH_USR_DeInit PROC
;;;608      */
;;;609    void USBH_USR_DeInit(void)
000000  4901              LDR      r1,|L3.8|
;;;610    {
;;;611      USBH_USR_ApplicationState = USH_USR_FS_INIT;
000002  2000              MOVS     r0,#0
000004  7008              STRB     r0,[r1,#0]
;;;612    }
000006  4770              BX       lr
;;;613    
                          ENDP

                  |L3.8|
                          DCD      ||.data||

                          AREA ||i.USBH_USR_DeviceAddressAssigned||, CODE, READONLY, ALIGN=1

                  USBH_USR_DeviceAddressAssigned PROC
;;;223      */
;;;224    void USBH_USR_DeviceAddressAssigned(void)
000000  4770              BX       lr
;;;225    {
;;;226      /* callback for device successfully assigned the Address */
;;;227    }
;;;228    
                          ENDP


                          AREA ||i.USBH_USR_DeviceAttached||, CODE, READONLY, ALIGN=2

                  USBH_USR_DeviceAttached PROC
;;;108      */
;;;109    void USBH_USR_DeviceAttached(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;110    {
;;;111    		TDateTime DT;
;;;112    		u8 tmp;
;;;113        
;;;114    	  rtc_Get(&DT);    
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       rtc_Get
;;;115      
;;;116    //	file_name[0]=0x32;
;;;117    //	file_name[1]=0x30;
;;;118    	
;;;119    	file_name[0]=(uint8_t)(DT.Year/10)+(uint8_t)0x30;
000008  f89d3000          LDRB     r3,[sp,#0]
00000c  210a              MOVS     r1,#0xa
00000e  fbb3f2f1          UDIV     r2,r3,r1
000012  f1020430          ADD      r4,r2,#0x30
000016  4818              LDR      r0,|L5.120|
;;;120    	file_name[1]=(uint8_t)(DT.Year%10)+(uint8_t)0x30;
000018  fb013212          MLS      r2,r1,r2,r3
00001c  7004              STRB     r4,[r0,#0]            ;119
00001e  3230              ADDS     r2,r2,#0x30
000020  7042              STRB     r2,[r0,#1]
;;;121    
;;;122    //	file_name[2]=95;
;;;123    	
;;;124    	file_name[2]=(uint8_t)(DT.Month/10)+(uint8_t)0x30;
000022  f89d3001          LDRB     r3,[sp,#1]
000026  fbb3f2f1          UDIV     r2,r3,r1
00002a  f1020430          ADD      r4,r2,#0x30
;;;125    	file_name[3]=(uint8_t)(DT.Month%10)+(uint8_t)0x30;
00002e  fb013212          MLS      r2,r1,r2,r3
000032  7084              STRB     r4,[r0,#2]            ;124
000034  3230              ADDS     r2,r2,#0x30
000036  70c2              STRB     r2,[r0,#3]
;;;126    
;;;127    //	file_name[5]=95;
;;;128    	
;;;129    	file_name[4]=(uint8_t)(DT.Day/10)+(uint8_t)0x30;
000038  f89d3002          LDRB     r3,[sp,#2]
00003c  fbb3f2f1          UDIV     r2,r3,r1
;;;130    	file_name[5]=(uint8_t)(DT.Day%10)+(uint8_t)0x30;
000040  fb013112          MLS      r1,r1,r2,r3
000044  f1020430          ADD      r4,r2,#0x30           ;129
000048  7104              STRB     r4,[r0,#4]            ;129
00004a  3130              ADDS     r1,r1,#0x30
00004c  7141              STRB     r1,[r0,#5]
;;;131    /*
;;;132    	file_name[10]=95;
;;;133    	
;;;134    	tmp=DT.Hours/10;
;;;135    	file_name[11]=(uint8_t)(tmp)+(uint8_t)0x30;
;;;136    	tmp%=10;
;;;137    	file_name[12]=(uint8_t)(tmp)+(uint8_t)0x30;
;;;138    
;;;139    	file_name[13]=95;
;;;140    
;;;141    	tmp=DT.Minutes/10;
;;;142    	file_name[14]=(uint8_t)(tmp)+(uint8_t)0x30;
;;;143    	tmp%=10;
;;;144    	file_name[15]=(uint8_t)(tmp)+(uint8_t)0x30;
;;;145    */
;;;146    // .txt
;;;147    	file_name[6]=0x2E;
00004e  212e              MOVS     r1,#0x2e
000050  7181              STRB     r1,[r0,#6]
;;;148    	file_name[7]=0x63;
000052  2163              MOVS     r1,#0x63
000054  71c1              STRB     r1,[r0,#7]
;;;149    	file_name[8]=0x73;
000056  2173              MOVS     r1,#0x73
000058  7201              STRB     r1,[r0,#8]
;;;150    	file_name[9]=0x76;
00005a  2176              MOVS     r1,#0x76
00005c  7241              STRB     r1,[r0,#9]
;;;151    
;;;152    
;;;153    /* Red LED off when device attached */
;;;154      STM_EVAL_LEDOff(LED5);
00005e  2002              MOVS     r0,#2
000060  f7fffffe          BL       STM_EVAL_LEDOff
;;;155      /* Green LED on */
;;;156      STM_EVAL_LEDOn(LED6);
000064  2003              MOVS     r0,#3
000066  f7fffffe          BL       STM_EVAL_LEDOn
;;;157      /* TIM Interrupts enable */
;;;158      TIM_ITConfig(TIM4, TIM_IT_CC1, ENABLE);
00006a  2201              MOVS     r2,#1
00006c  2102              MOVS     r1,#2
00006e  4803              LDR      r0,|L5.124|
000070  f7fffffe          BL       TIM_ITConfig
;;;159    }
000074  bd1c              POP      {r2-r4,pc}
;;;160    
                          ENDP

000076  0000              DCW      0x0000
                  |L5.120|
                          DCD      ||.data||+0x1
                  |L5.124|
                          DCD      0x40000800

                          AREA ||i.USBH_USR_DeviceDisconnected||, CODE, READONLY, ALIGN=2

                  USBH_USR_DeviceDisconnected PROC
;;;175      */
;;;176    void USBH_USR_DeviceDisconnected (void)
000000  b510              PUSH     {r4,lr}
;;;177    {
;;;178      /* Red Led on if the USB Key is removed */
;;;179      STM_EVAL_LEDOff(LED6);
000002  2003              MOVS     r0,#3
000004  f7fffffe          BL       STM_EVAL_LEDOff
;;;180    	STM_EVAL_LEDOff(LED5);
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       STM_EVAL_LEDOff
;;;181    	STM_EVAL_LEDOff(LED4);
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       STM_EVAL_LEDOff
;;;182      /* Disable the Timer */
;;;183      TIM_ITConfig(TIM4, TIM_IT_CC1 , DISABLE);
000014  2200              MOVS     r2,#0
000016  e8bd4010          POP      {r4,lr}
00001a  2102              MOVS     r1,#2
00001c  4801              LDR      r0,|L6.36|
00001e  f7ffbffe          B.W      TIM_ITConfig
;;;184    
;;;185    }
;;;186    
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
                          DCD      0x40000800

                          AREA ||i.USBH_USR_DeviceNotSupported||, CODE, READONLY, ALIGN=1

                  USBH_USR_DeviceNotSupported PROC
;;;290      */
;;;291    void USBH_USR_DeviceNotSupported(void)
000000  4770              BX       lr
;;;292    {
;;;293    }
;;;294    
                          ENDP


                          AREA ||i.USBH_USR_DeviceSpeedDetected||, CODE, READONLY, ALIGN=1

                  USBH_USR_DeviceSpeedDetected PROC
;;;203      */
;;;204    void USBH_USR_DeviceSpeedDetected(uint8_t DeviceSpeed)
000000  4770              BX       lr
;;;205    {
;;;206    }
;;;207    
                          ENDP


                          AREA ||i.USBH_USR_Device_DescAvailable||, CODE, READONLY, ALIGN=1

                  USBH_USR_Device_DescAvailable PROC
;;;212      */
;;;213    void USBH_USR_Device_DescAvailable(void *DeviceDesc)
000000  4770              BX       lr
;;;214    {
;;;215      /* callback for device descriptor */
;;;216    }
;;;217    
                          ENDP


                          AREA ||i.USBH_USR_EnumerationDone||, CODE, READONLY, ALIGN=1

                  USBH_USR_EnumerationDone PROC
;;;276      */
;;;277    void USBH_USR_EnumerationDone(void)
000000  b510              PUSH     {r4,lr}
;;;278    {
;;;279      /* 0.5 seconds delay */
;;;280      USB_OTG_BSP_mDelay(500);
000002  f44f70fa          MOV      r0,#0x1f4
000006  f7fffffe          BL       USB_OTG_BSP_mDelay
;;;281      
;;;282      USBH_USR_MSC_Application();
00000a  e8bd4010          POP      {r4,lr}
00000e  f7ffbffe          B.W      USBH_USR_MSC_Application
;;;283    } 
;;;284    
                          ENDP


                          AREA ||i.USBH_USR_Init||, CODE, READONLY, ALIGN=1

                  USBH_USR_Init PROC
;;;99       */
;;;100    void USBH_USR_Init(void)
000000  4770              BX       lr
;;;101    {
;;;102    }
;;;103    
                          ENDP


                          AREA ||i.USBH_USR_MSC_Application||, CODE, READONLY, ALIGN=2

                  USBH_USR_MSC_Application PROC
;;;322      */
;;;323    int USBH_USR_MSC_Application(void)
000000  b510              PUSH     {r4,lr}
;;;324    {
;;;325    
;;;326      switch (USBH_USR_ApplicationState)
000002  4c0f              LDR      r4,|L12.64|
000004  7820              LDRB     r0,[r4,#0]  ; USBH_USR_ApplicationState
000006  b110              CBZ      r0,|L12.14|
000008  2801              CMP      r0,#1
00000a  d10e              BNE      |L12.42|
00000c  e013              B        |L12.54|
                  |L12.14|
;;;327      {
;;;328        case USH_USR_FS_INIT:
;;;329    
;;;330          // Initialises the File System*/
;;;331          if (f_mount( 0, &fatfs ) != FR_OK )
00000e  490d              LDR      r1,|L12.68|
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       f_mount
000016  b110              CBZ      r0,|L12.30|
;;;332          {
;;;333            // efs initialisation fails
;;;334            return(-1);
000018  f04f30ff          MOV      r0,#0xffffffff
;;;335          }
;;;336          
;;;337          // Flash Disk is write protected //
;;;338          if (USBH_MSC_Param.MSWriteProtect == DISK_WRITE_PROTECTED)
;;;339          {
;;;340            while(1)
;;;341            {
;;;342              // Red LED On //
;;;343              STM_EVAL_LEDOn(LED5);
;;;344            }
;;;345          }
;;;346          // Go to menu 
;;;347          USBH_USR_ApplicationState = USH_USR_AUDIO;
;;;348          break;
;;;349    
;;;350        case USH_USR_AUDIO:
;;;351    
;;;352          // Go to Audio menu 
;;;353          COMMAND_AudioExecuteApplication();
;;;354    
;;;355          // Set user initialization flag //
;;;356          USBH_USR_ApplicationState = USH_USR_FS_INIT;
;;;357          break;
;;;358    
;;;359        default:
;;;360          break;
;;;361      }
;;;362      return(0);
;;;363    }
00001c  bd10              POP      {r4,pc}
                  |L12.30|
00001e  480a              LDR      r0,|L12.72|
000020  7b00              LDRB     r0,[r0,#0xc]          ;338  ; USBH_MSC_Param
000022  2801              CMP      r0,#1                 ;338
000024  d003              BEQ      |L12.46|
000026  2001              MOVS     r0,#1                 ;347
                  |L12.40|
000028  7020              STRB     r0,[r4,#0]            ;347
                  |L12.42|
00002a  2000              MOVS     r0,#0                 ;362
00002c  bd10              POP      {r4,pc}
                  |L12.46|
00002e  2002              MOVS     r0,#2                 ;343
000030  f7fffffe          BL       STM_EVAL_LEDOn
000034  e7fb              B        |L12.46|
                  |L12.54|
000036  f7fffffe          BL       COMMAND_AudioExecuteApplication
00003a  2000              MOVS     r0,#0                 ;356
00003c  e7f4              B        |L12.40|
;;;364    
                          ENDP

00003e  0000              DCW      0x0000
                  |L12.64|
                          DCD      ||.data||
                  |L12.68|
                          DCD      ||.bss||
                  |L12.72|
                          DCD      USBH_MSC_Param

                          AREA ||i.USBH_USR_Manufacturer_String||, CODE, READONLY, ALIGN=1

                  USBH_USR_Manufacturer_String PROC
;;;245      */
;;;246    void USBH_USR_Manufacturer_String(void *ManufacturerString)
000000  4770              BX       lr
;;;247    {
;;;248      /* callback for  Manufacturer String */
;;;249    }
;;;250    
                          ENDP


                          AREA ||i.USBH_USR_OverCurrentDetected||, CODE, READONLY, ALIGN=1

                  USBH_USR_OverCurrentDetected PROC
;;;313      */
;;;314    void USBH_USR_OverCurrentDetected (void)
000000  4770              BX       lr
;;;315    {
;;;316    }
;;;317    
                          ENDP


                          AREA ||i.USBH_USR_Product_String||, CODE, READONLY, ALIGN=1

                  USBH_USR_Product_String PROC
;;;255      */
;;;256    void USBH_USR_Product_String(void *ProductString)
000000  4770              BX       lr
;;;257    {
;;;258      /* callback for Product String */
;;;259    }
;;;260    
                          ENDP


                          AREA ||i.USBH_USR_ResetDevice||, CODE, READONLY, ALIGN=1

                  USBH_USR_ResetDevice PROC
;;;191      */
;;;192    void USBH_USR_ResetDevice(void)
000000  4770              BX       lr
;;;193    {
;;;194      /* callback for USB-Reset */
;;;195    }
;;;196    
                          ENDP


                          AREA ||i.USBH_USR_SerialNum_String||, CODE, READONLY, ALIGN=1

                  USBH_USR_SerialNum_String PROC
;;;265      */
;;;266    void USBH_USR_SerialNum_String(void *SerialNumString)
000000  4770              BX       lr
;;;267    {
;;;268      /* callback for SerialNum_String */
;;;269    }
;;;270    
                          ENDP


                          AREA ||i.USBH_USR_UnrecoveredError||, CODE, READONLY, ALIGN=1

                  USBH_USR_UnrecoveredError PROC
;;;165      */
;;;166    void USBH_USR_UnrecoveredError (void)
000000  4770              BX       lr
;;;167    {
;;;168    }
;;;169    
                          ENDP


                          AREA ||i.USBH_USR_UserInput||, CODE, READONLY, ALIGN=1

                  USBH_USR_UserInput PROC
;;;301      */
;;;302    USBH_USR_Status USBH_USR_UserInput(void)
000000  2001              MOVS     r0,#1
;;;303    {
;;;304      /* callback for Key botton: set by software in this case */
;;;305      return USBH_USR_RESP_OK;
;;;306    }
000002  4770              BX       lr
;;;307    
                          ENDP


                          AREA ||i.dec_to_chr||, CODE, READONLY, ALIGN=1

                  dec_to_chr PROC
;;;366    
;;;367    void dec_to_chr(u16 chislo,uint8_t* buf)
000000  f2427310          MOV      r3,#0x2710
;;;368    {
;;;369    	// BYTE *wbuff = buf;
;;;370    	u16 tmp=0;
;;;371    		
;;;372    	tmp=chislo/10000;
000004  fbb0f2f3          UDIV     r2,r0,r3
000008  b510              PUSH     {r4,lr}               ;368
;;;373    		  *buf=(uint8_t)(chislo/10000)+(uint8_t)0x30;
;;;374    			chislo%=10000;
00000a  fb030012          MLS      r0,r3,r2,r0
00000e  f1020430          ADD      r4,r2,#0x30           ;373
;;;375    			buf++;
;;;376    		  *buf=((uint8_t)(chislo/1000)+(uint8_t)0x30);
000012  f44f737a          MOV      r3,#0x3e8
000016  fbb0f2f3          UDIV     r2,r0,r3
00001a  700c              STRB     r4,[r1,#0]            ;373
;;;377    	chislo%=1000;
00001c  fb030012          MLS      r0,r3,r2,r0
000020  f1020430          ADD      r4,r2,#0x30           ;376
;;;378    			buf++;
;;;379    			*buf=((uint8_t)(chislo/100)+(uint8_t)0x30);
000024  2364              MOVS     r3,#0x64
000026  fbb0f2f3          UDIV     r2,r0,r3
00002a  704c              STRB     r4,[r1,#1]            ;376
;;;380    chislo%=100;
00002c  fb030012          MLS      r0,r3,r2,r0
000030  f1020430          ADD      r4,r2,#0x30           ;379
;;;381    			buf++;
;;;382    			*buf=((uint8_t)(chislo/10)+(uint8_t)0x30);
000034  230a              MOVS     r3,#0xa
000036  fbb0f2f3          UDIV     r2,r0,r3
00003a  708c              STRB     r4,[r1,#2]            ;379
;;;383    	chislo%=10;
00003c  fb030012          MLS      r0,r3,r2,r0
000040  f1020430          ADD      r4,r2,#0x30           ;382
000044  70cc              STRB     r4,[r1,#3]            ;382
;;;384    			buf++;
;;;385    			*buf=((uint8_t)(chislo)+(uint8_t)0x30);
000046  3030              ADDS     r0,r0,#0x30
000048  7108              STRB     r0,[r1,#4]
;;;386    			
;;;387    
;;;388    }
00004a  bd10              POP      {r4,pc}
;;;389    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  fatfs
                          %        1072
                  file
                          %        1060

                          AREA ||area_number.23||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.bss||
                  fileR
                          %        1060

                          AREA ||area_number.24||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.bss||
                  ||dir||
                          %        28

                          AREA ||area_number.25||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.bss||
                  ||fno||
                          %        24

                          AREA ||.data||, DATA, ALIGN=0

                  USBH_USR_ApplicationState
000000  00                DCB      0x00
                  file_name
000001  206572            DCB      0x20,0x65,0x72
000004  726f722e          DCB      0x72,0x6f,0x72,0x2e
000008  637376            DCB      0x63,0x73,0x76

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  new_name_file
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  Command_index
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.data||
                  USR_Callbacks
                          DCD      USBH_USR_Init
                          DCD      USBH_USR_DeInit
                          DCD      USBH_USR_DeviceAttached
                          DCD      USBH_USR_ResetDevice
                          DCD      USBH_USR_DeviceDisconnected
                          DCD      USBH_USR_OverCurrentDetected
                          DCD      USBH_USR_DeviceSpeedDetected
                          DCD      USBH_USR_Device_DescAvailable
                          DCD      USBH_USR_DeviceAddressAssigned
                          DCD      USBH_USR_Configuration_DescAvailable
                          DCD      USBH_USR_Manufacturer_String
                          DCD      USBH_USR_Product_String
                          DCD      USBH_USR_SerialNum_String
                          DCD      USBH_USR_EnumerationDone
                          DCD      USBH_USR_UserInput
                          DCD      USBH_USR_MSC_Application
                          DCD      USBH_USR_DeviceNotSupported
                          DCD      USBH_USR_UnrecoveredError

                          AREA ||area_number.31||, DATA, ALIGN=0

                          EXPORTAS ||area_number.31||, ||.data||
                  joystick_use
000000  00                DCB      0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  lcdLineNo
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "src\\usbh_usr.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_usbh_usr_c_d7df1668____REV16|
#line 114 ".\\Libraries\\CMSIS\\core_cmInstr.h"
|__asm___10_usbh_usr_c_d7df1668____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_usbh_usr_c_d7df1668____REVSH|
#line 128
|__asm___10_usbh_usr_c_d7df1668____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
