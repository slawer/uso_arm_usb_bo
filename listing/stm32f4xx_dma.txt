; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\MEDIA_USB_KEY\stm32f4xx_dma.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\MEDIA_USB_KEY\stm32f4xx_dma.d --cpu=Cortex-M4 --apcs=interwork -I.\Libraries -I.\Utilities -I.\Libraries\CMSIS\ST\STM32F4xx\Include -I.\inc -I.\src -I.\Libraries\STM32F4xx_StdPeriph_Driver -I.\Libraries\STM32_USB_HOST_Library -I.\Libraries\STM32_USB_OTG_Driver -I.\Utilities\STM32F4-Discovery -I.\Libraries\CMSIS -I.\Utilities\Third_Party\fat_fs -IC:\Keil4\ARM\RV31\INC -IC:\Keil4\ARM\CMSIS\Include -IC:\Keil4\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DUSE_USB_OTG_FS -DSTM32F4XX -DMEDIA_USB_KEY -D__FPU_PRESENT=0 --omf_browse=.\MEDIA_USB_KEY\stm32f4xx_dma.crf Libraries\CMSIS\stm32f4xx_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA_ClearFlag PROC
;;;1052     */
;;;1053   void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
000000  4a07              LDR      r2,|L1.32|
;;;1054   {
;;;1055     DMA_TypeDef* DMAy;
;;;1056   
;;;1057     /* Check the parameters */
;;;1058     assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;1059     assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
;;;1060   
;;;1061     /* Determine the DMA to which belongs the stream */
;;;1062     if (DMAy_Streamx < DMA2_Stream0)
000002  4290              CMP      r0,r2
000004  d201              BCS      |L1.10|
;;;1063     {
;;;1064       /* DMAy_Streamx belongs to DMA1 */
;;;1065       DMAy = DMA1; 
000006  4807              LDR      r0,|L1.36|
000008  e001              B        |L1.14|
                  |L1.10|
;;;1066     } 
;;;1067     else 
;;;1068     {
;;;1069       /* DMAy_Streamx belongs to DMA2 */
;;;1070       DMAy = DMA2; 
00000a  4805              LDR      r0,|L1.32|
00000c  3810              SUBS     r0,r0,#0x10
                  |L1.14|
;;;1071     }
;;;1072   
;;;1073     /* Check if LIFCR or HIFCR register is targeted */
;;;1074     if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
;;;1075     {
;;;1076       /* Set DMAy HIFCR register clear flag bits */
;;;1077       DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
00000e  4a06              LDR      r2,|L1.40|
000010  008b              LSLS     r3,r1,#2              ;1074
000012  ea010102          AND      r1,r1,r2
000016  d501              BPL      |L1.28|
000018  60c1              STR      r1,[r0,#0xc]
;;;1078     }
;;;1079     else 
;;;1080     {
;;;1081       /* Set DMAy LIFCR register clear flag bits */
;;;1082       DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
;;;1083     }    
;;;1084   }
00001a  4770              BX       lr
                  |L1.28|
00001c  6081              STR      r1,[r0,#8]            ;1082
00001e  4770              BX       lr
;;;1085   
                          ENDP

                  |L1.32|
                          DCD      0x40026410
                  |L1.36|
                          DCD      0x40026000
                  |L1.40|
                          DCD      0x0f7d0f7d

                          AREA ||i.DMA_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA_ClearITPendingBit PROC
;;;1233     */
;;;1234   void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
000000  4a07              LDR      r2,|L2.32|
;;;1235   {
;;;1236     DMA_TypeDef* DMAy;
;;;1237   
;;;1238     /* Check the parameters */
;;;1239     assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;1240     assert_param(IS_DMA_CLEAR_IT(DMA_IT));
;;;1241   
;;;1242     /* Determine the DMA to which belongs the stream */
;;;1243     if (DMAy_Streamx < DMA2_Stream0)
000002  4290              CMP      r0,r2
000004  d201              BCS      |L2.10|
;;;1244     {
;;;1245       /* DMAy_Streamx belongs to DMA1 */
;;;1246       DMAy = DMA1; 
000006  4807              LDR      r0,|L2.36|
000008  e001              B        |L2.14|
                  |L2.10|
;;;1247     } 
;;;1248     else 
;;;1249     {
;;;1250       /* DMAy_Streamx belongs to DMA2 */
;;;1251       DMAy = DMA2; 
00000a  4805              LDR      r0,|L2.32|
00000c  3810              SUBS     r0,r0,#0x10
                  |L2.14|
;;;1252     }
;;;1253   
;;;1254     /* Check if LIFCR or HIFCR register is targeted */
;;;1255     if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
;;;1256     {
;;;1257       /* Set DMAy HIFCR register clear interrupt bits */
;;;1258       DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
00000e  4a06              LDR      r2,|L2.40|
000010  008b              LSLS     r3,r1,#2              ;1255
000012  ea010102          AND      r1,r1,r2
000016  d501              BPL      |L2.28|
000018  60c1              STR      r1,[r0,#0xc]
;;;1259     }
;;;1260     else 
;;;1261     {
;;;1262       /* Set DMAy LIFCR register clear interrupt bits */
;;;1263       DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
;;;1264     }   
;;;1265   }
00001a  4770              BX       lr
                  |L2.28|
00001c  6081              STR      r1,[r0,#8]            ;1263
00001e  4770              BX       lr
;;;1266   
                          ENDP

                  |L2.32|
                          DCD      0x40026410
                  |L2.36|
                          DCD      0x40026000
                  |L2.40|
                          DCD      0x0f7d0f7d

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=1

                  DMA_Cmd PROC
;;;469      */
;;;470    void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;471    {
;;;472      /* Check the parameters */
;;;473      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;474      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;475    
;;;476      if (NewState != DISABLE)
;;;477      {
;;;478        /* Enable the selected DMAy Streamx by setting EN bit */
;;;479        DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
;;;480      }
;;;481      else
;;;482      {
;;;483        /* Disable the selected DMAy Streamx by clearing EN bit */
;;;484        DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L3.12|
000006  f0410101          ORR      r1,r1,#1              ;479
00000a  e001              B        |L3.16|
                  |L3.12|
00000c  f0210101          BIC      r1,r1,#1
                  |L3.16|
000010  6001              STR      r1,[r0,#0]            ;479
;;;485      }
;;;486    }
000012  4770              BX       lr
;;;487    
                          ENDP


                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;187      */
;;;188    void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;189    {
;;;190      /* Check the parameters */
;;;191      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;192    
;;;193      /* Disable the selected DMAy Streamx */
;;;194      DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
000004  6801              LDR      r1,[r0,#0]
000006  f0210101          BIC      r1,r1,#1
00000a  6001              STR      r1,[r0,#0]
;;;195    
;;;196      /* Reset DMAy Streamx control register */
;;;197      DMAy_Streamx->CR  = 0;
00000c  2100              MOVS     r1,#0
00000e  6001              STR      r1,[r0,#0]
;;;198      
;;;199      /* Reset DMAy Streamx Number of Data to Transfer register */
;;;200      DMAy_Streamx->NDTR = 0;
000010  6041              STR      r1,[r0,#4]
;;;201      
;;;202      /* Reset DMAy Streamx peripheral address register */
;;;203      DMAy_Streamx->PAR  = 0;
000012  6081              STR      r1,[r0,#8]
;;;204      
;;;205      /* Reset DMAy Streamx memory 0 address register */
;;;206      DMAy_Streamx->M0AR = 0;
000014  60c1              STR      r1,[r0,#0xc]
;;;207    
;;;208      /* Reset DMAy Streamx memory 1 address register */
;;;209      DMAy_Streamx->M1AR = 0;
000016  6101              STR      r1,[r0,#0x10]
;;;210    
;;;211      /* Reset DMAy Streamx FIFO control register */
;;;212      DMAy_Streamx->FCR = (uint32_t)0x00000021; 
000018  2121              MOVS     r1,#0x21
00001a  6141              STR      r1,[r0,#0x14]
;;;213    
;;;214      /* Reset interrupt pending bits for the selected stream */
;;;215      if (DMAy_Streamx == DMA1_Stream0)
;;;216      {
;;;217        /* Reset interrupt pending bits for DMA1 Stream0 */
;;;218        DMA1->LIFCR = DMA_Stream0_IT_MASK;
00001c  493c              LDR      r1,|L4.272|
00001e  4a3c              LDR      r2,|L4.272|
000020  253d              MOVS     r5,#0x3d
000022  3910              SUBS     r1,r1,#0x10
000024  4290              CMP      r0,r2                 ;215
000026  d102              BNE      |L4.46|
000028  608d              STR      r5,[r1,#8]
                  |L4.42|
;;;219      }
;;;220      else if (DMAy_Streamx == DMA1_Stream1)
;;;221      {
;;;222        /* Reset interrupt pending bits for DMA1 Stream1 */
;;;223        DMA1->LIFCR = DMA_Stream1_IT_MASK;
;;;224      }
;;;225      else if (DMAy_Streamx == DMA1_Stream2)
;;;226      {
;;;227        /* Reset interrupt pending bits for DMA1 Stream2 */
;;;228        DMA1->LIFCR = DMA_Stream2_IT_MASK;
;;;229      }
;;;230      else if (DMAy_Streamx == DMA1_Stream3)
;;;231      {
;;;232        /* Reset interrupt pending bits for DMA1 Stream3 */
;;;233        DMA1->LIFCR = DMA_Stream3_IT_MASK;
;;;234      }
;;;235      else if (DMAy_Streamx == DMA1_Stream4)
;;;236      {
;;;237        /* Reset interrupt pending bits for DMA1 Stream4 */
;;;238        DMA1->HIFCR = DMA_Stream4_IT_MASK;
;;;239      }
;;;240      else if (DMAy_Streamx == DMA1_Stream5)
;;;241      {
;;;242        /* Reset interrupt pending bits for DMA1 Stream5 */
;;;243        DMA1->HIFCR = DMA_Stream5_IT_MASK;
;;;244      }
;;;245      else if (DMAy_Streamx == DMA1_Stream6)
;;;246      {
;;;247        /* Reset interrupt pending bits for DMA1 Stream6 */
;;;248        DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
;;;249      }
;;;250      else if (DMAy_Streamx == DMA1_Stream7)
;;;251      {
;;;252        /* Reset interrupt pending bits for DMA1 Stream7 */
;;;253        DMA1->HIFCR = DMA_Stream7_IT_MASK;
;;;254      }
;;;255      else if (DMAy_Streamx == DMA2_Stream0)
;;;256      {
;;;257        /* Reset interrupt pending bits for DMA2 Stream0 */
;;;258        DMA2->LIFCR = DMA_Stream0_IT_MASK;
;;;259      }
;;;260      else if (DMAy_Streamx == DMA2_Stream1)
;;;261      {
;;;262        /* Reset interrupt pending bits for DMA2 Stream1 */
;;;263        DMA2->LIFCR = DMA_Stream1_IT_MASK;
;;;264      }
;;;265      else if (DMAy_Streamx == DMA2_Stream2)
;;;266      {
;;;267        /* Reset interrupt pending bits for DMA2 Stream2 */
;;;268        DMA2->LIFCR = DMA_Stream2_IT_MASK;
;;;269      }
;;;270      else if (DMAy_Streamx == DMA2_Stream3)
;;;271      {
;;;272        /* Reset interrupt pending bits for DMA2 Stream3 */
;;;273        DMA2->LIFCR = DMA_Stream3_IT_MASK;
;;;274      }
;;;275      else if (DMAy_Streamx == DMA2_Stream4)
;;;276      {
;;;277        /* Reset interrupt pending bits for DMA2 Stream4 */
;;;278        DMA2->HIFCR = DMA_Stream4_IT_MASK;
;;;279      }
;;;280      else if (DMAy_Streamx == DMA2_Stream5)
;;;281      {
;;;282        /* Reset interrupt pending bits for DMA2 Stream5 */
;;;283        DMA2->HIFCR = DMA_Stream5_IT_MASK;
;;;284      }
;;;285      else if (DMAy_Streamx == DMA2_Stream6)
;;;286      {
;;;287        /* Reset interrupt pending bits for DMA2 Stream6 */
;;;288        DMA2->HIFCR = DMA_Stream6_IT_MASK;
;;;289      }
;;;290      else 
;;;291      {
;;;292        if (DMAy_Streamx == DMA2_Stream7)
;;;293        {
;;;294          /* Reset interrupt pending bits for DMA2 Stream7 */
;;;295          DMA2->HIFCR = DMA_Stream7_IT_MASK;
;;;296        }
;;;297      }
;;;298    }
00002a  e8bd83f0          POP      {r4-r9,pc}
                  |L4.46|
00002e  4a38              LDR      r2,|L4.272|
000030  f44f6674          MOV      r6,#0xf40             ;223
000034  3218              ADDS     r2,r2,#0x18           ;220
000036  4290              CMP      r0,r2                 ;220
000038  d101              BNE      |L4.62|
00003a  608e              STR      r6,[r1,#8]            ;223
00003c  e7f5              B        |L4.42|
                  |L4.62|
00003e  4a34              LDR      r2,|L4.272|
000040  f44f1774          MOV      r7,#0x3d0000          ;228
000044  3230              ADDS     r2,r2,#0x30           ;225
000046  4290              CMP      r0,r2                 ;225
000048  d101              BNE      |L4.78|
00004a  608f              STR      r7,[r1,#8]            ;228
00004c  e7ed              B        |L4.42|
                  |L4.78|
00004e  4a30              LDR      r2,|L4.272|
000050  f04f6c74          MOV      r12,#0xf400000        ;233
000054  3248              ADDS     r2,r2,#0x48           ;230
000056  4290              CMP      r0,r2                 ;230
000058  d102              BNE      |L4.96|
00005a  f8c1c008          STR      r12,[r1,#8]           ;233
00005e  e7e4              B        |L4.42|
                  |L4.96|
000060  4b2b              LDR      r3,|L4.272|
000062  4a2c              LDR      r2,|L4.276|
000064  3360              ADDS     r3,r3,#0x60           ;235
000066  4298              CMP      r0,r3                 ;235
000068  d101              BNE      |L4.110|
00006a  60ca              STR      r2,[r1,#0xc]          ;238
00006c  e7dd              B        |L4.42|
                  |L4.110|
00006e  4c28              LDR      r4,|L4.272|
000070  4b29              LDR      r3,|L4.280|
000072  3478              ADDS     r4,r4,#0x78           ;240
000074  42a0              CMP      r0,r4                 ;240
000076  d101              BNE      |L4.124|
000078  60cb              STR      r3,[r1,#0xc]          ;243
00007a  e7d6              B        |L4.42|
                  |L4.124|
00007c  f8df8090          LDR      r8,|L4.272|
000080  4c26              LDR      r4,|L4.284|
000082  f1080890          ADD      r8,r8,#0x90           ;245
000086  4540              CMP      r0,r8                 ;245
000088  d101              BNE      |L4.142|
00008a  60cc              STR      r4,[r1,#0xc]          ;248
00008c  e7cd              B        |L4.42|
                  |L4.142|
00008e  f8df8080          LDR      r8,|L4.272|
000092  f04f593d          MOV      r9,#0x2f400000        ;253
000096  f10808a8          ADD      r8,r8,#0xa8           ;250
00009a  4540              CMP      r0,r8                 ;250
00009c  d102              BNE      |L4.164|
00009e  f8c1900c          STR      r9,[r1,#0xc]          ;253
0000a2  e7c2              B        |L4.42|
                  |L4.164|
0000a4  491e              LDR      r1,|L4.288|
0000a6  f8df8078          LDR      r8,|L4.288|
0000aa  3908              SUBS     r1,r1,#8              ;258
0000ac  4540              CMP      r0,r8                 ;255
0000ae  d101              BNE      |L4.180|
0000b0  600d              STR      r5,[r1,#0]            ;258
0000b2  e7ba              B        |L4.42|
                  |L4.180|
0000b4  4d1a              LDR      r5,|L4.288|
0000b6  3518              ADDS     r5,r5,#0x18           ;260
0000b8  42a8              CMP      r0,r5                 ;260
0000ba  d101              BNE      |L4.192|
0000bc  600e              STR      r6,[r1,#0]            ;263
0000be  e7b4              B        |L4.42|
                  |L4.192|
0000c0  4d17              LDR      r5,|L4.288|
0000c2  3530              ADDS     r5,r5,#0x30           ;265
0000c4  42a8              CMP      r0,r5                 ;265
0000c6  d101              BNE      |L4.204|
0000c8  600f              STR      r7,[r1,#0]            ;268
0000ca  e7ae              B        |L4.42|
                  |L4.204|
0000cc  4d14              LDR      r5,|L4.288|
0000ce  3548              ADDS     r5,r5,#0x48           ;270
0000d0  42a8              CMP      r0,r5                 ;270
0000d2  d102              BNE      |L4.218|
0000d4  f8c1c000          STR      r12,[r1,#0]           ;273
0000d8  e7a7              B        |L4.42|
                  |L4.218|
0000da  4d11              LDR      r5,|L4.288|
0000dc  4910              LDR      r1,|L4.288|
0000de  3560              ADDS     r5,r5,#0x60           ;275
0000e0  1f09              SUBS     r1,r1,#4              ;278
0000e2  42a8              CMP      r0,r5                 ;275
0000e4  d101              BNE      |L4.234|
0000e6  600a              STR      r2,[r1,#0]            ;278
0000e8  e79f              B        |L4.42|
                  |L4.234|
0000ea  4a0d              LDR      r2,|L4.288|
0000ec  3278              ADDS     r2,r2,#0x78           ;280
0000ee  4290              CMP      r0,r2                 ;280
0000f0  d101              BNE      |L4.246|
0000f2  600b              STR      r3,[r1,#0]            ;283
0000f4  e799              B        |L4.42|
                  |L4.246|
0000f6  4a0a              LDR      r2,|L4.288|
0000f8  3290              ADDS     r2,r2,#0x90           ;285
0000fa  4290              CMP      r0,r2                 ;285
0000fc  d101              BNE      |L4.258|
0000fe  600c              STR      r4,[r1,#0]            ;288
000100  e793              B        |L4.42|
                  |L4.258|
000102  4a07              LDR      r2,|L4.288|
000104  32a8              ADDS     r2,r2,#0xa8           ;292
000106  4290              CMP      r0,r2                 ;292
000108  d18f              BNE      |L4.42|
00010a  f8c19000          STR      r9,[r1,#0]            ;295
00010e  e78c              B        |L4.42|
;;;299    
                          ENDP

                  |L4.272|
                          DCD      0x40026010
                  |L4.276|
                          DCD      0x2000003d
                  |L4.280|
                          DCD      0x20000f40
                  |L4.284|
                          DCD      0x203d0000
                  |L4.288|
                          DCD      0x40026410

                          AREA ||i.DMA_DoubleBufferModeCmd||, CODE, READONLY, ALIGN=1

                  DMA_DoubleBufferModeCmd PROC
;;;748      */
;;;749    void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
000000  2900              CMP      r1,#0
;;;750    {  
;;;751      /* Check the parameters */
;;;752      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;753      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;754    
;;;755      /* Configure the Double Buffer mode */
;;;756      if (NewState != DISABLE)
;;;757      {
;;;758        /* Enable the Double buffer mode */
;;;759        DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
;;;760      }
;;;761      else
;;;762      {
;;;763        /* Disable the Double buffer mode */
;;;764        DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L5.12|
000006  f4412180          ORR      r1,r1,#0x40000        ;759
00000a  e001              B        |L5.16|
                  |L5.12|
00000c  f4212180          BIC      r1,r1,#0x40000
                  |L5.16|
000010  6001              STR      r1,[r0,#0]            ;759
;;;765      }
;;;766    }
000012  4770              BX       lr
;;;767    
                          ENDP


                          AREA ||i.DMA_DoubleBufferModeConfig||, CODE, READONLY, ALIGN=1

                  DMA_DoubleBufferModeConfig PROC
;;;717      */
;;;718    void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
000000  2a00              CMP      r2,#0
;;;719                                    uint32_t DMA_CurrentMemory)
;;;720    {  
;;;721      /* Check the parameters */
;;;722      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;723      assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
;;;724    
;;;725      if (DMA_CurrentMemory != DMA_Memory_0)
;;;726      {
;;;727        /* Set Memory 1 as current memory address */
;;;728        DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
;;;729      }
;;;730      else
;;;731      {
;;;732        /* Set Memory 0 as current memory address */
;;;733        DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
000002  6802              LDR      r2,[r0,#0]
000004  d002              BEQ      |L6.12|
000006  f4422200          ORR      r2,r2,#0x80000        ;728
00000a  e001              B        |L6.16|
                  |L6.12|
00000c  f4222200          BIC      r2,r2,#0x80000
                  |L6.16|
000010  6002              STR      r2,[r0,#0]
;;;734      }
;;;735    
;;;736      /* Write to DMAy Streamx M1AR */
;;;737      DMAy_Streamx->M1AR = Memory1BaseAddr;
000012  6101              STR      r1,[r0,#0x10]
;;;738    }
000014  4770              BX       lr
;;;739    
                          ENDP


                          AREA ||i.DMA_FlowControllerConfig||, CODE, READONLY, ALIGN=1

                  DMA_FlowControllerConfig PROC
;;;541      */
;;;542    void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
000000  2900              CMP      r1,#0
;;;543    {
;;;544      /* Check the parameters */
;;;545      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;546      assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
;;;547    
;;;548      /* Check the needed flow controller  */
;;;549      if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
;;;550      {
;;;551        /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
;;;552        DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
;;;553      }
;;;554      else
;;;555      {
;;;556        /* Clear the PFCTRL bit: Memory is the flow controller */
;;;557        DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L7.12|
000006  f0410120          ORR      r1,r1,#0x20           ;552
00000a  e001              B        |L7.16|
                  |L7.12|
00000c  f0210120          BIC      r1,r1,#0x20
                  |L7.16|
000010  6001              STR      r1,[r0,#0]            ;552
;;;558      }
;;;559    }
000012  4770              BX       lr
;;;560    /**
                          ENDP


                          AREA ||i.DMA_GetCmdStatus||, CODE, READONLY, ALIGN=1

                  DMA_GetCmdStatus PROC
;;;924      */
;;;925    FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
000000  4601              MOV      r1,r0
;;;926    {
;;;927      FunctionalState state = DISABLE;
000002  2000              MOVS     r0,#0
;;;928    
;;;929      /* Check the parameters */
;;;930      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;931    
;;;932      if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
000004  6809              LDR      r1,[r1,#0]
000006  07c9              LSLS     r1,r1,#31
000008  d000              BEQ      |L8.12|
;;;933      {
;;;934        /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
;;;935        state = ENABLE;
00000a  2001              MOVS     r0,#1
                  |L8.12|
;;;936      }
;;;937      else
;;;938      {
;;;939        /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
;;;940            all transfers are complete) */
;;;941        state = DISABLE;
;;;942      }
;;;943      return state;
;;;944    }
00000c  4770              BX       lr
;;;945    
                          ENDP


                          AREA ||i.DMA_GetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrDataCounter PROC
;;;640      */
;;;641    uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
000000  6840              LDR      r0,[r0,#4]
;;;642    {
;;;643      /* Check the parameters */
;;;644      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;645    
;;;646      /* Return the number of remaining data units for DMAy Streamx */
;;;647      return ((uint16_t)(DMAy_Streamx->NDTR));
000002  b280              UXTH     r0,r0
;;;648    }
000004  4770              BX       lr
;;;649    /**
                          ENDP


                          AREA ||i.DMA_GetCurrentMemoryTarget||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrentMemoryTarget PROC
;;;815      */
;;;816    uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
000000  4601              MOV      r1,r0
;;;817    {
;;;818      uint32_t tmp = 0;
000002  2000              MOVS     r0,#0
;;;819      
;;;820      /* Check the parameters */
;;;821      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;822    
;;;823      /* Get the current memory target */
;;;824      if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
000004  6809              LDR      r1,[r1,#0]
000006  0309              LSLS     r1,r1,#12
000008  d500              BPL      |L10.12|
;;;825      {
;;;826        /* Current memory buffer used is Memory 1 */
;;;827        tmp = 1;
00000a  2001              MOVS     r0,#1
                  |L10.12|
;;;828      }  
;;;829      else
;;;830      {
;;;831        /* Current memory buffer used is Memory 0 */
;;;832        tmp = 0;    
;;;833      }
;;;834      return tmp;
;;;835    }
00000c  4770              BX       lr
;;;836    /**
                          ENDP


                          AREA ||i.DMA_GetFIFOStatus||, CODE, READONLY, ALIGN=1

                  DMA_GetFIFOStatus PROC
;;;958      */
;;;959    uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
000000  6940              LDR      r0,[r0,#0x14]
;;;960    {
;;;961      uint32_t tmpreg = 0;
;;;962     
;;;963      /* Check the parameters */
;;;964      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;965      
;;;966      /* Get the FIFO level bits */
;;;967      tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
000002  f0000038          AND      r0,r0,#0x38
;;;968      
;;;969      return tmpreg;
;;;970    }
000006  4770              BX       lr
;;;971    
                          ENDP


                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;985      */
;;;986    FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
000000  4602              MOV      r2,r0
;;;987    {
;;;988      FlagStatus bitstatus = RESET;
;;;989      DMA_TypeDef* DMAy;
;;;990      uint32_t tmpreg = 0;
;;;991    
;;;992      /* Check the parameters */
;;;993      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;994      assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
;;;995    
;;;996      /* Determine the DMA to which belongs the stream */
;;;997      if (DMAy_Streamx < DMA2_Stream0)
000002  4b09              LDR      r3,|L12.40|
000004  2000              MOVS     r0,#0                 ;988
000006  429a              CMP      r2,r3
000008  d201              BCS      |L12.14|
;;;998      {
;;;999        /* DMAy_Streamx belongs to DMA1 */
;;;1000       DMAy = DMA1; 
00000a  4a08              LDR      r2,|L12.44|
00000c  e001              B        |L12.18|
                  |L12.14|
;;;1001     } 
;;;1002     else 
;;;1003     {
;;;1004       /* DMAy_Streamx belongs to DMA2 */
;;;1005       DMAy = DMA2; 
00000e  4a06              LDR      r2,|L12.40|
000010  3a10              SUBS     r2,r2,#0x10
                  |L12.18|
;;;1006     }
;;;1007   
;;;1008     /* Check if the flag is in HISR or LISR */
;;;1009     if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
000012  008b              LSLS     r3,r1,#2
000014  d501              BPL      |L12.26|
;;;1010     {
;;;1011       /* Get DMAy HISR register value */
;;;1012       tmpreg = DMAy->HISR;
000016  6852              LDR      r2,[r2,#4]
000018  e000              B        |L12.28|
                  |L12.26|
;;;1013     }
;;;1014     else
;;;1015     {
;;;1016       /* Get DMAy LISR register value */
;;;1017       tmpreg = DMAy->LISR;
00001a  6812              LDR      r2,[r2,#0]
                  |L12.28|
;;;1018     }   
;;;1019    
;;;1020     /* Mask the reserved bits */
;;;1021     tmpreg &= (uint32_t)RESERVED_MASK;
00001c  4b04              LDR      r3,|L12.48|
00001e  401a              ANDS     r2,r2,r3
;;;1022   
;;;1023     /* Check the status of the specified DMA flag */
;;;1024     if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
000020  420a              TST      r2,r1
000022  d000              BEQ      |L12.38|
;;;1025     {
;;;1026       /* DMA_FLAG is set */
;;;1027       bitstatus = SET;
000024  2001              MOVS     r0,#1
                  |L12.38|
;;;1028     }
;;;1029     else
;;;1030     {
;;;1031       /* DMA_FLAG is reset */
;;;1032       bitstatus = RESET;
;;;1033     }
;;;1034   
;;;1035     /* Return the DMA_FLAG status */
;;;1036     return  bitstatus;
;;;1037   }
000026  4770              BX       lr
;;;1038   
                          ENDP

                  |L12.40|
                          DCD      0x40026410
                  |L12.44|
                          DCD      0x40026000
                  |L12.48|
                          DCD      0x0f7d0f7d

                          AREA ||i.DMA_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetITStatus PROC
;;;1151     */
;;;1152   ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
000000  b530              PUSH     {r4,r5,lr}
;;;1153   {
;;;1154     ITStatus bitstatus = RESET;
;;;1155     DMA_TypeDef* DMAy;
;;;1156     uint32_t tmpreg = 0, enablestatus = 0;
;;;1157   
;;;1158     /* Check the parameters */
;;;1159     assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;1160     assert_param(IS_DMA_GET_IT(DMA_IT));
;;;1161    
;;;1162     /* Determine the DMA to which belongs the stream */
;;;1163     if (DMAy_Streamx < DMA2_Stream0)
000002  4a10              LDR      r2,|L13.68|
000004  2400              MOVS     r4,#0                 ;1154
000006  4290              CMP      r0,r2
000008  d201              BCS      |L13.14|
;;;1164     {
;;;1165       /* DMAy_Streamx belongs to DMA1 */
;;;1166       DMAy = DMA1; 
00000a  4a0f              LDR      r2,|L13.72|
00000c  e001              B        |L13.18|
                  |L13.14|
;;;1167     } 
;;;1168     else 
;;;1169     {
;;;1170       /* DMAy_Streamx belongs to DMA2 */
;;;1171       DMAy = DMA2; 
00000e  4a0d              LDR      r2,|L13.68|
000010  3a10              SUBS     r2,r2,#0x10
                  |L13.18|
;;;1172     }
;;;1173   
;;;1174     /* Check if the interrupt enable bit is in the CR or FCR register */
;;;1175     if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
000012  4b0e              LDR      r3,|L13.76|
000014  4219              TST      r1,r3
000016  d005              BEQ      |L13.36|
;;;1176     {
;;;1177       /* Get the interrupt enable position mask in CR register */
;;;1178       tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
000018  231e              MOVS     r3,#0x1e
00001a  ea0325d1          AND      r5,r3,r1,LSR #11
;;;1179       
;;;1180       /* Check the enable bit in CR register */
;;;1181       enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
00001e  6803              LDR      r3,[r0,#0]
000020  402b              ANDS     r3,r3,r5
000022  e002              B        |L13.42|
                  |L13.36|
;;;1182     }
;;;1183     else 
;;;1184     {
;;;1185       /* Check the enable bit in FCR register */
;;;1186       enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
000024  6940              LDR      r0,[r0,#0x14]
000026  f0000380          AND      r3,r0,#0x80
                  |L13.42|
;;;1187     }
;;;1188    
;;;1189     /* Check if the interrupt pending flag is in LISR or HISR */
;;;1190     if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
00002a  0088              LSLS     r0,r1,#2
00002c  d501              BPL      |L13.50|
;;;1191     {
;;;1192       /* Get DMAy HISR register value */
;;;1193       tmpreg = DMAy->HISR ;
00002e  6850              LDR      r0,[r2,#4]
000030  e000              B        |L13.52|
                  |L13.50|
;;;1194     }
;;;1195     else
;;;1196     {
;;;1197       /* Get DMAy LISR register value */
;;;1198       tmpreg = DMAy->LISR ;
000032  6810              LDR      r0,[r2,#0]
                  |L13.52|
;;;1199     } 
;;;1200   
;;;1201     /* mask all reserved bits */
;;;1202     tmpreg &= (uint32_t)RESERVED_MASK;
000034  4a06              LDR      r2,|L13.80|
000036  4010              ANDS     r0,r0,r2
;;;1203   
;;;1204     /* Check the status of the specified DMA interrupt */
;;;1205     if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
000038  4208              TST      r0,r1
00003a  d001              BEQ      |L13.64|
00003c  b103              CBZ      r3,|L13.64|
;;;1206     {
;;;1207       /* DMA_IT is set */
;;;1208       bitstatus = SET;
00003e  2401              MOVS     r4,#1
                  |L13.64|
;;;1209     }
;;;1210     else
;;;1211     {
;;;1212       /* DMA_IT is reset */
;;;1213       bitstatus = RESET;
;;;1214     }
;;;1215   
;;;1216     /* Return the DMA_IT status */
;;;1217     return  bitstatus;
000040  4620              MOV      r0,r4
;;;1218   }
000042  bd30              POP      {r4,r5,pc}
;;;1219   
                          ENDP

                  |L13.68|
                          DCD      0x40026410
                  |L13.72|
                          DCD      0x40026000
                  |L13.76|
                          DCD      0x0f3c0f3c
                  |L13.80|
                          DCD      0x0f7d0f7d

                          AREA ||i.DMA_ITConfig||, CODE, READONLY, ALIGN=1

                  DMA_ITConfig PROC
;;;1099     */
;;;1100   void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
000000  060b              LSLS     r3,r1,#24
;;;1101   {
000002  d507              BPL      |L14.20|
;;;1102     /* Check the parameters */
;;;1103     assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;1104     assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;1105     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1106   
;;;1107     /* Check if the DMA_IT parameter contains a FIFO interrupt */
;;;1108     if ((DMA_IT & DMA_IT_FE) != 0)
;;;1109     {
;;;1110       if (NewState != DISABLE)
;;;1111       {
;;;1112         /* Enable the selected DMA FIFO interrupts */
;;;1113         DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
;;;1114       }    
;;;1115       else 
;;;1116       {
;;;1117         /* Disable the selected DMA FIFO interrupts */
;;;1118         DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
000004  6943              LDR      r3,[r0,#0x14]
000006  b112              CBZ      r2,|L14.14|
000008  f0430380          ORR      r3,r3,#0x80           ;1113
00000c  e001              B        |L14.18|
                  |L14.14|
00000e  f0230380          BIC      r3,r3,#0x80
                  |L14.18|
000012  6143              STR      r3,[r0,#0x14]         ;1113
                  |L14.20|
;;;1119       }
;;;1120     }
;;;1121   
;;;1122     /* Check if the DMA_IT parameter contains a Transfer interrupt */
;;;1123     if (DMA_IT != DMA_IT_FE)
000014  2980              CMP      r1,#0x80
000016  d008              BEQ      |L14.42|
;;;1124     {
;;;1125       if (NewState != DISABLE)
000018  2a00              CMP      r2,#0
;;;1126       {
;;;1127         /* Enable the selected DMA transfer interrupts */
;;;1128         DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
;;;1129       }
;;;1130       else
;;;1131       {
;;;1132         /* Disable the selected DMA transfer interrupts */
;;;1133         DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
00001a  6802              LDR      r2,[r0,#0]
00001c  f001011e          AND      r1,r1,#0x1e           ;1128
000020  d001              BEQ      |L14.38|
000022  430a              ORRS     r2,r2,r1              ;1128
000024  e000              B        |L14.40|
                  |L14.38|
000026  438a              BICS     r2,r2,r1
                  |L14.40|
000028  6002              STR      r2,[r0,#0]
                  |L14.42|
;;;1134       }    
;;;1135     }
;;;1136   }
00002a  4770              BX       lr
;;;1137   
                          ENDP


                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=2

                  DMA_Init PROC
;;;310      */
;;;311    void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;312    {
;;;313      uint32_t tmpreg = 0;
;;;314    
;;;315      /* Check the parameters */
;;;316      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;317      assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
;;;318      assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
;;;319      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
;;;320      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;321      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
;;;322      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;323      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;324      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;325      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;326      assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
;;;327      assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
;;;328      assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
;;;329      assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
;;;330    
;;;331      /*------------------------- DMAy Streamx CR Configuration ------------------*/
;;;332      /* Get the DMAy_Streamx CR value */
;;;333      tmpreg = DMAy_Streamx->CR;
000002  6803              LDR      r3,[r0,#0]
;;;334    
;;;335      /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;336      tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
000004  4a12              LDR      r2,|L15.80|
;;;337                             DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
;;;338                             DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
;;;339                             DMA_SxCR_DIR));
;;;340    
;;;341      /* Configure DMAy Streamx: */
;;;342      /* Set CHSEL bits according to DMA_CHSEL value */
;;;343      /* Set DIR bits according to DMA_DIR value */
;;;344      /* Set PINC bit according to DMA_PeripheralInc value */
;;;345      /* Set MINC bit according to DMA_MemoryInc value */
;;;346      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;347      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;348      /* Set CIRC bit according to DMA_Mode value */
;;;349      /* Set PL bits according to DMA_Priority value */
;;;350      /* Set MBURST bits according to DMA_MemoryBurst value */
;;;351      /* Set PBURST bits according to DMA_PeripheralBurst value */
;;;352      tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
000006  68cc              LDR      r4,[r1,#0xc]
000008  4013              ANDS     r3,r3,r2              ;336
00000a  680a              LDR      r2,[r1,#0]
00000c  4322              ORRS     r2,r2,r4
00000e  e9d14505          LDRD     r4,r5,[r1,#0x14]
000012  432c              ORRS     r4,r4,r5
000014  4322              ORRS     r2,r2,r4
000016  69cc              LDR      r4,[r1,#0x1c]
000018  4322              ORRS     r2,r2,r4
00001a  6a0c              LDR      r4,[r1,#0x20]
00001c  4322              ORRS     r2,r2,r4
00001e  6a4c              LDR      r4,[r1,#0x24]
000020  4322              ORRS     r2,r2,r4
000022  6a8c              LDR      r4,[r1,#0x28]
000024  4322              ORRS     r2,r2,r4
000026  6b4c              LDR      r4,[r1,#0x34]
000028  4322              ORRS     r2,r2,r4
00002a  6b8c              LDR      r4,[r1,#0x38]
00002c  4322              ORRS     r2,r2,r4
00002e  431a              ORRS     r2,r2,r3
;;;353                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;354                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;355                DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
;;;356                DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
;;;357    
;;;358      /* Write to DMAy Streamx CR register */
;;;359      DMAy_Streamx->CR = tmpreg;
000030  6002              STR      r2,[r0,#0]
;;;360    
;;;361      /*------------------------- DMAy Streamx FCR Configuration -----------------*/
;;;362      /* Get the DMAy_Streamx FCR value */
;;;363      tmpreg = DMAy_Streamx->FCR;
000032  6942              LDR      r2,[r0,#0x14]
;;;364    
;;;365      /* Clear DMDIS and FTH bits */
;;;366      tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
000034  f0220307          BIC      r3,r2,#7
000038  e9d1240b          LDRD     r2,r4,[r1,#0x2c]
;;;367    
;;;368      /* Configure DMAy Streamx FIFO: 
;;;369        Set DMDIS bits according to DMA_FIFOMode value 
;;;370        Set FTH bits according to DMA_FIFOThreshold value */
;;;371      tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
00003c  4322              ORRS     r2,r2,r4
00003e  431a              ORRS     r2,r2,r3
;;;372    
;;;373      /* Write to DMAy Streamx CR */
;;;374      DMAy_Streamx->FCR = tmpreg;
000040  6142              STR      r2,[r0,#0x14]
;;;375    
;;;376      /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
;;;377      /* Write to DMAy Streamx NDTR register */
;;;378      DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
000042  690a              LDR      r2,[r1,#0x10]
000044  6042              STR      r2,[r0,#4]
;;;379    
;;;380      /*------------------------- DMAy Streamx PAR Configuration -----------------*/
;;;381      /* Write to DMAy Streamx PAR */
;;;382      DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000046  684a              LDR      r2,[r1,#4]
000048  6082              STR      r2,[r0,#8]
;;;383    
;;;384      /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
;;;385      /* Write to DMAy Streamx M0AR */
;;;386      DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
00004a  6889              LDR      r1,[r1,#8]
00004c  60c1              STR      r1,[r0,#0xc]
;;;387    }
00004e  bd30              POP      {r4,r5,pc}
;;;388    
                          ENDP

                  |L15.80|
                          DCD      0xf01c803f

                          AREA ||i.DMA_MemoryTargetConfig||, CODE, READONLY, ALIGN=1

                  DMA_MemoryTargetConfig PROC
;;;789      */
;;;790    void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
000000  b10a              CBZ      r2,|L16.6|
;;;791                               uint32_t DMA_MemoryTarget)
;;;792    {
;;;793      /* Check the parameters */
;;;794      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;795      assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
;;;796        
;;;797      /* Check the Memory target to be configured */
;;;798      if (DMA_MemoryTarget != DMA_Memory_0)
;;;799      {
;;;800        /* Write to DMAy Streamx M1AR */
;;;801        DMAy_Streamx->M1AR = MemoryBaseAddr;    
000002  6101              STR      r1,[r0,#0x10]
;;;802      }  
;;;803      else
;;;804      {
;;;805        /* Write to DMAy Streamx M0AR */
;;;806        DMAy_Streamx->M0AR = MemoryBaseAddr;  
;;;807      }
;;;808    }
000004  4770              BX       lr
                  |L16.6|
000006  60c1              STR      r1,[r0,#0xc]          ;806
000008  4770              BX       lr
;;;809    
                          ENDP


                          AREA ||i.DMA_PeriphIncOffsetSizeConfig||, CODE, READONLY, ALIGN=1

                  DMA_PeriphIncOffsetSizeConfig PROC
;;;505      */
;;;506    void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
000000  2900              CMP      r1,#0
;;;507    {
;;;508      /* Check the parameters */
;;;509      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;510      assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
;;;511    
;;;512      /* Check the needed Peripheral increment offset */
;;;513      if(DMA_Pincos != DMA_PINCOS_Psize)
;;;514      {
;;;515        /* Configure DMA_SxCR_PINCOS bit with the input parameter */
;;;516        DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
;;;517      }
;;;518      else
;;;519      {
;;;520        /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
;;;521        DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
000002  6801              LDR      r1,[r0,#0]
000004  d002              BEQ      |L17.12|
000006  f4414100          ORR      r1,r1,#0x8000         ;516
00000a  e001              B        |L17.16|
                  |L17.12|
00000c  f4214100          BIC      r1,r1,#0x8000
                  |L17.16|
000010  6001              STR      r1,[r0,#0]            ;516
;;;522      }
;;;523    }
000012  4770              BX       lr
;;;524    
                          ENDP


                          AREA ||i.DMA_SetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_SetCurrDataCounter PROC
;;;625      */
;;;626    void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
000000  6041              STR      r1,[r0,#4]
;;;627    {
;;;628      /* Check the parameters */
;;;629      assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
;;;630    
;;;631      /* Write the number of data units to be transferred */
;;;632      DMAy_Streamx->NDTR = (uint16_t)Counter;
;;;633    }
000002  4770              BX       lr
;;;634    
                          ENDP


                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;394      */
;;;395    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;396    {
;;;397      /*-------------- Reset DMA init structure parameters values ----------------*/
;;;398      /* Initialize the DMA_Channel member */
;;;399      DMA_InitStruct->DMA_Channel = 0;
;;;400    
;;;401      /* Initialize the DMA_PeripheralBaseAddr member */
;;;402      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
000002  6001              STR      r1,[r0,#0]
;;;403    
;;;404      /* Initialize the DMA_Memory0BaseAddr member */
;;;405      DMA_InitStruct->DMA_Memory0BaseAddr = 0;
000004  6041              STR      r1,[r0,#4]
;;;406    
;;;407      /* Initialize the DMA_DIR member */
;;;408      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
000006  6081              STR      r1,[r0,#8]
;;;409    
;;;410      /* Initialize the DMA_BufferSize member */
;;;411      DMA_InitStruct->DMA_BufferSize = 0;
000008  60c1              STR      r1,[r0,#0xc]
;;;412    
;;;413      /* Initialize the DMA_PeripheralInc member */
;;;414      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;415    
;;;416      /* Initialize the DMA_MemoryInc member */
;;;417      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00000c  6141              STR      r1,[r0,#0x14]
;;;418    
;;;419      /* Initialize the DMA_PeripheralDataSize member */
;;;420      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00000e  6181              STR      r1,[r0,#0x18]
;;;421    
;;;422      /* Initialize the DMA_MemoryDataSize member */
;;;423      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
000010  61c1              STR      r1,[r0,#0x1c]
;;;424    
;;;425      /* Initialize the DMA_Mode member */
;;;426      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000012  6201              STR      r1,[r0,#0x20]
;;;427    
;;;428      /* Initialize the DMA_Priority member */
;;;429      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000014  6241              STR      r1,[r0,#0x24]
;;;430    
;;;431      /* Initialize the DMA_FIFOMode member */
;;;432      DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
000016  6281              STR      r1,[r0,#0x28]
;;;433    
;;;434      /* Initialize the DMA_FIFOThreshold member */
;;;435      DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
000018  62c1              STR      r1,[r0,#0x2c]
;;;436    
;;;437      /* Initialize the DMA_MemoryBurst member */
;;;438      DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
00001a  6301              STR      r1,[r0,#0x30]
;;;439    
;;;440      /* Initialize the DMA_PeripheralBurst member */
;;;441      DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
00001c  6341              STR      r1,[r0,#0x34]
00001e  6381              STR      r1,[r0,#0x38]
;;;442    }
000020  4770              BX       lr
;;;443    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\CMSIS\\stm32f4xx_dma.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f4xx_dma_c_e9b554c0____REV16|
#line 114 ".\\Libraries\\CMSIS\\core_cmInstr.h"
|__asm___15_stm32f4xx_dma_c_e9b554c0____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f4xx_dma_c_e9b554c0____REVSH|
#line 128
|__asm___15_stm32f4xx_dma_c_e9b554c0____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
