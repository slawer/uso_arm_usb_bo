; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\media_usb_key\misc.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\media_usb_key\misc.d --cpu=Cortex-M4 --apcs=interwork -I.\Libraries -I.\Utilities -I.\Libraries\CMSIS\ST\STM32F4xx\Include -I.\inc -I.\src -I.\Libraries\STM32F4xx_StdPeriph_Driver -I.\Libraries\STM32_USB_HOST_Library -I.\Libraries\STM32_USB_OTG_Driver -I.\Utilities\STM32F4-Discovery -I.\Libraries\CMSIS -I.\Utilities\Third_Party\fat_fs -IC:\Keil4\ARM\RV31\INC -IC:\Keil4\ARM\CMSIS\Include -IC:\Keil4\ARM\Inc\ST\STM32F4xx -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DUSE_USB_OTG_FS -DSTM32F4XX -DMEDIA_USB_KEY -D__FPU_PRESENT=0 --omf_browse=.\media_usb_key\misc.crf Libraries\CMSIS\misc.c]
                          THUMB

                          AREA ||i.NVIC_Init||, CODE, READONLY, ALIGN=2

                  NVIC_Init PROC
;;;129      */
;;;130    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;131    {
;;;132      uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
000002  230f              MOVS     r3,#0xf
;;;133      
;;;134      /* Check the parameters */
;;;135      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;136      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;137      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;138        
;;;139      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000004  78c2              LDRB     r2,[r0,#3]
;;;140      {
;;;141        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;142        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
;;;143        tmppre = (0x4 - tmppriority);
;;;144        tmpsub = tmpsub >> tmppriority;
;;;145    
;;;146        tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
;;;147        tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
;;;148            
;;;149        tmppriority = tmppriority << 0x04;
;;;150            
;;;151        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
000006  7801              LDRB     r1,[r0,#0]
;;;152        
;;;153        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;154        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000008  2501              MOVS     r5,#1
00000a  f04f26e0          MOV      r6,#0xe000e000
00000e  b1e2              CBZ      r2,|L1.74|
000010  4a12              LDR      r2,|L1.92|
000012  6812              LDR      r2,[r2,#0]            ;142
000014  f40262e0          AND      r2,r2,#0x700          ;142
000018  f5c262e0          RSB      r2,r2,#0x700          ;142
00001c  f3c22207          UBFX     r2,r2,#8,#8           ;142
000020  f1c20404          RSB      r4,r2,#4              ;143
000024  40d3              LSRS     r3,r3,r2              ;144
000026  7842              LDRB     r2,[r0,#1]            ;146
000028  40a2              LSLS     r2,r2,r4              ;146
00002a  7884              LDRB     r4,[r0,#2]            ;147
00002c  401c              ANDS     r4,r4,r3              ;147
00002e  4b0c              LDR      r3,|L1.96|
000030  4314              ORRS     r4,r4,r2              ;147
000032  0122              LSLS     r2,r4,#4              ;149
000034  54ca              STRB     r2,[r1,r3]            ;151
000036  7800              LDRB     r0,[r0,#0]
000038  f000011f          AND      r1,r0,#0x1f
00003c  408d              LSLS     r5,r5,r1
00003e  0940              LSRS     r0,r0,#5
000040  eb060080          ADD      r0,r6,r0,LSL #2
000044  f8c05100          STR      r5,[r0,#0x100]
;;;155          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;156      }
;;;157      else
;;;158      {
;;;159        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;160        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
;;;161          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;162      }
;;;163    }
000048  bd70              POP      {r4-r6,pc}
                  |L1.74|
00004a  f001001f          AND      r0,r1,#0x1f           ;160
00004e  4085              LSLS     r5,r5,r0              ;160
000050  0948              LSRS     r0,r1,#5              ;160
000052  eb060080          ADD      r0,r6,r0,LSL #2       ;160
000056  f8c05180          STR      r5,[r0,#0x180]        ;160
00005a  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP

                  |L1.92|
                          DCD      0xe000ed0c
                  |L1.96|
                          DCD      0xe000e400

                          AREA ||i.NVIC_PriorityGroupConfig||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;111      */
;;;112    void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  4902              LDR      r1,|L2.12|
;;;113    {
;;;114      /* Check the parameters */
;;;115      assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;116      
;;;117      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;118      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  4308              ORRS     r0,r0,r1
000004  4902              LDR      r1,|L2.16|
000006  6008              STR      r0,[r1,#0]
;;;119    }
000008  4770              BX       lr
;;;120    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x05fa0000
                  |L2.16|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_SetVectorTable||, CODE, READONLY, ALIGN=2

                  NVIC_SetVectorTable PROC
;;;173      */
;;;174    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
000000  4a02              LDR      r2,|L3.12|
;;;175    { 
;;;176      /* Check the parameters */
;;;177      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;178      assert_param(IS_NVIC_OFFSET(Offset));  
;;;179       
;;;180      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000002  4011              ANDS     r1,r1,r2
000004  4301              ORRS     r1,r1,r0
000006  4802              LDR      r0,|L3.16|
000008  6001              STR      r1,[r0,#0]
;;;181    }
00000a  4770              BX       lr
;;;182    
                          ENDP

                  |L3.12|
                          DCD      0x1fffff80
                  |L3.16|
                          DCD      0xe000ed08

                          AREA ||i.NVIC_SystemLPConfig||, CODE, READONLY, ALIGN=2

                  NVIC_SystemLPConfig PROC
;;;192      */
;;;193    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
000000  4a04              LDR      r2,|L4.20|
;;;194    {
;;;195      /* Check the parameters */
;;;196      assert_param(IS_NVIC_LP(LowPowerMode));
;;;197      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;198      
;;;199      if (NewState != DISABLE)
000002  2900              CMP      r1,#0
;;;200      {
;;;201        SCB->SCR |= LowPowerMode;
;;;202      }
;;;203      else
;;;204      {
;;;205        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
000004  6811              LDR      r1,[r2,#0]
000006  d001              BEQ      |L4.12|
000008  4301              ORRS     r1,r1,r0              ;201
00000a  e000              B        |L4.14|
                  |L4.12|
00000c  4381              BICS     r1,r1,r0
                  |L4.14|
00000e  6011              STR      r1,[r2,#0]            ;201
;;;206      }
;;;207    }
000010  4770              BX       lr
;;;208    
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0xe000ed10

                          AREA ||i.SysTick_CLKSourceConfig||, CODE, READONLY, ALIGN=1

                  SysTick_CLKSourceConfig PROC
;;;216      */
;;;217    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;218    {
;;;219      /* Check the parameters */
;;;220      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;221      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
000004  2804              CMP      r0,#4
;;;222      {
;;;223        SysTick->CTRL |= SysTick_CLKSource_HCLK;
;;;224      }
;;;225      else
;;;226      {
;;;227        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
000006  6908              LDR      r0,[r1,#0x10]
000008  d003              BEQ      |L5.18|
00000a  f0200004          BIC      r0,r0,#4
                  |L5.14|
00000e  6108              STR      r0,[r1,#0x10]         ;223
;;;228      }
;;;229    }
000010  4770              BX       lr
                  |L5.18|
000012  f0400004          ORR      r0,r0,#4              ;223
000016  e7fa              B        |L5.14|
;;;230    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\CMSIS\\misc.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_misc_c_d0fc1254____REV16|
#line 114 ".\\Libraries\\CMSIS\\core_cmInstr.h"
|__asm___6_misc_c_d0fc1254____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_misc_c_d0fc1254____REVSH|
#line 128
|__asm___6_misc_c_d0fc1254____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
